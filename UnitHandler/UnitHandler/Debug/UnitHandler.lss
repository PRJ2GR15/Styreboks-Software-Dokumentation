
UnitHandler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000174c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000177c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003663  00000000  00000000  00001954  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000abc  00000000  00000000  00004fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013b6  00000000  00000000  00005a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000698  00000000  00000000  00006e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000095d  00000000  00000000  000074c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002ab9  00000000  00000000  00007e21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  0000a8da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	7a c0       	rjmp	.+244    	; 0xfa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c0       	rjmp	.+240    	; 0xfa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c0       	rjmp	.+236    	; 0xfa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c0       	rjmp	.+232    	; 0xfa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c0       	rjmp	.+228    	; 0xfa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c0       	rjmp	.+224    	; 0xfa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c0       	rjmp	.+220    	; 0xfa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c0       	rjmp	.+216    	; 0xfa <__bad_interrupt>
      22:	00 00       	nop
      24:	6a c0       	rjmp	.+212    	; 0xfa <__bad_interrupt>
      26:	00 00       	nop
      28:	68 c0       	rjmp	.+208    	; 0xfa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	66 c0       	rjmp	.+204    	; 0xfa <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c0       	rjmp	.+200    	; 0xfa <__bad_interrupt>
      32:	00 00       	nop
      34:	62 c0       	rjmp	.+196    	; 0xfa <__bad_interrupt>
      36:	00 00       	nop
      38:	60 c0       	rjmp	.+192    	; 0xfa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c0       	rjmp	.+188    	; 0xfa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c0       	rjmp	.+184    	; 0xfa <__bad_interrupt>
      42:	00 00       	nop
      44:	5a c0       	rjmp	.+180    	; 0xfa <__bad_interrupt>
      46:	00 00       	nop
      48:	58 c0       	rjmp	.+176    	; 0xfa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c0       	rjmp	.+172    	; 0xfa <__bad_interrupt>
      4e:	00 00       	nop
      50:	54 c0       	rjmp	.+168    	; 0xfa <__bad_interrupt>
      52:	00 00       	nop
      54:	52 c0       	rjmp	.+164    	; 0xfa <__bad_interrupt>
      56:	00 00       	nop
      58:	50 c0       	rjmp	.+160    	; 0xfa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4e c0       	rjmp	.+156    	; 0xfa <__bad_interrupt>
      5e:	00 00       	nop
      60:	4c c0       	rjmp	.+152    	; 0xfa <__bad_interrupt>
      62:	00 00       	nop
      64:	4a c0       	rjmp	.+148    	; 0xfa <__bad_interrupt>
      66:	00 00       	nop
      68:	48 c0       	rjmp	.+144    	; 0xfa <__bad_interrupt>
      6a:	00 00       	nop
      6c:	46 c0       	rjmp	.+140    	; 0xfa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c0       	rjmp	.+136    	; 0xfa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c0       	rjmp	.+132    	; 0xfa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c0       	rjmp	.+128    	; 0xfa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c0       	rjmp	.+124    	; 0xfa <__bad_interrupt>
      7e:	00 00       	nop
      80:	3c c0       	rjmp	.+120    	; 0xfa <__bad_interrupt>
      82:	00 00       	nop
      84:	3a c0       	rjmp	.+116    	; 0xfa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c0       	rjmp	.+112    	; 0xfa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	36 c0       	rjmp	.+108    	; 0xfa <__bad_interrupt>
      8e:	00 00       	nop
      90:	34 c0       	rjmp	.+104    	; 0xfa <__bad_interrupt>
      92:	00 00       	nop
      94:	32 c0       	rjmp	.+100    	; 0xfa <__bad_interrupt>
      96:	00 00       	nop
      98:	30 c0       	rjmp	.+96     	; 0xfa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	2e c0       	rjmp	.+92     	; 0xfa <__bad_interrupt>
      9e:	00 00       	nop
      a0:	2c c0       	rjmp	.+88     	; 0xfa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2a c0       	rjmp	.+84     	; 0xfa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	28 c0       	rjmp	.+80     	; 0xfa <__bad_interrupt>
      aa:	00 00       	nop
      ac:	26 c0       	rjmp	.+76     	; 0xfa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	24 c0       	rjmp	.+72     	; 0xfa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	22 c0       	rjmp	.+68     	; 0xfa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	20 c0       	rjmp	.+64     	; 0xfa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1e c0       	rjmp	.+60     	; 0xfa <__bad_interrupt>
      be:	00 00       	nop
      c0:	1c c0       	rjmp	.+56     	; 0xfa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1a c0       	rjmp	.+52     	; 0xfa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	18 c0       	rjmp	.+48     	; 0xfa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	16 c0       	rjmp	.+44     	; 0xfa <__bad_interrupt>
      ce:	00 00       	nop
      d0:	14 c0       	rjmp	.+40     	; 0xfa <__bad_interrupt>
      d2:	00 00       	nop
      d4:	12 c0       	rjmp	.+36     	; 0xfa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	10 c0       	rjmp	.+32     	; 0xfa <__bad_interrupt>
      da:	00 00       	nop
      dc:	0e c0       	rjmp	.+28     	; 0xfa <__bad_interrupt>
      de:	00 00       	nop
      e0:	0c c0       	rjmp	.+24     	; 0xfa <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60
      f4:	03 d0       	rcall	.+6      	; 0xfc <main>
      f6:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <_exit>

000000fa <__bad_interrupt>:
      fa:	82 cf       	rjmp	.-252    	; 0x0 <__vectors>

000000fc <main>:
#include "sd/sdCard.h"
#include "UnitHandler.h"
#include <util/delay.h>

int main()
{
      fc:	cf 92       	push	r12
      fe:	df 92       	push	r13
     100:	ef 92       	push	r14
     102:	ff 92       	push	r15
     104:	0f 93       	push	r16
     106:	1f 93       	push	r17
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
     110:	c6 50       	subi	r28, 0x06	; 6
     112:	d4 40       	sbci	r29, 0x04	; 4
     114:	0f b6       	in	r0, 0x3f	; 63
     116:	f8 94       	cli
     118:	de bf       	out	0x3e, r29	; 62
     11a:	0f be       	out	0x3f, r0	; 63
     11c:	cd bf       	out	0x3d, r28	; 61
	unsigned char input[512] = {0x00};
     11e:	fe 01       	movw	r30, r28
     120:	ef 5f       	subi	r30, 0xFF	; 255
     122:	fd 4f       	sbci	r31, 0xFD	; 253
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	92 e0       	ldi	r25, 0x02	; 2
     128:	df 01       	movw	r26, r30
     12a:	9c 01       	movw	r18, r24
     12c:	1d 92       	st	X+, r1
     12e:	21 50       	subi	r18, 0x01	; 1
     130:	30 40       	sbci	r19, 0x00	; 0
     132:	e1 f7       	brne	.-8      	; 0x12c <main+0x30>
		
	InitUART(9600, 8, 0);
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	48 e0       	ldi	r20, 0x08	; 8
     138:	60 e8       	ldi	r22, 0x80	; 128
     13a:	75 e2       	ldi	r23, 0x25	; 37
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	7b d3       	rcall	.+1782   	; 0x838 <_Z8InitUARTmhc>
	sdCard SD_obj(4000);
     142:	60 ea       	ldi	r22, 0xA0	; 160
     144:	7f e0       	ldi	r23, 0x0F	; 15
     146:	ce 01       	movw	r24, r28
     148:	8c 5f       	subi	r24, 0xFC	; 252
     14a:	9b 4f       	sbci	r25, 0xFB	; 251
     14c:	cb d0       	rcall	.+406    	; 0x2e4 <_ZN6sdCardC1Ei>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     14e:	8f e3       	ldi	r24, 0x3F	; 63
     150:	9c e9       	ldi	r25, 0x9C	; 156
     152:	01 97       	sbiw	r24, 0x01	; 1
     154:	f1 f7       	brne	.-4      	; 0x152 <main+0x56>
     156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x5c>
     158:	00 00       	nop
	_delay_ms(10);
	SD_obj.init();
     15a:	ce 01       	movw	r24, r28
     15c:	8c 5f       	subi	r24, 0xFC	; 252
     15e:	9b 4f       	sbci	r25, 0xFB	; 251
     160:	d1 d0       	rcall	.+418    	; 0x304 <_ZN6sdCard4initEv>
	UnitHandler unitHandling(&SD_obj);
     162:	be 01       	movw	r22, r28
     164:	6c 5f       	subi	r22, 0xFC	; 252
     166:	7b 4f       	sbci	r23, 0xFB	; 251
     168:	ce 01       	movw	r24, r28
     16a:	8f 5f       	subi	r24, 0xFF	; 255
     16c:	9b 4f       	sbci	r25, 0xFB	; 251
     16e:	af d3       	rcall	.+1886   	; 0x8ce <_ZN11UnitHandlerC1EP6sdCard>
	
	//Used to clear first 100 blocks before write operations begin..
	for (unsigned long i = 0; i<= 99; i++)
     170:	c1 2c       	mov	r12, r1
     172:	d1 2c       	mov	r13, r1
     174:	76 01       	movw	r14, r12
	{
		SD_obj.writeBlock(i,input);
     176:	9e 01       	movw	r18, r28
     178:	2f 5f       	subi	r18, 0xFF	; 255
     17a:	3d 4f       	sbci	r19, 0xFD	; 253
     17c:	b7 01       	movw	r22, r14
     17e:	a6 01       	movw	r20, r12
     180:	ce 01       	movw	r24, r28
     182:	8c 5f       	subi	r24, 0xFC	; 252
     184:	9b 4f       	sbci	r25, 0xFB	; 251
     186:	79 d2       	rcall	.+1266   	; 0x67a <_ZN6sdCard10writeBlockEmPKh>
	_delay_ms(10);
	SD_obj.init();
	UnitHandler unitHandling(&SD_obj);
	
	//Used to clear first 100 blocks before write operations begin..
	for (unsigned long i = 0; i<= 99; i++)
     188:	9f ef       	ldi	r25, 0xFF	; 255
     18a:	c9 1a       	sub	r12, r25
     18c:	d9 0a       	sbc	r13, r25
     18e:	e9 0a       	sbc	r14, r25
     190:	f9 0a       	sbc	r15, r25
     192:	a4 e6       	ldi	r26, 0x64	; 100
     194:	ca 16       	cp	r12, r26
     196:	d1 04       	cpc	r13, r1
     198:	e1 04       	cpc	r14, r1
     19a:	f1 04       	cpc	r15, r1
     19c:	61 f7       	brne	.-40     	; 0x176 <main+0x7a>
	}
	
	//Start of test!!!
	
	//Create room!
	unitHandling.createNewRoom(0xAA);
     19e:	6a ea       	ldi	r22, 0xAA	; 170
     1a0:	ce 01       	movw	r24, r28
     1a2:	8f 5f       	subi	r24, 0xFF	; 255
     1a4:	9b 4f       	sbci	r25, 0xFB	; 251
     1a6:	b1 d5       	rcall	.+2914   	; 0xd0a <_ZN11UnitHandler13createNewRoomEh>
	unitHandling.createNewRoom(0xBB);
     1a8:	6b eb       	ldi	r22, 0xBB	; 187
     1aa:	ce 01       	movw	r24, r28
     1ac:	8f 5f       	subi	r24, 0xFF	; 255
     1ae:	9b 4f       	sbci	r25, 0xFB	; 251
     1b0:	ac d5       	rcall	.+2904   	; 0xd0a <_ZN11UnitHandler13createNewRoomEh>
	unitHandling.createNewRoom(0xCC);
     1b2:	6c ec       	ldi	r22, 0xCC	; 204
     1b4:	ce 01       	movw	r24, r28
     1b6:	8f 5f       	subi	r24, 0xFF	; 255
     1b8:	9b 4f       	sbci	r25, 0xFB	; 251
     1ba:	a7 d5       	rcall	.+2894   	; 0xd0a <_ZN11UnitHandler13createNewRoomEh>
	unitHandling.createNewRoom(0xDD);
     1bc:	6d ed       	ldi	r22, 0xDD	; 221
     1be:	ce 01       	movw	r24, r28
     1c0:	8f 5f       	subi	r24, 0xFF	; 255
     1c2:	9b 4f       	sbci	r25, 0xFB	; 251
     1c4:	a2 d5       	rcall	.+2884   	; 0xd0a <_ZN11UnitHandler13createNewRoomEh>
	unitHandling.createNewRoom(0xEE);
     1c6:	6e ee       	ldi	r22, 0xEE	; 238
     1c8:	ce 01       	movw	r24, r28
     1ca:	8f 5f       	subi	r24, 0xFF	; 255
     1cc:	9b 4f       	sbci	r25, 0xFB	; 251
     1ce:	9d d5       	rcall	.+2874   	; 0xd0a <_ZN11UnitHandler13createNewRoomEh>
	unitHandling.createNewRoom(0xFE);
     1d0:	6e ef       	ldi	r22, 0xFE	; 254
     1d2:	ce 01       	movw	r24, r28
     1d4:	8f 5f       	subi	r24, 0xFF	; 255
     1d6:	9b 4f       	sbci	r25, 0xFB	; 251
     1d8:	98 d5       	rcall	.+2864   	; 0xd0a <_ZN11UnitHandler13createNewRoomEh>
	
	//Add units	
	unitHandling.AddUnit(0x01, 0xBB);
     1da:	4b eb       	ldi	r20, 0xBB	; 187
     1dc:	61 e0       	ldi	r22, 0x01	; 1
     1de:	ce 01       	movw	r24, r28
     1e0:	8f 5f       	subi	r24, 0xFF	; 255
     1e2:	9b 4f       	sbci	r25, 0xFB	; 251
     1e4:	32 d6       	rcall	.+3172   	; 0xe4a <_ZN11UnitHandler7AddUnitEhh>
	unitHandling.AddUnit(0x02, 0xBB);
     1e6:	4b eb       	ldi	r20, 0xBB	; 187
     1e8:	62 e0       	ldi	r22, 0x02	; 2
     1ea:	ce 01       	movw	r24, r28
     1ec:	8f 5f       	subi	r24, 0xFF	; 255
     1ee:	9b 4f       	sbci	r25, 0xFB	; 251
     1f0:	2c d6       	rcall	.+3160   	; 0xe4a <_ZN11UnitHandler7AddUnitEhh>
	unitHandling.AddUnit(0x03, 0xBB);
     1f2:	4b eb       	ldi	r20, 0xBB	; 187
     1f4:	63 e0       	ldi	r22, 0x03	; 3
     1f6:	ce 01       	movw	r24, r28
     1f8:	8f 5f       	subi	r24, 0xFF	; 255
     1fa:	9b 4f       	sbci	r25, 0xFB	; 251
     1fc:	26 d6       	rcall	.+3148   	; 0xe4a <_ZN11UnitHandler7AddUnitEhh>
	unitHandling.AddUnit(0x04, 0xBB);
     1fe:	4b eb       	ldi	r20, 0xBB	; 187
     200:	64 e0       	ldi	r22, 0x04	; 4
     202:	ce 01       	movw	r24, r28
     204:	8f 5f       	subi	r24, 0xFF	; 255
     206:	9b 4f       	sbci	r25, 0xFB	; 251
     208:	20 d6       	rcall	.+3136   	; 0xe4a <_ZN11UnitHandler7AddUnitEhh>
	unitHandling.AddUnit(0x05, 0xBB);
     20a:	4b eb       	ldi	r20, 0xBB	; 187
     20c:	65 e0       	ldi	r22, 0x05	; 5
     20e:	ce 01       	movw	r24, r28
     210:	8f 5f       	subi	r24, 0xFF	; 255
     212:	9b 4f       	sbci	r25, 0xFB	; 251
     214:	1a d6       	rcall	.+3124   	; 0xe4a <_ZN11UnitHandler7AddUnitEhh>
	unitHandling.AddUnit(0x06, 0xBB);
     216:	4b eb       	ldi	r20, 0xBB	; 187
     218:	66 e0       	ldi	r22, 0x06	; 6
     21a:	ce 01       	movw	r24, r28
     21c:	8f 5f       	subi	r24, 0xFF	; 255
     21e:	9b 4f       	sbci	r25, 0xFB	; 251
     220:	14 d6       	rcall	.+3112   	; 0xe4a <_ZN11UnitHandler7AddUnitEhh>
	
	//Remove a unit
 	unitHandling.RemoveUnit(0x03);
     222:	63 e0       	ldi	r22, 0x03	; 3
     224:	ce 01       	movw	r24, r28
     226:	8f 5f       	subi	r24, 0xFF	; 255
     228:	9b 4f       	sbci	r25, 0xFB	; 251
     22a:	a4 d4       	rcall	.+2376   	; 0xb74 <_ZN11UnitHandler10RemoveUnitEh>
	 
	 //Add a new unit too see if tha data is filled in too the seven blocks from the unit deleted.
  	unitHandling.AddUnit(0x33, 0xAA);
     22c:	4a ea       	ldi	r20, 0xAA	; 170
     22e:	63 e3       	ldi	r22, 0x33	; 51
     230:	ce 01       	movw	r24, r28
     232:	8f 5f       	subi	r24, 0xFF	; 255
     234:	9b 4f       	sbci	r25, 0xFB	; 251
     236:	09 d6       	rcall	.+3090   	; 0xe4a <_ZN11UnitHandler7AddUnitEhh>
	  
	//Remove unit from room (test if room list is updated)
	unitHandling.removeUnitFromRoom(0x04, 0xBB);
     238:	4b eb       	ldi	r20, 0xBB	; 187
     23a:	64 e0       	ldi	r22, 0x04	; 4
     23c:	ce 01       	movw	r24, r28
     23e:	8f 5f       	subi	r24, 0xFF	; 255
     240:	9b 4f       	sbci	r25, 0xFB	; 251
     242:	c8 d6       	rcall	.+3472   	; 0xfd4 <_ZN11UnitHandler18removeUnitFromRoomEhh>
	
	//Delete a room (test if room list is updated, and all blocks for the units in that room is updated (remove roomID from the saved data to those units))
 	unitHandling.deleteRoom(0xAA);
     244:	6a ea       	ldi	r22, 0xAA	; 170
     246:	ce 01       	movw	r24, r28
     248:	8f 5f       	subi	r24, 0xFF	; 255
     24a:	9b 4f       	sbci	r25, 0xFB	; 251
     24c:	88 d7       	rcall	.+3856   	; 0x115e <_ZN11UnitHandler10deleteRoomEh>
	 
	//Create new room, to see if the room is placed in the space of the roomlist that is free from deleting the room beforehand.
 	unitHandling.createNewRoom(0x0E);
     24e:	6e e0       	ldi	r22, 0x0E	; 14
     250:	ce 01       	movw	r24, r28
     252:	8f 5f       	subi	r24, 0xFF	; 255
     254:	9b 4f       	sbci	r25, 0xFB	; 251
     256:	59 d5       	rcall	.+2738   	; 0xd0a <_ZN11UnitHandler13createNewRoomEh>
	 
	unitHandling.editUnit(0x02, 0x55, 0x66);
     258:	26 e6       	ldi	r18, 0x66	; 102
     25a:	45 e5       	ldi	r20, 0x55	; 85
     25c:	62 e0       	ldi	r22, 0x02	; 2
     25e:	ce 01       	movw	r24, r28
     260:	8f 5f       	subi	r24, 0xFF	; 255
     262:	9b 4f       	sbci	r25, 0xFB	; 251
     264:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN11UnitHandler8editUnitEhhh>
     268:	8e 01       	movw	r16, r28
     26a:	0f 5f       	subi	r16, 0xFF	; 255
     26c:	1f 4f       	sbci	r17, 0xFF	; 255
     26e:	7e 01       	movw	r14, r28
     270:	bf ef       	ldi	r27, 0xFF	; 255
     272:	eb 1a       	sub	r14, r27
     274:	bd ef       	ldi	r27, 0xFD	; 253
     276:	fb 0a       	sbc	r15, r27
     278:	f8 01       	movw	r30, r16
	//First we fill an array with dummy data
	unsigned char timetable[512];
	
	for (int i = 0; i <= 511; i++)
	{
		timetable[i] = 0x44;
     27a:	84 e4       	ldi	r24, 0x44	; 68
     27c:	81 93       	st	Z+, r24
 
	//Test function UpdateTime()
	//First we fill an array with dummy data
	unsigned char timetable[512];
	
	for (int i = 0; i <= 511; i++)
     27e:	ee 15       	cp	r30, r14
     280:	ff 05       	cpc	r31, r15
     282:	e1 f7       	brne	.-8      	; 0x27c <main+0x180>
	{
		timetable[i] = 0x44;
	}
	
	//Then we set unit specific data
	timetable[0] = 0x01;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	89 83       	std	Y+1, r24	; 0x01
	timetable[2] = 0xAA;
     288:	9a ea       	ldi	r25, 0xAA	; 170
     28a:	9b 83       	std	Y+3, r25	; 0x03
	timetable[3] = 0x01;
     28c:	8c 83       	std	Y+4, r24	; 0x04
	
	//and write the block to the SD-card.
	unitHandling.UpdateTime(0x01, timetable);
     28e:	ae 01       	movw	r20, r28
     290:	4f 5f       	subi	r20, 0xFF	; 255
     292:	5f 4f       	sbci	r21, 0xFF	; 255
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	ce 01       	movw	r24, r28
     298:	8f 5f       	subi	r24, 0xFF	; 255
     29a:	9b 4f       	sbci	r25, 0xFB	; 251
     29c:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN11UnitHandler10UpdateTimeEhPh>
	
	//Test function getTimeTable()
	//First we empty the array.
	for (int i = 0; i <= 511; i++)
	{
		timetable[i] = 0x00;
     2a0:	f8 01       	movw	r30, r16
     2a2:	11 92       	st	Z+, r1
     2a4:	8f 01       	movw	r16, r30
	//and write the block to the SD-card.
	unitHandling.UpdateTime(0x01, timetable);
	
	//Test function getTimeTable()
	//First we empty the array.
	for (int i = 0; i <= 511; i++)
     2a6:	ee 16       	cp	r14, r30
     2a8:	ff 06       	cpc	r15, r31
     2aa:	d1 f7       	brne	.-12     	; 0x2a0 <main+0x1a4>
	{
		timetable[i] = 0x00;
	}
	
	//Then fill the array with the specified unit, and day.
	unitHandling.getTimeTable(0x01, 0x01, timetable);
     2ac:	9e 01       	movw	r18, r28
     2ae:	2f 5f       	subi	r18, 0xFF	; 255
     2b0:	3f 4f       	sbci	r19, 0xFF	; 255
     2b2:	41 e0       	ldi	r20, 0x01	; 1
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	ce 01       	movw	r24, r28
     2b8:	8f 5f       	subi	r24, 0xFF	; 255
     2ba:	9b 4f       	sbci	r25, 0xFB	; 251
     2bc:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <_ZN11UnitHandler12getTimeTableEhhPh>
	//Function worked, commented section to make sure arduino waste time tring to UART.
// 	for (int i = 0; i <= 511; i++)
// 	{
// 		SendChar(timetable[i]);
// 	}
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	ca 5f       	subi	r28, 0xFA	; 250
     2c6:	db 4f       	sbci	r29, 0xFB	; 251
     2c8:	0f b6       	in	r0, 0x3f	; 63
     2ca:	f8 94       	cli
     2cc:	de bf       	out	0x3e, r29	; 62
     2ce:	0f be       	out	0x3f, r0	; 63
     2d0:	cd bf       	out	0x3d, r28	; 61
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	1f 91       	pop	r17
     2d8:	0f 91       	pop	r16
     2da:	ff 90       	pop	r15
     2dc:	ef 90       	pop	r14
     2de:	df 90       	pop	r13
     2e0:	cf 90       	pop	r12
     2e2:	08 95       	ret

000002e4 <_ZN6sdCardC1Ei>:
	return spi_obj.recieveByte();
}

void sdCard::writeByte( unsigned char bla)
{
	spi_obj.writeByte(bla);
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	ec 01       	movw	r28, r24
     2ee:	8b 01       	movw	r16, r22
     2f0:	6d e7       	ldi	r22, 0x7D	; 125
     2f2:	70 e0       	ldi	r23, 0x00	; 0
     2f4:	8e d2       	rcall	.+1308   	; 0x812 <_ZN3SPIC1Ei>
     2f6:	1a 83       	std	Y+2, r17	; 0x02
     2f8:	09 83       	std	Y+1, r16	; 0x01
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	08 95       	ret

00000304 <_ZN6sdCard4initEv>:
}

bool sdCard::init()
{
     304:	af 92       	push	r10
     306:	bf 92       	push	r11
     308:	cf 92       	push	r12
     30a:	df 92       	push	r13
     30c:	ef 92       	push	r14
     30e:	ff 92       	push	r15
     310:	0f 93       	push	r16
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	00 d0       	rcall	.+0      	; 0x31a <_ZN6sdCard4initEv+0x16>
     31a:	1f 92       	push	r1
     31c:	1f 92       	push	r1
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	e8 2e       	mov	r14, r24
     324:	f9 2e       	mov	r15, r25
     326:	83 ef       	ldi	r24, 0xF3	; 243
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <_ZN6sdCard4initEv+0x26>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <_ZN6sdCard4initEv+0x2c>
     330:	00 00       	nop
	_delay_ms(2);
	PORTB = PINB | 0b00000001; // sets the SS pin ghigh
     332:	83 b1       	in	r24, 0x03	; 3
     334:	81 60       	ori	r24, 0x01	; 1
     336:	85 b9       	out	0x05, r24	; 5
	spi_obj.setFreq(125); // frequency during initiation must be lower than 400 kHz.
     338:	1e 2d       	mov	r17, r14
     33a:	0f 2d       	mov	r16, r15
     33c:	6d e7       	ldi	r22, 0x7D	; 125
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	8e 2d       	mov	r24, r14
     342:	9f 2d       	mov	r25, r15
     344:	41 d2       	rcall	.+1154   	; 0x7c8 <_ZN3SPI7setFreqEi>
     346:	e3 ef       	ldi	r30, 0xF3	; 243
     348:	f1 e0       	ldi	r31, 0x01	; 1
     34a:	31 97       	sbiw	r30, 0x01	; 1
     34c:	f1 f7       	brne	.-4      	; 0x34a <_ZN6sdCard4initEv+0x46>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <_ZN6sdCard4initEv+0x4c>
     350:	00 00       	nop
	_delay_ms(2); // let the clock settle in.
	
	// dummy cycles need to be moved to sdCard class.
	spi_obj.writeByte(0xFF);
     352:	6f ef       	ldi	r22, 0xFF	; 255
     354:	8e 2d       	mov	r24, r14
     356:	9f 2d       	mov	r25, r15
     358:	62 d2       	rcall	.+1220   	; 0x81e <_ZN3SPI9writeByteEh>
	spi_obj.writeByte(0xFF);
     35a:	6f ef       	ldi	r22, 0xFF	; 255
     35c:	8e 2d       	mov	r24, r14
     35e:	9f 2d       	mov	r25, r15
     360:	5e d2       	rcall	.+1212   	; 0x81e <_ZN3SPI9writeByteEh>
	spi_obj.writeByte(0xFF);
     362:	6f ef       	ldi	r22, 0xFF	; 255
     364:	8e 2d       	mov	r24, r14
     366:	9f 2d       	mov	r25, r15
     368:	5a d2       	rcall	.+1204   	; 0x81e <_ZN3SPI9writeByteEh>
	spi_obj.writeByte(0xFF);
     36a:	6f ef       	ldi	r22, 0xFF	; 255
     36c:	8e 2d       	mov	r24, r14
     36e:	9f 2d       	mov	r25, r15
     370:	56 d2       	rcall	.+1196   	; 0x81e <_ZN3SPI9writeByteEh>
	spi_obj.writeByte(0xFF);
     372:	6f ef       	ldi	r22, 0xFF	; 255
     374:	8e 2d       	mov	r24, r14
     376:	9f 2d       	mov	r25, r15
     378:	52 d2       	rcall	.+1188   	; 0x81e <_ZN3SPI9writeByteEh>
	spi_obj.writeByte(0xFF);
     37a:	6f ef       	ldi	r22, 0xFF	; 255
     37c:	8e 2d       	mov	r24, r14
     37e:	9f 2d       	mov	r25, r15
     380:	4e d2       	rcall	.+1180   	; 0x81e <_ZN3SPI9writeByteEh>
	spi_obj.writeByte(0xFF);
     382:	6f ef       	ldi	r22, 0xFF	; 255
     384:	8e 2d       	mov	r24, r14
     386:	9f 2d       	mov	r25, r15
     388:	4a d2       	rcall	.+1172   	; 0x81e <_ZN3SPI9writeByteEh>
	spi_obj.writeByte(0xFF);
     38a:	6f ef       	ldi	r22, 0xFF	; 255
     38c:	8e 2d       	mov	r24, r14
     38e:	9f 2d       	mov	r25, r15
     390:	46 d2       	rcall	.+1164   	; 0x81e <_ZN3SPI9writeByteEh>
	spi_obj.writeByte(0xFF);
     392:	6f ef       	ldi	r22, 0xFF	; 255
     394:	8e 2d       	mov	r24, r14
     396:	9f 2d       	mov	r25, r15
     398:	42 d2       	rcall	.+1156   	; 0x81e <_ZN3SPI9writeByteEh>
	spi_obj.writeByte(0xFF);
     39a:	6f ef       	ldi	r22, 0xFF	; 255
     39c:	8e 2d       	mov	r24, r14
     39e:	9f 2d       	mov	r25, r15
     3a0:	3e d2       	rcall	.+1148   	; 0x81e <_ZN3SPI9writeByteEh>
	
	unsigned char result = 0x00; // variable to store the result for error checking.
	do
	{
		PORTB = PINB & 0b11111110; // set the SS pin low
     3a2:	23 b1       	in	r18, 0x03	; 3
     3a4:	2e 7f       	andi	r18, 0xFE	; 254
     3a6:	25 b9       	out	0x05, r18	; 5
		// CMD0 needs to be moved to SD card class
		spi_obj.writeByte(0xFF); // dummy byte to let clock sync.
     3a8:	6f ef       	ldi	r22, 0xFF	; 255
     3aa:	81 2f       	mov	r24, r17
     3ac:	90 2f       	mov	r25, r16
     3ae:	37 d2       	rcall	.+1134   	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x40); // cmd
     3b0:	60 e4       	ldi	r22, 0x40	; 64
     3b2:	81 2f       	mov	r24, r17
     3b4:	90 2f       	mov	r25, r16
     3b6:	33 d2       	rcall	.+1126   	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00); // no argument
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	81 2f       	mov	r24, r17
     3bc:	90 2f       	mov	r25, r16
     3be:	2f d2       	rcall	.+1118   	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00); // no argument
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	81 2f       	mov	r24, r17
     3c4:	90 2f       	mov	r25, r16
     3c6:	2b d2       	rcall	.+1110   	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00); // no argument
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	81 2f       	mov	r24, r17
     3cc:	90 2f       	mov	r25, r16
     3ce:	27 d2       	rcall	.+1102   	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00); // no argument
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	81 2f       	mov	r24, r17
     3d4:	90 2f       	mov	r25, r16
     3d6:	23 d2       	rcall	.+1094   	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x95); // CRC
     3d8:	65 e9       	ldi	r22, 0x95	; 149
     3da:	81 2f       	mov	r24, r17
     3dc:	90 2f       	mov	r25, r16
     3de:	1f d2       	rcall	.+1086   	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.recieveByte(); // grab blank return before the real value is extracted
     3e0:	81 2f       	mov	r24, r17
     3e2:	90 2f       	mov	r25, r16
     3e4:	22 d2       	rcall	.+1092   	; 0x82a <_ZN3SPI11recieveByteEv>
		result = spi_obj.recieveByte(); // grab R1 return value
     3e6:	81 2f       	mov	r24, r17
     3e8:	90 2f       	mov	r25, r16
     3ea:	1f d2       	rcall	.+1086   	; 0x82a <_ZN3SPI11recieveByteEv>
	spi_obj.writeByte(0xFF);
	spi_obj.writeByte(0xFF);
	spi_obj.writeByte(0xFF);
	
	unsigned char result = 0x00; // variable to store the result for error checking.
	do
     3ec:	8f 3f       	cpi	r24, 0xFF	; 255
     3ee:	c9 f2       	breq	.-78     	; 0x3a2 <_ZN6sdCard4initEv+0x9e>
		spi_obj.writeByte(0x95); // CRC
		spi_obj.recieveByte(); // grab blank return before the real value is extracted
		result = spi_obj.recieveByte(); // grab R1 return value
	} while (result == 0xFF);
	
	if(result == 0x01)
     3f0:	81 30       	cpi	r24, 0x01	; 1
     3f2:	09 f0       	breq	.+2      	; 0x3f6 <_ZN6sdCard4initEv+0xf2>
     3f4:	bf c0       	rjmp	.+382    	; 0x574 <_ZN6sdCard4initEv+0x270>
	{
		// CMD8 needs to be moved to SD card class
		spi_obj.writeByte(0xFF); // Dummy byte to let clock sync
     3f6:	6f ef       	ldi	r22, 0xFF	; 255
     3f8:	8e 2d       	mov	r24, r14
     3fa:	9f 2d       	mov	r25, r15
     3fc:	10 d2       	rcall	.+1056   	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x48); // CMD
     3fe:	68 e4       	ldi	r22, 0x48	; 72
     400:	8e 2d       	mov	r24, r14
     402:	9f 2d       	mov	r25, r15
     404:	0c d2       	rcall	.+1048   	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00); // argument data 4 bytes
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	8e 2d       	mov	r24, r14
     40a:	9f 2d       	mov	r25, r15
     40c:	08 d2       	rcall	.+1040   	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00);
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	8e 2d       	mov	r24, r14
     412:	9f 2d       	mov	r25, r15
     414:	04 d2       	rcall	.+1032   	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x01);
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	8e 2d       	mov	r24, r14
     41a:	9f 2d       	mov	r25, r15
     41c:	00 d2       	rcall	.+1024   	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0xAA);
     41e:	6a ea       	ldi	r22, 0xAA	; 170
     420:	8e 2d       	mov	r24, r14
     422:	9f 2d       	mov	r25, r15
     424:	fc d1       	rcall	.+1016   	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x87); // CRC
     426:	67 e8       	ldi	r22, 0x87	; 135
     428:	8e 2d       	mov	r24, r14
     42a:	9f 2d       	mov	r25, r15
     42c:	f8 d1       	rcall	.+1008   	; 0x81e <_ZN3SPI9writeByteEh>
	else
	{
		return false;
	}
	unsigned char cmd8result[5];
	spi_obj.recieveByte(); // grab useless data from pause before the real response.
     42e:	8e 2d       	mov	r24, r14
     430:	9f 2d       	mov	r25, r15
     432:	fb d1       	rcall	.+1014   	; 0x82a <_ZN3SPI11recieveByteEv>
     434:	ce 01       	movw	r24, r28
     436:	01 96       	adiw	r24, 0x01	; 1
     438:	6c 01       	movw	r12, r24
     43a:	5e 01       	movw	r10, r28
     43c:	96 e0       	ldi	r25, 0x06	; 6
     43e:	a9 0e       	add	r10, r25
     440:	b1 1c       	adc	r11, r1
	for(int i = 0; i < 5; i++)
	{
		cmd8result[i] = spi_obj.recieveByte(); // fill in the response array
     442:	81 2f       	mov	r24, r17
     444:	90 2f       	mov	r25, r16
     446:	f1 d1       	rcall	.+994    	; 0x82a <_ZN3SPI11recieveByteEv>
     448:	f6 01       	movw	r30, r12
     44a:	81 93       	st	Z+, r24
     44c:	6f 01       	movw	r12, r30
	{
		return false;
	}
	unsigned char cmd8result[5];
	spi_obj.recieveByte(); // grab useless data from pause before the real response.
	for(int i = 0; i < 5; i++)
     44e:	ea 15       	cp	r30, r10
     450:	fb 05       	cpc	r31, r11
     452:	b9 f7       	brne	.-18     	; 0x442 <_ZN6sdCard4initEv+0x13e>
	{
		cmd8result[i] = spi_obj.recieveByte(); // fill in the response array
	}

	if( cmd8result[0] == 0x01 && cmd8result[1] == 0x00 && cmd8result[2] == 0x00 && cmd8result[3] == 0x01 && cmd8result[4] == 0xAA ) // validate that the card is sd v2
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	81 30       	cpi	r24, 0x01	; 1
     458:	09 f0       	breq	.+2      	; 0x45c <_ZN6sdCard4initEv+0x158>
     45a:	8e c0       	rjmp	.+284    	; 0x578 <_ZN6sdCard4initEv+0x274>
     45c:	8a 81       	ldd	r24, Y+2	; 0x02
     45e:	81 11       	cpse	r24, r1
     460:	8d c0       	rjmp	.+282    	; 0x57c <_ZN6sdCard4initEv+0x278>
     462:	8b 81       	ldd	r24, Y+3	; 0x03
     464:	81 11       	cpse	r24, r1
     466:	8c c0       	rjmp	.+280    	; 0x580 <_ZN6sdCard4initEv+0x27c>
     468:	8c 81       	ldd	r24, Y+4	; 0x04
     46a:	81 30       	cpi	r24, 0x01	; 1
     46c:	09 f0       	breq	.+2      	; 0x470 <_ZN6sdCard4initEv+0x16c>
     46e:	8a c0       	rjmp	.+276    	; 0x584 <_ZN6sdCard4initEv+0x280>
     470:	8d 81       	ldd	r24, Y+5	; 0x05
     472:	8a 3a       	cpi	r24, 0xAA	; 170
     474:	09 f0       	breq	.+2      	; 0x478 <_ZN6sdCard4initEv+0x174>
     476:	88 c0       	rjmp	.+272    	; 0x588 <_ZN6sdCard4initEv+0x284>
		// if cmd8 successfull start initiating the card
		do // loop fra ACMD41 untill card goes busy.
		{ 
		// CMD55 part of ACMD41
		
		spi_obj.writeByte(0xFF); // sync byte
     478:	6f ef       	ldi	r22, 0xFF	; 255
     47a:	81 2f       	mov	r24, r17
     47c:	90 2f       	mov	r25, r16
     47e:	cf d1       	rcall	.+926    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x77); // CMD 55
     480:	67 e7       	ldi	r22, 0x77	; 119
     482:	81 2f       	mov	r24, r17
     484:	90 2f       	mov	r25, r16
     486:	cb d1       	rcall	.+918    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00);
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	81 2f       	mov	r24, r17
     48c:	90 2f       	mov	r25, r16
     48e:	c7 d1       	rcall	.+910    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00);
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	81 2f       	mov	r24, r17
     494:	90 2f       	mov	r25, r16
     496:	c3 d1       	rcall	.+902    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00);
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	81 2f       	mov	r24, r17
     49c:	90 2f       	mov	r25, r16
     49e:	bf d1       	rcall	.+894    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00);
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	81 2f       	mov	r24, r17
     4a4:	90 2f       	mov	r25, r16
     4a6:	bb d1       	rcall	.+886    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0xFF); // dummy CRC since CRC should be off now;
     4a8:	6f ef       	ldi	r22, 0xFF	; 255
     4aa:	81 2f       	mov	r24, r17
     4ac:	90 2f       	mov	r25, r16
     4ae:	b7 d1       	rcall	.+878    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.recieveByte();
     4b0:	81 2f       	mov	r24, r17
     4b2:	90 2f       	mov	r25, r16
     4b4:	ba d1       	rcall	.+884    	; 0x82a <_ZN3SPI11recieveByteEv>
		
		result = spi_obj.recieveByte();
     4b6:	81 2f       	mov	r24, r17
     4b8:	90 2f       	mov	r25, r16
     4ba:	b7 d1       	rcall	.+878    	; 0x82a <_ZN3SPI11recieveByteEv>
	
		//rest of ACMD41
		spi_obj.writeByte(0xFF);
     4bc:	6f ef       	ldi	r22, 0xFF	; 255
     4be:	81 2f       	mov	r24, r17
     4c0:	90 2f       	mov	r25, r16
     4c2:	ad d1       	rcall	.+858    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x69); // acmd41
     4c4:	69 e6       	ldi	r22, 0x69	; 105
     4c6:	81 2f       	mov	r24, r17
     4c8:	90 2f       	mov	r25, r16
     4ca:	a9 d1       	rcall	.+850    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x40); // HCS bit set high.
     4cc:	60 e4       	ldi	r22, 0x40	; 64
     4ce:	81 2f       	mov	r24, r17
     4d0:	90 2f       	mov	r25, r16
     4d2:	a5 d1       	rcall	.+842    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00);
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	81 2f       	mov	r24, r17
     4d8:	90 2f       	mov	r25, r16
     4da:	a1 d1       	rcall	.+834    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00);
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	81 2f       	mov	r24, r17
     4e0:	90 2f       	mov	r25, r16
     4e2:	9d d1       	rcall	.+826    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00);
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	81 2f       	mov	r24, r17
     4e8:	90 2f       	mov	r25, r16
     4ea:	99 d1       	rcall	.+818    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0xFF); // dummy CRC
     4ec:	6f ef       	ldi	r22, 0xFF	; 255
     4ee:	81 2f       	mov	r24, r17
     4f0:	90 2f       	mov	r25, r16
     4f2:	95 d1       	rcall	.+810    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.recieveByte();
     4f4:	81 2f       	mov	r24, r17
     4f6:	90 2f       	mov	r25, r16
     4f8:	98 d1       	rcall	.+816    	; 0x82a <_ZN3SPI11recieveByteEv>
		result = spi_obj.recieveByte();
     4fa:	81 2f       	mov	r24, r17
     4fc:	90 2f       	mov	r25, r16
     4fe:	95 d1       	rcall	.+810    	; 0x82a <_ZN3SPI11recieveByteEv>
	}

	if( cmd8result[0] == 0x01 && cmd8result[1] == 0x00 && cmd8result[2] == 0x00 && cmd8result[3] == 0x01 && cmd8result[4] == 0xAA ) // validate that the card is sd v2
	{
		// if cmd8 successfull start initiating the card
		do // loop fra ACMD41 untill card goes busy.
     500:	81 11       	cpse	r24, r1
     502:	ba cf       	rjmp	.-140    	; 0x478 <_ZN6sdCard4initEv+0x174>
		
		//SendChar(result);
		} while(result != 0x00); // loop untill card goes busy, indicating the cmd was accepted.
	
		// sending command 58 to request OCR register
		spi_obj.writeByte(0xFF);
     504:	6f ef       	ldi	r22, 0xFF	; 255
     506:	8e 2d       	mov	r24, r14
     508:	9f 2d       	mov	r25, r15
     50a:	89 d1       	rcall	.+786    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x7A); // cmd 58
     50c:	6a e7       	ldi	r22, 0x7A	; 122
     50e:	8e 2d       	mov	r24, r14
     510:	9f 2d       	mov	r25, r15
     512:	85 d1       	rcall	.+778    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00);
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	8e 2d       	mov	r24, r14
     518:	9f 2d       	mov	r25, r15
     51a:	81 d1       	rcall	.+770    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00);
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	8e 2d       	mov	r24, r14
     520:	9f 2d       	mov	r25, r15
     522:	7d d1       	rcall	.+762    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00);
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	8e 2d       	mov	r24, r14
     528:	9f 2d       	mov	r25, r15
     52a:	79 d1       	rcall	.+754    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00);
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	8e 2d       	mov	r24, r14
     530:	9f 2d       	mov	r25, r15
     532:	75 d1       	rcall	.+746    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0xFF); // dummy CRC;
     534:	6f ef       	ldi	r22, 0xFF	; 255
     536:	8e 2d       	mov	r24, r14
     538:	9f 2d       	mov	r25, r15
     53a:	71 d1       	rcall	.+738    	; 0x81e <_ZN3SPI9writeByteEh>
	
		unsigned char OCR[4]; // used to store the OCR register
	
		spi_obj.recieveByte();
     53c:	8e 2d       	mov	r24, r14
     53e:	9f 2d       	mov	r25, r15
     540:	74 d1       	rcall	.+744    	; 0x82a <_ZN3SPI11recieveByteEv>
		spi_obj.recieveByte(); // R1 byte, not using the content of it here, as i'm keeping it simplified.
     542:	8e 2d       	mov	r24, r14
     544:	9f 2d       	mov	r25, r15
     546:	71 d1       	rcall	.+738    	; 0x82a <_ZN3SPI11recieveByteEv>
		OCR[0] = spi_obj.recieveByte(); // getting the 4 bytes of OCR
     548:	8e 2d       	mov	r24, r14
     54a:	9f 2d       	mov	r25, r15
     54c:	6e d1       	rcall	.+732    	; 0x82a <_ZN3SPI11recieveByteEv>
     54e:	18 2f       	mov	r17, r24
		OCR[1] = spi_obj.recieveByte();
     550:	8e 2d       	mov	r24, r14
     552:	9f 2d       	mov	r25, r15
     554:	6a d1       	rcall	.+724    	; 0x82a <_ZN3SPI11recieveByteEv>
		OCR[2] = spi_obj.recieveByte();
     556:	8e 2d       	mov	r24, r14
     558:	9f 2d       	mov	r25, r15
     55a:	67 d1       	rcall	.+718    	; 0x82a <_ZN3SPI11recieveByteEv>
		OCR[3] = spi_obj.recieveByte();
     55c:	8e 2d       	mov	r24, r14
     55e:	9f 2d       	mov	r25, r15
     560:	64 d1       	rcall	.+712    	; 0x82a <_ZN3SPI11recieveByteEv>
	
		unsigned char isvalid = OCR[0] & 0b1000000; // getting the validate pin first needs to be high for HC pin to be valid;
		unsigned char isHC = OCR[0] & 0b01000000; // getting HC pin value.
		if(isHC && isvalid) 
     562:	16 ff       	sbrs	r17, 6
     564:	13 c0       	rjmp	.+38     	; 0x58c <_ZN6sdCard4initEv+0x288>
		{
			spi_obj.setFreq(4000);
     566:	60 ea       	ldi	r22, 0xA0	; 160
     568:	7f e0       	ldi	r23, 0x0F	; 15
     56a:	8e 2d       	mov	r24, r14
     56c:	9f 2d       	mov	r25, r15
     56e:	2c d1       	rcall	.+600    	; 0x7c8 <_ZN3SPI7setFreqEi>
			return true;
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	0d c0       	rjmp	.+26     	; 0x58e <_ZN6sdCard4initEv+0x28a>
		spi_obj.writeByte(0x87); // CRC
		//0x48 00 00 01 AA 87
	}
	else
	{
		return false;
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	0b c0       	rjmp	.+22     	; 0x58e <_ZN6sdCard4initEv+0x28a>
			return false;
		}	
	} 
	else 
	{
		return false;
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	09 c0       	rjmp	.+18     	; 0x58e <_ZN6sdCard4initEv+0x28a>
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	07 c0       	rjmp	.+14     	; 0x58e <_ZN6sdCard4initEv+0x28a>
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	05 c0       	rjmp	.+10     	; 0x58e <_ZN6sdCard4initEv+0x28a>
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	03 c0       	rjmp	.+6      	; 0x58e <_ZN6sdCard4initEv+0x28a>
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	01 c0       	rjmp	.+2      	; 0x58e <_ZN6sdCard4initEv+0x28a>
		{
			spi_obj.setFreq(4000);
			return true;
		}
		else {
			return false;
     58c:	80 e0       	ldi	r24, 0x00	; 0
	{
		return false;
	}		
			
	
}
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	1f 91       	pop	r17
     59e:	0f 91       	pop	r16
     5a0:	ff 90       	pop	r15
     5a2:	ef 90       	pop	r14
     5a4:	df 90       	pop	r13
     5a6:	cf 90       	pop	r12
     5a8:	bf 90       	pop	r11
     5aa:	af 90       	pop	r10
     5ac:	08 95       	ret

000005ae <_ZN6sdCard9readBlockEmPh>:

unsigned char sdCard::readBlock( unsigned long adress, unsigned char outputdata[] )
{
     5ae:	af 92       	push	r10
     5b0:	bf 92       	push	r11
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <_ZN6sdCard9readBlockEmPh+0x16>
     5c4:	1f 92       	push	r1
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
     5ca:	a8 2e       	mov	r10, r24
     5cc:	b9 2e       	mov	r11, r25
     5ce:	49 83       	std	Y+1, r20	; 0x01
     5d0:	5a 83       	std	Y+2, r21	; 0x02
     5d2:	6b 83       	std	Y+3, r22	; 0x03
     5d4:	7c 83       	std	Y+4, r23	; 0x04
     5d6:	69 01       	movw	r12, r18
	unsigned char *argument_byte_pointer = (unsigned char*)&adress;
	spi_obj.writeByte(0xFF); // clock sync
     5d8:	f8 2e       	mov	r15, r24
     5da:	e9 2e       	mov	r14, r25
     5dc:	6f ef       	ldi	r22, 0xFF	; 255
     5de:	1f d1       	rcall	.+574    	; 0x81e <_ZN3SPI9writeByteEh>
	spi_obj.writeByte(0x51);
     5e0:	61 e5       	ldi	r22, 0x51	; 81
     5e2:	8a 2d       	mov	r24, r10
     5e4:	9b 2d       	mov	r25, r11
     5e6:	1b d1       	rcall	.+566    	; 0x81e <_ZN3SPI9writeByteEh>
	spi_obj.writeByte(argument_byte_pointer[3]);
     5e8:	6c 81       	ldd	r22, Y+4	; 0x04
     5ea:	8a 2d       	mov	r24, r10
     5ec:	9b 2d       	mov	r25, r11
     5ee:	17 d1       	rcall	.+558    	; 0x81e <_ZN3SPI9writeByteEh>
	spi_obj.writeByte(argument_byte_pointer[2]);
     5f0:	6b 81       	ldd	r22, Y+3	; 0x03
     5f2:	8a 2d       	mov	r24, r10
     5f4:	9b 2d       	mov	r25, r11
     5f6:	13 d1       	rcall	.+550    	; 0x81e <_ZN3SPI9writeByteEh>
	spi_obj.writeByte(argument_byte_pointer[1]);
     5f8:	6a 81       	ldd	r22, Y+2	; 0x02
     5fa:	8a 2d       	mov	r24, r10
     5fc:	9b 2d       	mov	r25, r11
     5fe:	0f d1       	rcall	.+542    	; 0x81e <_ZN3SPI9writeByteEh>
	spi_obj.writeByte(argument_byte_pointer[0]);
     600:	69 81       	ldd	r22, Y+1	; 0x01
     602:	8a 2d       	mov	r24, r10
     604:	9b 2d       	mov	r25, r11
     606:	0b d1       	rcall	.+534    	; 0x81e <_ZN3SPI9writeByteEh>
	spi_obj.writeByte(0xFF); // dummy CRC;
     608:	6f ef       	ldi	r22, 0xFF	; 255
     60a:	8a 2d       	mov	r24, r10
     60c:	9b 2d       	mov	r25, r11
     60e:	07 d1       	rcall	.+526    	; 0x81e <_ZN3SPI9writeByteEh>
	
	spi_obj.recieveByte(); // getting empty response out of the way.
     610:	8a 2d       	mov	r24, r10
     612:	9b 2d       	mov	r25, r11
     614:	0a d1       	rcall	.+532    	; 0x82a <_ZN3SPI11recieveByteEv>
	unsigned char result;
	result = spi_obj.recieveByte();
     616:	8a 2d       	mov	r24, r10
     618:	9b 2d       	mov	r25, r11
     61a:	07 d1       	rcall	.+526    	; 0x82a <_ZN3SPI11recieveByteEv>
	if(result != 0x00){
     61c:	81 11       	cpse	r24, r1
     61e:	1b c0       	rjmp	.+54     	; 0x656 <_ZN6sdCard9readBlockEmPh+0xa8>
		return false;
	}
	
	do 
	{
		result = spi_obj.recieveByte();
     620:	8f 2d       	mov	r24, r15
     622:	9e 2d       	mov	r25, r14
     624:	02 d1       	rcall	.+516    	; 0x82a <_ZN3SPI11recieveByteEv>
	result = spi_obj.recieveByte();
	if(result != 0x00){
		return false;
	}
	
	do 
     626:	8f 3f       	cpi	r24, 0xFF	; 255
     628:	d9 f3       	breq	.-10     	; 0x620 <_ZN6sdCard9readBlockEmPh+0x72>
	{
		result = spi_obj.recieveByte();
	} while (result == 0xFF);
	
	if(result != 0xFE){
     62a:	8e 3f       	cpi	r24, 0xFE	; 254
     62c:	b1 f4       	brne	.+44     	; 0x65a <_ZN6sdCard9readBlockEmPh+0xac>
     62e:	86 01       	movw	r16, r12
     630:	8e ef       	ldi	r24, 0xFE	; 254
     632:	d8 1a       	sub	r13, r24
		return false;
	}
	
	for( int i = 0; i < 512; i++ ){ // filling up the supplied array with the data content of the requested block.
		outputdata[i] = spi_obj.recieveByte();
     634:	8f 2d       	mov	r24, r15
     636:	9e 2d       	mov	r25, r14
     638:	f8 d0       	rcall	.+496    	; 0x82a <_ZN3SPI11recieveByteEv>
     63a:	f8 01       	movw	r30, r16
     63c:	81 93       	st	Z+, r24
     63e:	8f 01       	movw	r16, r30
	
	if(result != 0xFE){
		return false;
	}
	
	for( int i = 0; i < 512; i++ ){ // filling up the supplied array with the data content of the requested block.
     640:	ec 15       	cp	r30, r12
     642:	fd 05       	cpc	r31, r13
     644:	b9 f7       	brne	.-18     	; 0x634 <_ZN6sdCard9readBlockEmPh+0x86>
		outputdata[i] = spi_obj.recieveByte();
	}
	spi_obj.recieveByte();
     646:	8a 2d       	mov	r24, r10
     648:	9b 2d       	mov	r25, r11
     64a:	ef d0       	rcall	.+478    	; 0x82a <_ZN3SPI11recieveByteEv>
	spi_obj.recieveByte();	
     64c:	8a 2d       	mov	r24, r10
     64e:	9b 2d       	mov	r25, r11
     650:	ec d0       	rcall	.+472    	; 0x82a <_ZN3SPI11recieveByteEv>
	return true;
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	03 c0       	rjmp	.+6      	; 0x65c <_ZN6sdCard9readBlockEmPh+0xae>
	
	spi_obj.recieveByte(); // getting empty response out of the way.
	unsigned char result;
	result = spi_obj.recieveByte();
	if(result != 0x00){
		return false;
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	01 c0       	rjmp	.+2      	; 0x65c <_ZN6sdCard9readBlockEmPh+0xae>
	{
		result = spi_obj.recieveByte();
	} while (result == 0xFF);
	
	if(result != 0xFE){
		return false;
     65a:	80 e0       	ldi	r24, 0x00	; 0
		outputdata[i] = spi_obj.recieveByte();
	}
	spi_obj.recieveByte();
	spi_obj.recieveByte();	
	return true;
}
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	df 90       	pop	r13
     672:	cf 90       	pop	r12
     674:	bf 90       	pop	r11
     676:	af 90       	pop	r10
     678:	08 95       	ret

0000067a <_ZN6sdCard10writeBlockEmPKh>:

bool sdCard::writeBlock( unsigned long adress, const unsigned char data[] )
{
     67a:	af 92       	push	r10
     67c:	bf 92       	push	r11
     67e:	cf 92       	push	r12
     680:	df 92       	push	r13
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	00 d0       	rcall	.+0      	; 0x690 <_ZN6sdCard10writeBlockEmPKh+0x16>
     690:	1f 92       	push	r1
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	a8 2e       	mov	r10, r24
     698:	b9 2e       	mov	r11, r25
     69a:	49 83       	std	Y+1, r20	; 0x01
     69c:	5a 83       	std	Y+2, r21	; 0x02
     69e:	6b 83       	std	Y+3, r22	; 0x03
     6a0:	7c 83       	std	Y+4, r23	; 0x04
     6a2:	69 01       	movw	r12, r18
		unsigned char *argument_byte_pointer = (unsigned char*)&adress;

		//sendchar(dataout[7]);
		spi_obj.writeByte(0xff); // dummy byte
     6a4:	f8 2e       	mov	r15, r24
     6a6:	e9 2e       	mov	r14, r25
     6a8:	6f ef       	ldi	r22, 0xFF	; 255
     6aa:	b9 d0       	rcall	.+370    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x58); // write cmd
     6ac:	68 e5       	ldi	r22, 0x58	; 88
     6ae:	8a 2d       	mov	r24, r10
     6b0:	9b 2d       	mov	r25, r11
     6b2:	b5 d0       	rcall	.+362    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(argument_byte_pointer[3]); // adress bytes 
     6b4:	6c 81       	ldd	r22, Y+4	; 0x04
     6b6:	8a 2d       	mov	r24, r10
     6b8:	9b 2d       	mov	r25, r11
     6ba:	b1 d0       	rcall	.+354    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(argument_byte_pointer[2]); // adress bytes 
     6bc:	6b 81       	ldd	r22, Y+3	; 0x03
     6be:	8a 2d       	mov	r24, r10
     6c0:	9b 2d       	mov	r25, r11
     6c2:	ad d0       	rcall	.+346    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(argument_byte_pointer[1]); // adress bytes 
     6c4:	6a 81       	ldd	r22, Y+2	; 0x02
     6c6:	8a 2d       	mov	r24, r10
     6c8:	9b 2d       	mov	r25, r11
     6ca:	a9 d0       	rcall	.+338    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(argument_byte_pointer[0]); // adress bytes 
     6cc:	69 81       	ldd	r22, Y+1	; 0x01
     6ce:	8a 2d       	mov	r24, r10
     6d0:	9b 2d       	mov	r25, r11
     6d2:	a5 d0       	rcall	.+330    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0xff); // CRC
     6d4:	6f ef       	ldi	r22, 0xFF	; 255
     6d6:	8a 2d       	mov	r24, r10
     6d8:	9b 2d       	mov	r25, r11
     6da:	a1 d0       	rcall	.+322    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.recieveByte(); // grab that idle byte returned
     6dc:	8a 2d       	mov	r24, r10
     6de:	9b 2d       	mov	r25, r11
     6e0:	a4 d0       	rcall	.+328    	; 0x82a <_ZN3SPI11recieveByteEv>
		unsigned char val = spi_obj.recieveByte(); // grab return value (R1)
     6e2:	8a 2d       	mov	r24, r10
     6e4:	9b 2d       	mov	r25, r11
     6e6:	a1 d0       	rcall	.+322    	; 0x82a <_ZN3SPI11recieveByteEv>
		if(val != 0x00){ // fejl hvis ikke busy. 
     6e8:	81 11       	cpse	r24, r1
     6ea:	5a c0       	rjmp	.+180    	; 0x7a0 <_ZN6sdCard10writeBlockEmPKh+0x126>
			return false;
		}
		
		spi_obj.writeByte(0xff); // dummy byte
     6ec:	6f ef       	ldi	r22, 0xFF	; 255
     6ee:	8a 2d       	mov	r24, r10
     6f0:	9b 2d       	mov	r25, r11
     6f2:	95 d0       	rcall	.+298    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0xfe); // data start byte
     6f4:	6e ef       	ldi	r22, 0xFE	; 254
     6f6:	8a 2d       	mov	r24, r10
     6f8:	9b 2d       	mov	r25, r11
     6fa:	91 d0       	rcall	.+290    	; 0x81e <_ZN3SPI9writeByteEh>
     6fc:	86 01       	movw	r16, r12
     6fe:	8e ef       	ldi	r24, 0xFE	; 254
     700:	d8 1a       	sub	r13, r24
		for(int z = 0; z < 512; z++){
			spi_obj.writeByte(data[z]); // send the content of the data array to be stored
     702:	f8 01       	movw	r30, r16
     704:	61 91       	ld	r22, Z+
     706:	8f 01       	movw	r16, r30
     708:	8f 2d       	mov	r24, r15
     70a:	9e 2d       	mov	r25, r14
     70c:	88 d0       	rcall	.+272    	; 0x81e <_ZN3SPI9writeByteEh>
			return false;
		}
		
		spi_obj.writeByte(0xff); // dummy byte
		spi_obj.writeByte(0xfe); // data start byte
		for(int z = 0; z < 512; z++){
     70e:	0c 15       	cp	r16, r12
     710:	1d 05       	cpc	r17, r13
     712:	b9 f7       	brne	.-18     	; 0x702 <_ZN6sdCard10writeBlockEmPKh+0x88>
			spi_obj.writeByte(data[z]); // send the content of the data array to be stored
		}
		spi_obj.writeByte(0xff); // dummy checksum 16 bit
     714:	6f ef       	ldi	r22, 0xFF	; 255
     716:	8a 2d       	mov	r24, r10
     718:	9b 2d       	mov	r25, r11
     71a:	81 d0       	rcall	.+258    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0xff); // dummy checksom 16 bit;
     71c:	6f ef       	ldi	r22, 0xFF	; 255
     71e:	8a 2d       	mov	r24, r10
     720:	9b 2d       	mov	r25, r11
     722:	7d d0       	rcall	.+250    	; 0x81e <_ZN3SPI9writeByteEh>
		unsigned char result; 
		do
		{
			result = spi_obj.recieveByte(); // grab result byte untill card is not busy
     724:	8f 2d       	mov	r24, r15
     726:	9e 2d       	mov	r25, r14
     728:	80 d0       	rcall	.+256    	; 0x82a <_ZN3SPI11recieveByteEv>
			spi_obj.writeByte(data[z]); // send the content of the data array to be stored
		}
		spi_obj.writeByte(0xff); // dummy checksum 16 bit
		spi_obj.writeByte(0xff); // dummy checksom 16 bit;
		unsigned char result; 
		do
     72a:	88 23       	and	r24, r24
     72c:	d9 f3       	breq	.-10     	; 0x724 <_ZN6sdCard10writeBlockEmPKh+0xaa>
		{
			result = spi_obj.recieveByte(); // grab result byte untill card is not busy
		} while (result == 0x00);
		if(result != 0xE5){ // if data not accepted return false.
     72e:	85 3e       	cpi	r24, 0xE5	; 229
     730:	09 f0       	breq	.+2      	; 0x734 <_ZN6sdCard10writeBlockEmPKh+0xba>
     732:	38 c0       	rjmp	.+112    	; 0x7a4 <_ZN6sdCard10writeBlockEmPKh+0x12a>
			return false;
		}
		
		spi_obj.recieveByte();
     734:	8a 2d       	mov	r24, r10
     736:	9b 2d       	mov	r25, r11
     738:	78 d0       	rcall	.+240    	; 0x82a <_ZN3SPI11recieveByteEv>
		do
		{
			result = spi_obj.recieveByte(); // looping untill card is done writing data
     73a:	8f 2d       	mov	r24, r15
     73c:	9e 2d       	mov	r25, r14
     73e:	75 d0       	rcall	.+234    	; 0x82a <_ZN3SPI11recieveByteEv>
		if(result != 0xE5){ // if data not accepted return false.
			return false;
		}
		
		spi_obj.recieveByte();
		do
     740:	8f 3f       	cpi	r24, 0xFF	; 255
     742:	d9 f7       	brne	.-10     	; 0x73a <_ZN6sdCard10writeBlockEmPKh+0xc0>
		{
			result = spi_obj.recieveByte(); // looping untill card is done writing data
		} while (result != 0xff);
		
		spi_obj.writeByte(0xff); // dummy byte
     744:	6f ef       	ldi	r22, 0xFF	; 255
     746:	8a 2d       	mov	r24, r10
     748:	9b 2d       	mov	r25, r11
     74a:	69 d0       	rcall	.+210    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x4d); // cmd for requesting card status to make sure the write completed correctly.
     74c:	6d e4       	ldi	r22, 0x4D	; 77
     74e:	8a 2d       	mov	r24, r10
     750:	9b 2d       	mov	r25, r11
     752:	65 d0       	rcall	.+202    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00);
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	8a 2d       	mov	r24, r10
     758:	9b 2d       	mov	r25, r11
     75a:	61 d0       	rcall	.+194    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00);
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	8a 2d       	mov	r24, r10
     760:	9b 2d       	mov	r25, r11
     762:	5d d0       	rcall	.+186    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00);
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	8a 2d       	mov	r24, r10
     768:	9b 2d       	mov	r25, r11
     76a:	59 d0       	rcall	.+178    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0x00);
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	8a 2d       	mov	r24, r10
     770:	9b 2d       	mov	r25, r11
     772:	55 d0       	rcall	.+170    	; 0x81e <_ZN3SPI9writeByteEh>
		spi_obj.writeByte(0xff);  // CRC
     774:	6f ef       	ldi	r22, 0xFF	; 255
     776:	8a 2d       	mov	r24, r10
     778:	9b 2d       	mov	r25, r11
     77a:	51 d0       	rcall	.+162    	; 0x81e <_ZN3SPI9writeByteEh>
		
		spi_obj.recieveByte(); // get the dummy FF byte out of the way
     77c:	8a 2d       	mov	r24, r10
     77e:	9b 2d       	mov	r25, r11
     780:	54 d0       	rcall	.+168    	; 0x82a <_ZN3SPI11recieveByteEv>
		unsigned char r2[2]; // array for storing the R2 reply
		r2[0] = spi_obj.recieveByte(); // grab two bytes and store them in array
     782:	8a 2d       	mov	r24, r10
     784:	9b 2d       	mov	r25, r11
     786:	51 d0       	rcall	.+162    	; 0x82a <_ZN3SPI11recieveByteEv>
     788:	18 2f       	mov	r17, r24
		r2[1] = spi_obj.recieveByte(); 
     78a:	8a 2d       	mov	r24, r10
     78c:	9b 2d       	mov	r25, r11
     78e:	4d d0       	rcall	.+154    	; 0x82a <_ZN3SPI11recieveByteEv>
     790:	98 2f       	mov	r25, r24
		
		if(r2[0] != 0x00){
     792:	11 11       	cpse	r17, r1
     794:	09 c0       	rjmp	.+18     	; 0x7a8 <_ZN6sdCard10writeBlockEmPKh+0x12e>
			return false;
		} 
		else if(r2[1] != 0x00){
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	99 23       	and	r25, r25
     79a:	39 f0       	breq	.+14     	; 0x7aa <_ZN6sdCard10writeBlockEmPKh+0x130>
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	05 c0       	rjmp	.+10     	; 0x7aa <_ZN6sdCard10writeBlockEmPKh+0x130>
		spi_obj.writeByte(argument_byte_pointer[0]); // adress bytes 
		spi_obj.writeByte(0xff); // CRC
		spi_obj.recieveByte(); // grab that idle byte returned
		unsigned char val = spi_obj.recieveByte(); // grab return value (R1)
		if(val != 0x00){ // fejl hvis ikke busy. 
			return false;
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	03 c0       	rjmp	.+6      	; 0x7aa <_ZN6sdCard10writeBlockEmPKh+0x130>
		do
		{
			result = spi_obj.recieveByte(); // grab result byte untill card is not busy
		} while (result == 0x00);
		if(result != 0xE5){ // if data not accepted return false.
			return false;
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <_ZN6sdCard10writeBlockEmPKh+0x130>
		unsigned char r2[2]; // array for storing the R2 reply
		r2[0] = spi_obj.recieveByte(); // grab two bytes and store them in array
		r2[1] = spi_obj.recieveByte(); 
		
		if(r2[0] != 0x00){
			return false;
     7a8:	80 e0       	ldi	r24, 0x00	; 0
			return true;
		}
		//sendchar(r2[0]);
		//sendchar(r2[1]);
		
}
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	bf 90       	pop	r11
     7c4:	af 90       	pop	r10
     7c6:	08 95       	ret

000007c8 <_ZN3SPI7setFreqEi>:
// as a parameter, 4000, 1000, 250, 125 are available options,
// defaults to 4000 if invalid parameter.
//=============================================================
void SPI::setFreq( int freq ) // sets prescaler based on requested freq in kHz, calculations assume a 16MHz clock speed.
{
	switch(freq)
     7c8:	6a 3f       	cpi	r22, 0xFA	; 250
     7ca:	71 05       	cpc	r23, r1
     7cc:	a9 f0       	breq	.+42     	; 0x7f8 <_ZN3SPI7setFreqEi+0x30>
     7ce:	24 f4       	brge	.+8      	; 0x7d8 <_ZN3SPI7setFreqEi+0x10>
     7d0:	6d 37       	cpi	r22, 0x7D	; 125
     7d2:	71 05       	cpc	r23, r1
     7d4:	b1 f0       	breq	.+44     	; 0x802 <_ZN3SPI7setFreqEi+0x3a>
     7d6:	19 c0       	rjmp	.+50     	; 0x80a <_ZN3SPI7setFreqEi+0x42>
     7d8:	68 3e       	cpi	r22, 0xE8	; 232
     7da:	83 e0       	ldi	r24, 0x03	; 3
     7dc:	78 07       	cpc	r23, r24
     7de:	39 f0       	breq	.+14     	; 0x7ee <_ZN3SPI7setFreqEi+0x26>
     7e0:	60 3a       	cpi	r22, 0xA0	; 160
     7e2:	7f 40       	sbci	r23, 0x0F	; 15
     7e4:	91 f4       	brne	.+36     	; 0x80a <_ZN3SPI7setFreqEi+0x42>
	{
	case 4000:
		SPCR = SPCR & 0b11111100; // prescaler = 4
     7e6:	8c b5       	in	r24, 0x2c	; 44
     7e8:	8c 7f       	andi	r24, 0xFC	; 252
     7ea:	8c bd       	out	0x2c, r24	; 44
		break;
     7ec:	08 95       	ret
	case 1000:
		SPCR = (SPCR & 0b11111100) | 0b00000001; // prescaler = 16
     7ee:	8c b5       	in	r24, 0x2c	; 44
     7f0:	8c 7f       	andi	r24, 0xFC	; 252
     7f2:	81 60       	ori	r24, 0x01	; 1
     7f4:	8c bd       	out	0x2c, r24	; 44
		break;
     7f6:	08 95       	ret
	case 250:
		SPCR = (SPCR & 0b11111100) | 0b00000010; // prescaler = 64
     7f8:	8c b5       	in	r24, 0x2c	; 44
     7fa:	8c 7f       	andi	r24, 0xFC	; 252
     7fc:	82 60       	ori	r24, 0x02	; 2
     7fe:	8c bd       	out	0x2c, r24	; 44
		break;
     800:	08 95       	ret
	case 125:
		SPCR = SPCR | 0b00000011; // prescaler = 128
     802:	8c b5       	in	r24, 0x2c	; 44
     804:	83 60       	ori	r24, 0x03	; 3
     806:	8c bd       	out	0x2c, r24	; 44
		break;
     808:	08 95       	ret
	default:
		SPCR = SPCR & 0b11111100; // defaults to 4000 kHz
     80a:	8c b5       	in	r24, 0x2c	; 44
     80c:	8c 7f       	andi	r24, 0xFC	; 252
     80e:	8c bd       	out	0x2c, r24	; 44
     810:	08 95       	ret

00000812 <_ZN3SPIC1Ei>:
// to freq.
//=============================================================
 SPI::SPI( int freq )
{
	// only using master mode in the project so slave mode is not part of this SPI driver.
	DDRB = 0b00000111; // sets MOSI as output and SCK as output rest as input on port B.
     812:	27 e0       	ldi	r18, 0x07	; 7
     814:	24 b9       	out	0x04, r18	; 4
	SPCR = 0b01010000; // enable SPI and set mode to master
     816:	20 e5       	ldi	r18, 0x50	; 80
     818:	2c bd       	out	0x2c, r18	; 44
	setFreq(freq);
     81a:	d6 cf       	rjmp	.-84     	; 0x7c8 <_ZN3SPI7setFreqEi>
     81c:	08 95       	ret

0000081e <_ZN3SPI9writeByteEh>:
// DESCR. : sends 1 byte of data out on MOSI,
// returns the response recieved from the reciever
//=============================================================
unsigned char SPI::writeByte( unsigned char data )
{
	SPDR = data; // starting the transmission
     81e:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR &(1<<SPIF)));
     820:	0d b4       	in	r0, 0x2d	; 45
     822:	07 fe       	sbrs	r0, 7
     824:	fd cf       	rjmp	.-6      	; 0x820 <_ZN3SPI9writeByteEh+0x2>
	return SPDR;	
     826:	8e b5       	in	r24, 0x2e	; 46
}
     828:	08 95       	ret

0000082a <_ZN3SPI11recieveByteEv>:
// DESCR. : Recieves 1 byte of data, has to send out dummy data to MOSI to recieve.
// returns the response recieved from the reciever
//=============================================================
unsigned char SPI::recieveByte()
{
	SPDR = 0xFF; // sends don't care byte to transmit clocks.
     82a:	8f ef       	ldi	r24, 0xFF	; 255
     82c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR &(1<<SPIF)));
     82e:	0d b4       	in	r0, 0x2d	; 45
     830:	07 fe       	sbrs	r0, 7
     832:	fd cf       	rjmp	.-6      	; 0x82e <_ZN3SPI11recieveByteEv+0x4>
	return SPDR; // read data and return it.
     834:	8e b5       	in	r24, 0x2e	; 46
}
     836:	08 95       	ret

00000838 <_Z8InitUARTmhc>:
Parameters:
	BaudRate: Wanted Baud Rate.
	Databits: Wanted number of Data Bits.
*************************************************************************/
void InitUART(unsigned long BaudRate, unsigned char DataBit, char Parity)
{
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
     83c:	52 2f       	mov	r21, r18
unsigned int TempUBRR;

  if ((BaudRate >= 110) && (BaudRate <= 115200) && (DataBit >=5) && (DataBit <= 8))
     83e:	8b 01       	movw	r16, r22
     840:	9c 01       	movw	r18, r24
     842:	0e 56       	subi	r16, 0x6E	; 110
     844:	11 09       	sbc	r17, r1
     846:	21 09       	sbc	r18, r1
     848:	31 09       	sbc	r19, r1
     84a:	03 39       	cpi	r16, 0x93	; 147
     84c:	11 4c       	sbci	r17, 0xC1	; 193
     84e:	21 40       	sbci	r18, 0x01	; 1
     850:	31 05       	cpc	r19, r1
     852:	d0 f5       	brcc	.+116    	; 0x8c8 <_Z8InitUARTmhc+0x90>
     854:	45 50       	subi	r20, 0x05	; 5
     856:	44 30       	cpi	r20, 0x04	; 4
     858:	b8 f5       	brcc	.+110    	; 0x8c8 <_Z8InitUARTmhc+0x90>
  { 
    // "Normal" clock, no multiprocessor mode (= default)
    UCSR0A = 0b00100000;
     85a:	20 e2       	ldi	r18, 0x20	; 32
     85c:	20 93 c0 00 	sts	0x00C0, r18
    // No interrupts enabled
    // Receiver enabled
    // Transmitter enabled
    // No 9 bit operation
    UCSR0B = 0b00011000;	
     860:	28 e1       	ldi	r18, 0x18	; 24
     862:	20 93 c1 00 	sts	0x00C1, r18
    // Asynchronous operation, 1 stop bit
    // Bit 2 and bit 1 controls the number of data bits
    UCSR0C = (DataBit-5)<<1;
     866:	44 0f       	add	r20, r20
     868:	40 93 c2 00 	sts	0x00C2, r20
	// Set parity bits (if parity used)
	if (Parity == 'E')
     86c:	55 34       	cpi	r21, 0x45	; 69
     86e:	31 f4       	brne	.+12     	; 0x87c <_Z8InitUARTmhc+0x44>
      UCSR0C |= 0b00100000;
     870:	e2 ec       	ldi	r30, 0xC2	; 194
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	20 81       	ld	r18, Z
     876:	20 62       	ori	r18, 0x20	; 32
     878:	20 83       	st	Z, r18
     87a:	07 c0       	rjmp	.+14     	; 0x88a <_Z8InitUARTmhc+0x52>
    else if (Parity == 'O')	  
     87c:	5f 34       	cpi	r21, 0x4F	; 79
     87e:	29 f4       	brne	.+10     	; 0x88a <_Z8InitUARTmhc+0x52>
      UCSR0C |= 0b00110000;	
     880:	e2 ec       	ldi	r30, 0xC2	; 194
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	20 81       	ld	r18, Z
     886:	20 63       	ori	r18, 0x30	; 48
     888:	20 83       	st	Z, r18
    // Set Baud Rate according to the parameter BaudRate:
    // Select Baud Rate (first store "UBRRH--UBRRL" in local 16-bit variable,
    //                   then write the two 8-bit registers separately):
    TempUBRR = XTAL/(16*BaudRate) - 1;
     88a:	dc 01       	movw	r26, r24
     88c:	cb 01       	movw	r24, r22
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	88 0f       	add	r24, r24
     898:	99 1f       	adc	r25, r25
     89a:	aa 1f       	adc	r26, r26
     89c:	bb 1f       	adc	r27, r27
     89e:	9c 01       	movw	r18, r24
     8a0:	ad 01       	movw	r20, r26
     8a2:	22 0f       	add	r18, r18
     8a4:	33 1f       	adc	r19, r19
     8a6:	44 1f       	adc	r20, r20
     8a8:	55 1f       	adc	r21, r21
     8aa:	22 0f       	add	r18, r18
     8ac:	33 1f       	adc	r19, r19
     8ae:	44 1f       	adc	r20, r20
     8b0:	55 1f       	adc	r21, r21
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	74 e2       	ldi	r23, 0x24	; 36
     8b6:	84 ef       	ldi	r24, 0xF4	; 244
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	fa d6       	rcall	.+3572   	; 0x16b0 <__udivmodsi4>
     8bc:	21 50       	subi	r18, 0x01	; 1
     8be:	31 09       	sbc	r19, r1
    // Write lower part of UBRR
    UBRR0L = TempUBRR;
     8c0:	20 93 c4 00 	sts	0x00C4, r18
    // Write upper part of UBRR
    UBRR0H = TempUBRR >> 8;
     8c4:	30 93 c5 00 	sts	0x00C5, r19
  }  
}
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	08 95       	ret

000008ce <_ZN11UnitHandlerC1EP6sdCard>:
			}
		}
		//Add unit to the unit list.
		return addUnitToList(unitID, temp);
	}
}
     8ce:	fc 01       	movw	r30, r24
     8d0:	71 83       	std	Z+1, r23	; 0x01
     8d2:	60 83       	st	Z, r22
     8d4:	12 82       	std	Z+2, r1	; 0x02
     8d6:	08 95       	ret

000008d8 <_ZN11UnitHandler11getUnitListEPh>:
     8d8:	9b 01       	movw	r18, r22
     8da:	40 e0       	ldi	r20, 0x00	; 0
     8dc:	50 e0       	ldi	r21, 0x00	; 0
     8de:	ba 01       	movw	r22, r20
     8e0:	fc 01       	movw	r30, r24
     8e2:	80 81       	ld	r24, Z
     8e4:	91 81       	ldd	r25, Z+1	; 0x01
     8e6:	63 ce       	rjmp	.-826    	; 0x5ae <_ZN6sdCard9readBlockEmPh>
     8e8:	08 95       	ret

000008ea <_ZN11UnitHandler18checkStdAssignmentEv>:
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	d2 50       	subi	r29, 0x02	; 2
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	de bf       	out	0x3e, r29	; 62
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	cd bf       	out	0x3d, r28	; 61
     902:	8c 01       	movw	r16, r24
     904:	be 01       	movw	r22, r28
     906:	6f 5f       	subi	r22, 0xFF	; 255
     908:	7f 4f       	sbci	r23, 0xFF	; 255
     90a:	e6 df       	rcall	.-52     	; 0x8d8 <_ZN11UnitHandler11getUnitListEPh>
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	0d c0       	rjmp	.+26     	; 0x92c <_ZN11UnitHandler18checkStdAssignmentEv+0x42>
     912:	20 ff       	sbrs	r18, 0
     914:	0b c0       	rjmp	.+22     	; 0x92c <_ZN11UnitHandler18checkStdAssignmentEv+0x42>
     916:	f8 01       	movw	r30, r16
     918:	42 81       	ldd	r20, Z+2	; 0x02
     91a:	e1 e0       	ldi	r30, 0x01	; 1
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	ec 0f       	add	r30, r28
     920:	fd 1f       	adc	r31, r29
     922:	e2 0f       	add	r30, r18
     924:	f3 1f       	adc	r31, r19
     926:	90 81       	ld	r25, Z
     928:	49 17       	cp	r20, r25
     92a:	41 f0       	breq	.+16     	; 0x93c <_ZN11UnitHandler18checkStdAssignmentEv+0x52>
     92c:	2f 5f       	subi	r18, 0xFF	; 255
     92e:	3f 4f       	sbci	r19, 0xFF	; 255
     930:	21 15       	cp	r18, r1
     932:	f2 e0       	ldi	r31, 0x02	; 2
     934:	3f 07       	cpc	r19, r31
     936:	69 f7       	brne	.-38     	; 0x912 <_ZN11UnitHandler18checkStdAssignmentEv+0x28>
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	01 c0       	rjmp	.+2      	; 0x93e <_ZN11UnitHandler18checkStdAssignmentEv+0x54>
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	de 5f       	subi	r29, 0xFE	; 254
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	08 95       	ret

00000954 <_ZN11UnitHandler13addUnitToListEhh>:
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	d2 50       	subi	r29, 0x02	; 2
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	de bf       	out	0x3e, r29	; 62
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	cd bf       	out	0x3d, r28	; 61
     970:	8c 01       	movw	r16, r24
     972:	e6 2e       	mov	r14, r22
     974:	f4 2e       	mov	r15, r20
     976:	be 01       	movw	r22, r28
     978:	6f 5f       	subi	r22, 0xFF	; 255
     97a:	7f 4f       	sbci	r23, 0xFF	; 255
     97c:	ad df       	rcall	.-166    	; 0x8d8 <_ZN11UnitHandler11getUnitListEPh>
     97e:	fe 01       	movw	r30, r28
     980:	31 96       	adiw	r30, 0x01	; 1
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	91 91       	ld	r25, Z+
     988:	99 23       	and	r25, r25
     98a:	49 f0       	breq	.+18     	; 0x99e <_ZN11UnitHandler13addUnitToListEhh+0x4a>
     98c:	2f 5f       	subi	r18, 0xFF	; 255
     98e:	3f 4f       	sbci	r19, 0xFF	; 255
     990:	21 15       	cp	r18, r1
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	38 07       	cpc	r19, r24
     996:	b9 f7       	brne	.-18     	; 0x986 <_ZN11UnitHandler13addUnitToListEhh+0x32>
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	03 c0       	rjmp	.+6      	; 0x9a4 <_ZN11UnitHandler13addUnitToListEhh+0x50>
     99e:	21 15       	cp	r18, r1
     9a0:	31 05       	cpc	r19, r1
     9a2:	19 f4       	brne	.+6      	; 0x9aa <_ZN11UnitHandler13addUnitToListEhh+0x56>
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	81 11       	cpse	r24, r1
     9a8:	16 c0       	rjmp	.+44     	; 0x9d6 <_ZN11UnitHandler13addUnitToListEhh+0x82>
     9aa:	e1 e0       	ldi	r30, 0x01	; 1
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	ec 0f       	add	r30, r28
     9b0:	fd 1f       	adc	r31, r29
     9b2:	e2 0f       	add	r30, r18
     9b4:	f3 1f       	adc	r31, r19
     9b6:	e0 82       	st	Z, r14
     9b8:	fe 01       	movw	r30, r28
     9ba:	e2 0f       	add	r30, r18
     9bc:	f3 1f       	adc	r31, r19
     9be:	f2 82       	std	Z+2, r15	; 0x02
     9c0:	9e 01       	movw	r18, r28
     9c2:	2f 5f       	subi	r18, 0xFF	; 255
     9c4:	3f 4f       	sbci	r19, 0xFF	; 255
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	ba 01       	movw	r22, r20
     9cc:	f8 01       	movw	r30, r16
     9ce:	80 81       	ld	r24, Z
     9d0:	91 81       	ldd	r25, Z+1	; 0x01
     9d2:	53 de       	rcall	.-858    	; 0x67a <_ZN6sdCard10writeBlockEmPKh>
     9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <_ZN11UnitHandler13addUnitToListEhh+0x84>
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	de 5f       	subi	r29, 0xFE	; 254
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	f8 94       	cli
     9de:	de bf       	out	0x3e, r29	; 62
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	cd bf       	out	0x3d, r28	; 61
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	ff 90       	pop	r15
     9ee:	ef 90       	pop	r14
     9f0:	08 95       	ret

000009f2 <_ZN11UnitHandler18removeUnitFromListEh>:
     9f2:	ff 92       	push	r15
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	d4 50       	subi	r29, 0x04	; 4
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	de bf       	out	0x3e, r29	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	cd bf       	out	0x3d, r28	; 61
     a0c:	8c 01       	movw	r16, r24
     a0e:	f6 2e       	mov	r15, r22
     a10:	be 01       	movw	r22, r28
     a12:	6f 5f       	subi	r22, 0xFF	; 255
     a14:	7d 4f       	sbci	r23, 0xFD	; 253
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	db 01       	movw	r26, r22
     a1c:	fc 01       	movw	r30, r24
     a1e:	1d 92       	st	X+, r1
     a20:	31 97       	sbiw	r30, 0x01	; 1
     a22:	e9 f7       	brne	.-6      	; 0xa1e <_ZN11UnitHandler18removeUnitFromListEh+0x2c>
     a24:	c8 01       	movw	r24, r16
     a26:	58 df       	rcall	.-336    	; 0x8d8 <_ZN11UnitHandler11getUnitListEPh>
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	40 fd       	sbrc	r20, 0
     a2e:	09 c0       	rjmp	.+18     	; 0xa42 <_ZN11UnitHandler18removeUnitFromListEh+0x50>
     a30:	e1 e0       	ldi	r30, 0x01	; 1
     a32:	f2 e0       	ldi	r31, 0x02	; 2
     a34:	ec 0f       	add	r30, r28
     a36:	fd 1f       	adc	r31, r29
     a38:	e4 0f       	add	r30, r20
     a3a:	f5 1f       	adc	r31, r21
     a3c:	80 81       	ld	r24, Z
     a3e:	8f 15       	cp	r24, r15
     a40:	39 f0       	breq	.+14     	; 0xa50 <_ZN11UnitHandler18removeUnitFromListEh+0x5e>
     a42:	4f 5f       	subi	r20, 0xFF	; 255
     a44:	5f 4f       	sbci	r21, 0xFF	; 255
     a46:	41 15       	cp	r20, r1
     a48:	f2 e0       	ldi	r31, 0x02	; 2
     a4a:	5f 07       	cpc	r21, r31
     a4c:	79 f7       	brne	.-34     	; 0xa2c <_ZN11UnitHandler18removeUnitFromListEh+0x3a>
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	fe 01       	movw	r30, r28
     a52:	31 96       	adiw	r30, 0x01	; 1
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	92 e0       	ldi	r25, 0x02	; 2
     a58:	df 01       	movw	r26, r30
     a5a:	9c 01       	movw	r18, r24
     a5c:	1d 92       	st	X+, r1
     a5e:	21 50       	subi	r18, 0x01	; 1
     a60:	30 40       	sbci	r19, 0x00	; 0
     a62:	e1 f7       	brne	.-8      	; 0xa5c <_ZN11UnitHandler18removeUnitFromListEh+0x6a>
     a64:	be 01       	movw	r22, r28
     a66:	6f 5f       	subi	r22, 0xFF	; 255
     a68:	7d 4f       	sbci	r23, 0xFD	; 253
     a6a:	22 e0       	ldi	r18, 0x02	; 2
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	50 e0       	ldi	r21, 0x00	; 0
     a70:	2f 3f       	cpi	r18, 0xFF	; 255
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	38 07       	cpc	r19, r24
     a76:	9c f4       	brge	.+38     	; 0xa9e <_ZN11UnitHandler18removeUnitFromListEh+0xac>
     a78:	c9 01       	movw	r24, r18
     a7a:	02 97       	sbiw	r24, 0x02	; 2
     a7c:	84 17       	cp	r24, r20
     a7e:	95 07       	cpc	r25, r21
     a80:	54 f0       	brlt	.+20     	; 0xa96 <_ZN11UnitHandler18removeUnitFromListEh+0xa4>
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	92 e0       	ldi	r25, 0x02	; 2
     a86:	8c 0f       	add	r24, r28
     a88:	9d 1f       	adc	r25, r29
     a8a:	82 0f       	add	r24, r18
     a8c:	93 1f       	adc	r25, r19
     a8e:	dc 01       	movw	r26, r24
     a90:	8c 91       	ld	r24, X
     a92:	80 83       	st	Z, r24
     a94:	06 c0       	rjmp	.+12     	; 0xaa2 <_ZN11UnitHandler18removeUnitFromListEh+0xb0>
     a96:	db 01       	movw	r26, r22
     a98:	8c 91       	ld	r24, X
     a9a:	80 83       	st	Z, r24
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <_ZN11UnitHandler18removeUnitFromListEh+0xb0>
     a9e:	db 01       	movw	r26, r22
     aa0:	1c 92       	st	X, r1
     aa2:	2f 5f       	subi	r18, 0xFF	; 255
     aa4:	3f 4f       	sbci	r19, 0xFF	; 255
     aa6:	6f 5f       	subi	r22, 0xFF	; 255
     aa8:	7f 4f       	sbci	r23, 0xFF	; 255
     aaa:	31 96       	adiw	r30, 0x01	; 1
     aac:	22 30       	cpi	r18, 0x02	; 2
     aae:	b2 e0       	ldi	r27, 0x02	; 2
     ab0:	3b 07       	cpc	r19, r27
     ab2:	f1 f6       	brne	.-68     	; 0xa70 <_ZN11UnitHandler18removeUnitFromListEh+0x7e>
     ab4:	9e 01       	movw	r18, r28
     ab6:	2f 5f       	subi	r18, 0xFF	; 255
     ab8:	3f 4f       	sbci	r19, 0xFF	; 255
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	ba 01       	movw	r22, r20
     ac0:	f8 01       	movw	r30, r16
     ac2:	80 81       	ld	r24, Z
     ac4:	91 81       	ldd	r25, Z+1	; 0x01
     ac6:	d9 dd       	rcall	.-1102   	; 0x67a <_ZN6sdCard10writeBlockEmPKh>
     ac8:	dc 5f       	subi	r29, 0xFC	; 252
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	08 95       	ret

00000ae0 <_ZN11UnitHandler16searchFreeBlocksEv>:
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	d2 50       	subi	r29, 0x02	; 2
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	8c 01       	movw	r16, r24
     afa:	be 01       	movw	r22, r28
     afc:	6f 5f       	subi	r22, 0xFF	; 255
     afe:	7f 4f       	sbci	r23, 0xFF	; 255
     b00:	eb de       	rcall	.-554    	; 0x8d8 <_ZN11UnitHandler11getUnitListEPh>
     b02:	f8 01       	movw	r30, r16
     b04:	42 81       	ldd	r20, Z+2	; 0x02
     b06:	41 11       	cpse	r20, r1
     b08:	1a c0       	rjmp	.+52     	; 0xb3e <_ZN11UnitHandler16searchFreeBlocksEv+0x5e>
     b0a:	1f c0       	rjmp	.+62     	; 0xb4a <_ZN11UnitHandler16searchFreeBlocksEv+0x6a>
     b0c:	20 ff       	sbrs	r18, 0
     b0e:	0d c0       	rjmp	.+26     	; 0xb2a <_ZN11UnitHandler16searchFreeBlocksEv+0x4a>
     b10:	e1 e0       	ldi	r30, 0x01	; 1
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	ec 0f       	add	r30, r28
     b16:	fd 1f       	adc	r31, r29
     b18:	e2 0f       	add	r30, r18
     b1a:	f3 1f       	adc	r31, r19
     b1c:	90 81       	ld	r25, Z
     b1e:	98 17       	cp	r25, r24
     b20:	51 f0       	breq	.+20     	; 0xb36 <_ZN11UnitHandler16searchFreeBlocksEv+0x56>
     b22:	2f 3f       	cpi	r18, 0xFF	; 255
     b24:	f1 e0       	ldi	r31, 0x01	; 1
     b26:	3f 07       	cpc	r19, r31
     b28:	81 f0       	breq	.+32     	; 0xb4a <_ZN11UnitHandler16searchFreeBlocksEv+0x6a>
     b2a:	2f 5f       	subi	r18, 0xFF	; 255
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	21 15       	cp	r18, r1
     b30:	92 e0       	ldi	r25, 0x02	; 2
     b32:	39 07       	cpc	r19, r25
     b34:	59 f7       	brne	.-42     	; 0xb0c <_ZN11UnitHandler16searchFreeBlocksEv+0x2c>
     b36:	8f 5f       	subi	r24, 0xFF	; 255
     b38:	48 17       	cp	r20, r24
     b3a:	20 f4       	brcc	.+8      	; 0xb44 <_ZN11UnitHandler16searchFreeBlocksEv+0x64>
     b3c:	06 c0       	rjmp	.+12     	; 0xb4a <_ZN11UnitHandler16searchFreeBlocksEv+0x6a>
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	26 2f       	mov	r18, r22
     b46:	35 2f       	mov	r19, r21
     b48:	e1 cf       	rjmp	.-62     	; 0xb0c <_ZN11UnitHandler16searchFreeBlocksEv+0x2c>
     b4a:	de 5f       	subi	r29, 0xFE	; 254
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	08 95       	ret

00000b60 <_ZN11UnitHandler11getRoomListEPh>:
//=============================================================
// METHOD : getRoomList()
// DESCR. : Fill array with the roomlist (block 1) from the SD-card.
//=============================================================
void UnitHandler::getRoomList(unsigned char Array[])
{
     b60:	9b 01       	movw	r18, r22
	SD->readBlock(1, Array);
     b62:	41 e0       	ldi	r20, 0x01	; 1
     b64:	50 e0       	ldi	r21, 0x00	; 0
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	fc 01       	movw	r30, r24
     b6c:	80 81       	ld	r24, Z
     b6e:	91 81       	ldd	r25, Z+1	; 0x01
     b70:	1e cd       	rjmp	.-1476   	; 0x5ae <_ZN6sdCard9readBlockEmPh>
     b72:	08 95       	ret

00000b74 <_ZN11UnitHandler10RemoveUnitEh>:
//=============================================================
// METHOD : RemoveUnit()
// DESCR. : Delete a Unit, by erasing data in the blocks that represents that unit.
//=============================================================
bool UnitHandler::RemoveUnit(unsigned char unitID)
{
     b74:	cf 92       	push	r12
     b76:	df 92       	push	r13
     b78:	ef 92       	push	r14
     b7a:	ff 92       	push	r15
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	d8 50       	subi	r29, 0x08	; 8
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	f8 94       	cli
     b8e:	de bf       	out	0x3e, r29	; 62
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	cd bf       	out	0x3d, r28	; 61
     b94:	6c 01       	movw	r12, r24
     b96:	f6 2e       	mov	r15, r22
	unsigned char empty_block[512] = {0x00};
     b98:	fe 01       	movw	r30, r28
     b9a:	ef 5f       	subi	r30, 0xFF	; 255
     b9c:	f9 4f       	sbci	r31, 0xF9	; 249
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	92 e0       	ldi	r25, 0x02	; 2
     ba2:	df 01       	movw	r26, r30
     ba4:	9c 01       	movw	r18, r24
     ba6:	1d 92       	st	X+, r1
     ba8:	21 50       	subi	r18, 0x01	; 1
     baa:	30 40       	sbci	r19, 0x00	; 0
     bac:	e1 f7       	brne	.-8      	; 0xba6 <_ZN11UnitHandler10RemoveUnitEh+0x32>
	unsigned char start_block;
	unsigned char next_block;
	unsigned char spot;
	unsigned char temp[512] = {0x00};
     bae:	be 01       	movw	r22, r28
     bb0:	6f 5f       	subi	r22, 0xFF	; 255
     bb2:	7b 4f       	sbci	r23, 0xFB	; 251
     bb4:	db 01       	movw	r26, r22
     bb6:	fc 01       	movw	r30, r24
     bb8:	1d 92       	st	X+, r1
     bba:	31 97       	sbiw	r30, 0x01	; 1
     bbc:	e9 f7       	brne	.-6      	; 0xbb8 <_ZN11UnitHandler10RemoveUnitEh+0x44>
	unsigned char temp2[512] = {0x00};
     bbe:	fe 01       	movw	r30, r28
     bc0:	ef 5f       	subi	r30, 0xFF	; 255
     bc2:	fd 4f       	sbci	r31, 0xFD	; 253
     bc4:	df 01       	movw	r26, r30
     bc6:	9c 01       	movw	r18, r24
     bc8:	1d 92       	st	X+, r1
     bca:	21 50       	subi	r18, 0x01	; 1
     bcc:	30 40       	sbci	r19, 0x00	; 0
     bce:	e1 f7       	brne	.-8      	; 0xbc8 <_ZN11UnitHandler10RemoveUnitEh+0x54>
	getUnitList(temp);
     bd0:	c6 01       	movw	r24, r12
     bd2:	82 de       	rcall	.-764    	; 0x8d8 <_ZN11UnitHandler11getUnitListEPh>
	{
		if (i % 2 != 0)
		{
			if (unitID == temp[i])
			{
				int y = temp[i] - 1;
     bd4:	2f 2d       	mov	r18, r15
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	21 50       	subi	r18, 0x01	; 1
     bda:	31 09       	sbc	r19, r1
				start_block = (2 + (y * 7));		
     bdc:	82 2f       	mov	r24, r18
     bde:	88 0f       	add	r24, r24
     be0:	88 0f       	add	r24, r24
     be2:	88 0f       	add	r24, r24
     be4:	82 1b       	sub	r24, r18
	unsigned char temp[512] = {0x00};
	unsigned char temp2[512] = {0x00};
	getUnitList(temp);
	
	//Search unitList for the position of the specified unit.
	for (int i = 0; i <= 511; i++)
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
		if (i % 2 != 0)
		{
			if (unitID == temp[i])
			{
				int y = temp[i] - 1;
				start_block = (2 + (y * 7));		
     bea:	8e 5f       	subi	r24, 0xFE	; 254
     bec:	0c c0       	rjmp	.+24     	; 0xc06 <_ZN11UnitHandler10RemoveUnitEh+0x92>
	getUnitList(temp);
	
	//Search unitList for the position of the specified unit.
	for (int i = 0; i <= 511; i++)
	{
		if (i % 2 != 0)
     bee:	20 ff       	sbrs	r18, 0
     bf0:	0a c0       	rjmp	.+20     	; 0xc06 <_ZN11UnitHandler10RemoveUnitEh+0x92>
     bf2:	e1 e0       	ldi	r30, 0x01	; 1
     bf4:	f4 e0       	ldi	r31, 0x04	; 4
     bf6:	ec 0f       	add	r30, r28
     bf8:	fd 1f       	adc	r31, r29
     bfa:	e2 0f       	add	r30, r18
     bfc:	f3 1f       	adc	r31, r19
		{
			if (unitID == temp[i])
     bfe:	90 81       	ld	r25, Z
     c00:	9f 11       	cpse	r25, r15
     c02:	01 c0       	rjmp	.+2      	; 0xc06 <_ZN11UnitHandler10RemoveUnitEh+0x92>
			{
				int y = temp[i] - 1;
				start_block = (2 + (y * 7));		
     c04:	e8 2e       	mov	r14, r24
	unsigned char temp[512] = {0x00};
	unsigned char temp2[512] = {0x00};
	getUnitList(temp);
	
	//Search unitList for the position of the specified unit.
	for (int i = 0; i <= 511; i++)
     c06:	2f 5f       	subi	r18, 0xFF	; 255
     c08:	3f 4f       	sbci	r19, 0xFF	; 255
     c0a:	21 15       	cp	r18, r1
     c0c:	92 e0       	ldi	r25, 0x02	; 2
     c0e:	39 07       	cpc	r19, r25
     c10:	71 f7       	brne	.-36     	; 0xbee <_ZN11UnitHandler10RemoveUnitEh+0x7a>
				start_block = (2 + (y * 7));		
			}
		}
	}
	
	SD->readBlock(start_block, temp2);
     c12:	4e 2d       	mov	r20, r14
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	9e 01       	movw	r18, r28
     c1c:	2f 5f       	subi	r18, 0xFF	; 255
     c1e:	3d 4f       	sbci	r19, 0xFD	; 253
     c20:	d6 01       	movw	r26, r12
     c22:	8d 91       	ld	r24, X+
     c24:	9c 91       	ld	r25, X
     c26:	c3 dc       	rcall	.-1658   	; 0x5ae <_ZN6sdCard9readBlockEmPh>
	
	if (temp2[2] != 0x00)
     c28:	cd 5f       	subi	r28, 0xFD	; 253
     c2a:	dd 4f       	sbci	r29, 0xFD	; 253
     c2c:	88 81       	ld	r24, Y
     c2e:	c3 50       	subi	r28, 0x03	; 3
     c30:	d2 40       	sbci	r29, 0x02	; 2
     c32:	88 23       	and	r24, r24
     c34:	09 f4       	brne	.+2      	; 0xc38 <_ZN11UnitHandler10RemoveUnitEh+0xc4>
     c36:	57 c0       	rjmp	.+174    	; 0xce6 <_ZN11UnitHandler10RemoveUnitEh+0x172>
	{
		unsigned char roomList[512] = {0x00};
     c38:	be 01       	movw	r22, r28
     c3a:	6f 5f       	subi	r22, 0xFF	; 255
     c3c:	7f 4f       	sbci	r23, 0xFF	; 255
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	92 e0       	ldi	r25, 0x02	; 2
     c42:	fb 01       	movw	r30, r22
     c44:	9c 01       	movw	r18, r24
     c46:	11 92       	st	Z+, r1
     c48:	21 50       	subi	r18, 0x01	; 1
     c4a:	30 40       	sbci	r19, 0x00	; 0
     c4c:	e1 f7       	brne	.-8      	; 0xc46 <_ZN11UnitHandler10RemoveUnitEh+0xd2>
		getRoomList(roomList);
     c4e:	c6 01       	movw	r24, r12
     c50:	87 df       	rcall	.-242    	; 0xb60 <_ZN11UnitHandler11getRoomListEPh>
		
		for (int i = 0; i <= 511; i++)
     c52:	00 e0       	ldi	r16, 0x00	; 0
     c54:	10 e0       	ldi	r17, 0x00	; 0
		{
			if (i % 2 == 0 && roomList[i] == temp2[2])
     c56:	00 fd       	sbrc	r16, 0
     c58:	24 c0       	rjmp	.+72     	; 0xca2 <_ZN11UnitHandler10RemoveUnitEh+0x12e>
     c5a:	e1 e0       	ldi	r30, 0x01	; 1
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	ec 0f       	add	r30, r28
     c60:	fd 1f       	adc	r31, r29
     c62:	e0 0f       	add	r30, r16
     c64:	f1 1f       	adc	r31, r17
     c66:	90 81       	ld	r25, Z
     c68:	cd 5f       	subi	r28, 0xFD	; 253
     c6a:	dd 4f       	sbci	r29, 0xFD	; 253
     c6c:	88 81       	ld	r24, Y
     c6e:	c3 50       	subi	r28, 0x03	; 3
     c70:	d2 40       	sbci	r29, 0x02	; 2
     c72:	98 13       	cpse	r25, r24
     c74:	16 c0       	rjmp	.+44     	; 0xca2 <_ZN11UnitHandler10RemoveUnitEh+0x12e>
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	80 0f       	add	r24, r16
			{
				spot = i;
				unsigned char count = spot + 1;
				roomList[count] -= 1;
     c7a:	e1 e0       	ldi	r30, 0x01	; 1
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	ec 0f       	add	r30, r28
     c80:	fd 1f       	adc	r31, r29
     c82:	e8 0f       	add	r30, r24
     c84:	f1 1d       	adc	r31, r1
     c86:	80 81       	ld	r24, Z
     c88:	81 50       	subi	r24, 0x01	; 1
     c8a:	80 83       	st	Z, r24
				SD->writeBlock(1, roomList);
     c8c:	9e 01       	movw	r18, r28
     c8e:	2f 5f       	subi	r18, 0xFF	; 255
     c90:	3f 4f       	sbci	r19, 0xFF	; 255
     c92:	41 e0       	ldi	r20, 0x01	; 1
     c94:	50 e0       	ldi	r21, 0x00	; 0
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	d6 01       	movw	r26, r12
     c9c:	8d 91       	ld	r24, X+
     c9e:	9c 91       	ld	r25, X
     ca0:	ec dc       	rcall	.-1576   	; 0x67a <_ZN6sdCard10writeBlockEmPKh>
	if (temp2[2] != 0x00)
	{
		unsigned char roomList[512] = {0x00};
		getRoomList(roomList);
		
		for (int i = 0; i <= 511; i++)
     ca2:	0f 5f       	subi	r16, 0xFF	; 255
     ca4:	1f 4f       	sbci	r17, 0xFF	; 255
     ca6:	01 15       	cp	r16, r1
     ca8:	b2 e0       	ldi	r27, 0x02	; 2
     caa:	1b 07       	cpc	r17, r27
     cac:	a1 f6       	brne	.-88     	; 0xc56 <_ZN11UnitHandler10RemoveUnitEh+0xe2>
     cae:	1b c0       	rjmp	.+54     	; 0xce6 <_ZN11UnitHandler10RemoveUnitEh+0x172>
		next_block = start_block + i;
		
		//Loop to give each write operation 3 tries to succeed.
		for (int y = 1; y <= 3; y++)
		{
			if (SD->writeBlock(next_block, empty_block))
     cb0:	4e 2d       	mov	r20, r14
     cb2:	50 e0       	ldi	r21, 0x00	; 0
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	9e 01       	movw	r18, r28
     cba:	2f 5f       	subi	r18, 0xFF	; 255
     cbc:	39 4f       	sbci	r19, 0xF9	; 249
     cbe:	f6 01       	movw	r30, r12
     cc0:	80 81       	ld	r24, Z
     cc2:	91 81       	ldd	r25, Z+1	; 0x01
     cc4:	da dc       	rcall	.-1612   	; 0x67a <_ZN6sdCard10writeBlockEmPKh>
     cc6:	88 23       	and	r24, r24
     cc8:	89 f0       	breq	.+34     	; 0xcec <_ZN11UnitHandler10RemoveUnitEh+0x178>
     cca:	e3 94       	inc	r14
			}
		}
	}
	
	//Loop to overwrite all 7 blocks that represent the unit.
	for (int i = 0; i <= 6; i++)
     ccc:	e1 12       	cpse	r14, r17
     cce:	f0 cf       	rjmp	.-32     	; 0xcb0 <_ZN11UnitHandler10RemoveUnitEh+0x13c>
				return false;
			}
		}
	}
	
	numberOfUnits--;
     cd0:	d6 01       	movw	r26, r12
     cd2:	12 96       	adiw	r26, 0x02	; 2
     cd4:	8c 91       	ld	r24, X
     cd6:	12 97       	sbiw	r26, 0x02	; 2
     cd8:	81 50       	subi	r24, 0x01	; 1
     cda:	12 96       	adiw	r26, 0x02	; 2
     cdc:	8c 93       	st	X, r24
	
	return removeUnitFromList(unitID);
     cde:	6f 2d       	mov	r22, r15
     ce0:	c6 01       	movw	r24, r12
     ce2:	87 de       	rcall	.-754    	; 0x9f2 <_ZN11UnitHandler18removeUnitFromListEh>
     ce4:	03 c0       	rjmp	.+6      	; 0xcec <_ZN11UnitHandler10RemoveUnitEh+0x178>
     ce6:	17 e0       	ldi	r17, 0x07	; 7
     ce8:	1e 0d       	add	r17, r14
     cea:	e2 cf       	rjmp	.-60     	; 0xcb0 <_ZN11UnitHandler10RemoveUnitEh+0x13c>
}
     cec:	d8 5f       	subi	r29, 0xF8	; 248
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	cf 90       	pop	r12
     d08:	08 95       	ret

00000d0a <_ZN11UnitHandler13createNewRoomEh>:
//=============================================================
// METHOD : createNewRoom()
// DESCR. :
//=============================================================
bool UnitHandler::createNewRoom(unsigned char RoomID)
{
     d0a:	ff 92       	push	r15
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	d2 50       	subi	r29, 0x02	; 2
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	8c 01       	movw	r16, r24
     d26:	f6 2e       	mov	r15, r22
	unsigned char roomList[512] = {0x00};
     d28:	be 01       	movw	r22, r28
     d2a:	6f 5f       	subi	r22, 0xFF	; 255
     d2c:	7f 4f       	sbci	r23, 0xFF	; 255
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	92 e0       	ldi	r25, 0x02	; 2
     d32:	fb 01       	movw	r30, r22
     d34:	9c 01       	movw	r18, r24
     d36:	11 92       	st	Z+, r1
     d38:	21 50       	subi	r18, 0x01	; 1
     d3a:	30 40       	sbci	r19, 0x00	; 0
     d3c:	e1 f7       	brne	.-8      	; 0xd36 <_ZN11UnitHandler13createNewRoomEh+0x2c>
	getRoomList(roomList);
     d3e:	c8 01       	movw	r24, r16
     d40:	0f df       	rcall	.-482    	; 0xb60 <_ZN11UnitHandler11getRoomListEPh>
	
	int spot = 0;
	
	for (int i = 0; i <= 511; i++)
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (i % 2 == 0 && roomList[i] == 0)
     d46:	20 fd       	sbrc	r18, 0
     d48:	09 c0       	rjmp	.+18     	; 0xd5c <_ZN11UnitHandler13createNewRoomEh+0x52>
     d4a:	e1 e0       	ldi	r30, 0x01	; 1
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	ec 0f       	add	r30, r28
     d50:	fd 1f       	adc	r31, r29
     d52:	e2 0f       	add	r30, r18
     d54:	f3 1f       	adc	r31, r19
     d56:	90 81       	ld	r25, Z
     d58:	99 23       	and	r25, r25
     d5a:	49 f0       	breq	.+18     	; 0xd6e <_ZN11UnitHandler13createNewRoomEh+0x64>
	unsigned char roomList[512] = {0x00};
	getRoomList(roomList);
	
	int spot = 0;
	
	for (int i = 0; i <= 511; i++)
     d5c:	2f 5f       	subi	r18, 0xFF	; 255
     d5e:	3f 4f       	sbci	r19, 0xFF	; 255
     d60:	21 15       	cp	r18, r1
     d62:	82 e0       	ldi	r24, 0x02	; 2
     d64:	38 07       	cpc	r19, r24
     d66:	79 f7       	brne	.-34     	; 0xd46 <_ZN11UnitHandler13createNewRoomEh+0x3c>
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <_ZN11UnitHandler13createNewRoomEh+0x6a>
		{
			spot = i;
			i = 512;
		}
	}
	if (spot == 0 && roomList[spot] != 0)
     d6e:	21 15       	cp	r18, r1
     d70:	31 05       	cpc	r19, r1
     d72:	19 f4       	brne	.+6      	; 0xd7a <_ZN11UnitHandler13createNewRoomEh+0x70>
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	81 11       	cpse	r24, r1
     d78:	13 c0       	rjmp	.+38     	; 0xda0 <_ZN11UnitHandler13createNewRoomEh+0x96>
	{
		return false;
	}
	else
	{
		roomList[spot] = RoomID;
     d7a:	e1 e0       	ldi	r30, 0x01	; 1
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	ec 0f       	add	r30, r28
     d80:	fd 1f       	adc	r31, r29
     d82:	e2 0f       	add	r30, r18
     d84:	f3 1f       	adc	r31, r19
     d86:	f0 82       	st	Z, r15
		
		//Write new list to SD
		for (int y = 1; y <= 9; y++)
		{
			if (SD->writeBlock(1, roomList))
     d88:	9e 01       	movw	r18, r28
     d8a:	2f 5f       	subi	r18, 0xFF	; 255
     d8c:	3f 4f       	sbci	r19, 0xFF	; 255
     d8e:	41 e0       	ldi	r20, 0x01	; 1
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	f8 01       	movw	r30, r16
     d98:	80 81       	ld	r24, Z
     d9a:	91 81       	ldd	r25, Z+1	; 0x01
     d9c:	6e dc       	rcall	.-1828   	; 0x67a <_ZN6sdCard10writeBlockEmPKh>
     d9e:	01 c0       	rjmp	.+2      	; 0xda2 <_ZN11UnitHandler13createNewRoomEh+0x98>
			i = 512;
		}
	}
	if (spot == 0 && roomList[spot] != 0)
	{
		return false;
     da0:	80 e0       	ldi	r24, 0x00	; 0
				return false;
			}
		}
		return true;
	}
}
     da2:	de 5f       	subi	r29, 0xFE	; 254
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	ff 90       	pop	r15
     db8:	08 95       	ret

00000dba <_ZN11UnitHandler13addUnitToRoomEh>:
//=============================================================
// METHOD : addUnitToRoom()
// DESCR. : increment the count for the room in the roomlist.
//=============================================================
bool UnitHandler::addUnitToRoom(unsigned char roomID)
{
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	d2 50       	subi	r29, 0x02	; 2
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	7c 01       	movw	r14, r24
     dd6:	16 2f       	mov	r17, r22
	unsigned char temp_list[512];
	unsigned char spot = 0;
	
	getRoomList(temp_list);
     dd8:	be 01       	movw	r22, r28
     dda:	6f 5f       	subi	r22, 0xFF	; 255
     ddc:	7f 4f       	sbci	r23, 0xFF	; 255
     dde:	c0 de       	rcall	.-640    	; 0xb60 <_ZN11UnitHandler11getRoomListEPh>
	
	for (int i = 0; i <= 511; i++)
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (i % 2 == 0 && temp_list[i] == roomID)
     de4:	20 fd       	sbrc	r18, 0
     de6:	14 c0       	rjmp	.+40     	; 0xe10 <_ZN11UnitHandler13addUnitToRoomEh+0x56>
     de8:	e1 e0       	ldi	r30, 0x01	; 1
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	ec 0f       	add	r30, r28
     dee:	fd 1f       	adc	r31, r29
     df0:	e2 0f       	add	r30, r18
     df2:	f3 1f       	adc	r31, r19
     df4:	90 81       	ld	r25, Z
     df6:	91 13       	cpse	r25, r17
     df8:	0b c0       	rjmp	.+22     	; 0xe10 <_ZN11UnitHandler13addUnitToRoomEh+0x56>
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	82 0f       	add	r24, r18
		{
			spot = i;
			unsigned char count = spot + 1;
			temp_list[count] += 1;
     dfe:	e1 e0       	ldi	r30, 0x01	; 1
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	ec 0f       	add	r30, r28
     e04:	fd 1f       	adc	r31, r29
     e06:	e8 0f       	add	r30, r24
     e08:	f1 1d       	adc	r31, r1
     e0a:	90 81       	ld	r25, Z
     e0c:	9f 5f       	subi	r25, 0xFF	; 255
     e0e:	90 83       	st	Z, r25
	unsigned char temp_list[512];
	unsigned char spot = 0;
	
	getRoomList(temp_list);
	
	for (int i = 0; i <= 511; i++)
     e10:	2f 5f       	subi	r18, 0xFF	; 255
     e12:	3f 4f       	sbci	r19, 0xFF	; 255
     e14:	21 15       	cp	r18, r1
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	38 07       	cpc	r19, r24
     e1a:	21 f7       	brne	.-56     	; 0xde4 <_ZN11UnitHandler13addUnitToRoomEh+0x2a>
	}
	
	//Write new list to SD
	for (int y = 1; y <= 9; y++)
	{
		if (SD->writeBlock(1, temp_list))
     e1c:	9e 01       	movw	r18, r28
     e1e:	2f 5f       	subi	r18, 0xFF	; 255
     e20:	3f 4f       	sbci	r19, 0xFF	; 255
     e22:	41 e0       	ldi	r20, 0x01	; 1
     e24:	50 e0       	ldi	r21, 0x00	; 0
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	f7 01       	movw	r30, r14
     e2c:	80 81       	ld	r24, Z
     e2e:	91 81       	ldd	r25, Z+1	; 0x01
     e30:	24 dc       	rcall	.-1976   	; 0x67a <_ZN6sdCard10writeBlockEmPKh>
		{
			return false;
		}
	}
	return true;
}
     e32:	de 5f       	subi	r29, 0xFE	; 254
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	ff 90       	pop	r15
     e46:	ef 90       	pop	r14
     e48:	08 95       	ret

00000e4a <_ZN11UnitHandler7AddUnitEhh>:
//=============================================================
// METHOD : AddUnit()
// DESCR. : Saves the Unit-info (with room) to the next free block on the SD card.
//=============================================================
bool UnitHandler::AddUnit(unsigned char unitID, unsigned char Room)
{
     e4a:	af 92       	push	r10
     e4c:	bf 92       	push	r11
     e4e:	cf 92       	push	r12
     e50:	df 92       	push	r13
     e52:	ef 92       	push	r14
     e54:	ff 92       	push	r15
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	d2 50       	subi	r29, 0x02	; 2
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	8c 01       	movw	r16, r24
     e70:	c6 2e       	mov	r12, r22
     e72:	d4 2e       	mov	r13, r20
	numberOfUnits++;
     e74:	dc 01       	movw	r26, r24
     e76:	12 96       	adiw	r26, 0x02	; 2
     e78:	8c 91       	ld	r24, X
     e7a:	12 97       	sbiw	r26, 0x02	; 2
     e7c:	8f 5f       	subi	r24, 0xFF	; 255
     e7e:	12 96       	adiw	r26, 0x02	; 2
     e80:	8c 93       	st	X, r24
	//We calculate the standard address assignment from the parameter "numberOfUnits"
	//if a unit has been deleted, the number has been used before. So we check to see if
	//the standard assignment for this "numberOfUnits" is already in use.
	
	//If true, standard assignment hasn't been used.
	if (checkStdAssignment())
     e82:	c8 01       	movw	r24, r16
     e84:	32 dd       	rcall	.-1436   	; 0x8ea <_ZN11UnitHandler18checkStdAssignmentEv>
     e86:	88 23       	and	r24, r24
     e88:	09 f4       	brne	.+2      	; 0xe8c <_ZN11UnitHandler7AddUnitEhh+0x42>
     e8a:	4d c0       	rjmp	.+154    	; 0xf26 <_ZN11UnitHandler7AddUnitEhh+0xdc>
	{
		unsigned char data[512] = {0x00};
     e8c:	fe 01       	movw	r30, r28
     e8e:	31 96       	adiw	r30, 0x01	; 1
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	92 e0       	ldi	r25, 0x02	; 2
     e94:	df 01       	movw	r26, r30
     e96:	9c 01       	movw	r18, r24
     e98:	1d 92       	st	X+, r1
     e9a:	21 50       	subi	r18, 0x01	; 1
     e9c:	30 40       	sbci	r19, 0x00	; 0
     e9e:	e1 f7       	brne	.-8      	; 0xe98 <_ZN11UnitHandler7AddUnitEhh+0x4e>
		
		// Set data specific to the unit.
		data[0] = unitID;
     ea0:	c9 82       	std	Y+1, r12	; 0x01
		data[1] = numberOfUnits;
     ea2:	d8 01       	movw	r26, r16
     ea4:	12 96       	adiw	r26, 0x02	; 2
     ea6:	8c 91       	ld	r24, X
     ea8:	8a 83       	std	Y+2, r24	; 0x02
		data[2] = Room;
     eaa:	db 82       	std	Y+3, r13	; 0x03
     eac:	ee 24       	eor	r14, r14
     eae:	e3 94       	inc	r14
     eb0:	f1 2c       	mov	r15, r1
     eb2:	ec 82       	std	Y+4, r14	; 0x04
		{
			// Set weekday (representated by a number, Monday to Sunday is 1 - 7)
			data[3] = i;
			
			//Calculate the starting point address (Standard assignment)
			unsigned long temp_address = (((2 + ((numberOfUnits - 1) * 7)) + i) - 1);
     eb4:	f8 01       	movw	r30, r16
     eb6:	82 81       	ldd	r24, Z+2	; 0x02
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	ac 01       	movw	r20, r24
     ebe:	44 0f       	add	r20, r20
     ec0:	55 1f       	adc	r21, r21
     ec2:	44 0f       	add	r20, r20
     ec4:	55 1f       	adc	r21, r21
     ec6:	44 0f       	add	r20, r20
     ec8:	55 1f       	adc	r21, r21
     eca:	48 1b       	sub	r20, r24
     ecc:	59 0b       	sbc	r21, r25
     ece:	4e 0d       	add	r20, r14
     ed0:	5f 1d       	adc	r21, r15
     ed2:	4f 5f       	subi	r20, 0xFF	; 255
     ed4:	5f 4f       	sbci	r21, 0xFF	; 255
     ed6:	05 2e       	mov	r0, r21
     ed8:	00 0c       	add	r0, r0
     eda:	66 0b       	sbc	r22, r22
     edc:	77 0b       	sbc	r23, r23
			
			//Loop to give each write operation 9 tries to succeed.
			for (int y = 1; y <= 9; y++)
			{
				if (SD->writeBlock(temp_address, data))
     ede:	9e 01       	movw	r18, r28
     ee0:	2f 5f       	subi	r18, 0xFF	; 255
     ee2:	3f 4f       	sbci	r19, 0xFF	; 255
     ee4:	80 81       	ld	r24, Z
     ee6:	91 81       	ldd	r25, Z+1	; 0x01
     ee8:	c8 db       	rcall	.-2160   	; 0x67a <_ZN6sdCard10writeBlockEmPKh>
     eea:	81 11       	cpse	r24, r1
     eec:	08 c0       	rjmp	.+16     	; 0xefe <_ZN11UnitHandler7AddUnitEhh+0xb4>
				{
					y = 10;			// if write attempt succeeds, leave loop...
				}
				else if (y = 9)
				{
					numberOfUnits--;
     eee:	d8 01       	movw	r26, r16
     ef0:	12 96       	adiw	r26, 0x02	; 2
     ef2:	9c 91       	ld	r25, X
     ef4:	12 97       	sbiw	r26, 0x02	; 2
     ef6:	91 50       	subi	r25, 0x01	; 1
     ef8:	12 96       	adiw	r26, 0x02	; 2
     efa:	9c 93       	st	X, r25
					return false;
     efc:	5a c0       	rjmp	.+180    	; 0xfb2 <_ZN11UnitHandler7AddUnitEhh+0x168>
     efe:	bf ef       	ldi	r27, 0xFF	; 255
     f00:	eb 1a       	sub	r14, r27
     f02:	fb 0a       	sbc	r15, r27
		data[1] = numberOfUnits;
		data[2] = Room;
		
		// For-loop makes sure to create 7 blocks for each unit.
		// One block represents one day of the week.
		for (unsigned char i = 1; i <= 7; i++)
     f04:	e8 e0       	ldi	r30, 0x08	; 8
     f06:	ee 16       	cp	r14, r30
     f08:	f1 04       	cpc	r15, r1
     f0a:	99 f6       	brne	.-90     	; 0xeb2 <_ZN11UnitHandler7AddUnitEhh+0x68>
					return false;
				}
			}
		}
		//Add unit to the room and unit list.
		if (addUnitToRoom(Room))
     f0c:	6d 2d       	mov	r22, r13
     f0e:	c8 01       	movw	r24, r16
     f10:	54 df       	rcall	.-344    	; 0xdba <_ZN11UnitHandler13addUnitToRoomEh>
     f12:	88 23       	and	r24, r24
     f14:	09 f4       	brne	.+2      	; 0xf18 <_ZN11UnitHandler7AddUnitEhh+0xce>
     f16:	4d c0       	rjmp	.+154    	; 0xfb2 <_ZN11UnitHandler7AddUnitEhh+0x168>
		{
			return addUnitToList(unitID, numberOfUnits);
     f18:	d8 01       	movw	r26, r16
     f1a:	12 96       	adiw	r26, 0x02	; 2
     f1c:	4c 91       	ld	r20, X
     f1e:	6c 2d       	mov	r22, r12
     f20:	c8 01       	movw	r24, r16
     f22:	18 dd       	rcall	.-1488   	; 0x954 <_ZN11UnitHandler13addUnitToListEhh>
     f24:	46 c0       	rjmp	.+140    	; 0xfb2 <_ZN11UnitHandler7AddUnitEhh+0x168>
	
	// If the standard assignment is already in use, we search to find out what unit has been deleted.
	// We then use temp to calculate the starting point address of the unit, and set byte1 in the block equal to temp
	else
	{
		unsigned char temp = searchFreeBlocks();
     f26:	c8 01       	movw	r24, r16
     f28:	db dd       	rcall	.-1098   	; 0xae0 <_ZN11UnitHandler16searchFreeBlocksEv>
     f2a:	a8 2e       	mov	r10, r24
		unsigned char data[512] = {0x00};
     f2c:	fe 01       	movw	r30, r28
     f2e:	31 96       	adiw	r30, 0x01	; 1
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	92 e0       	ldi	r25, 0x02	; 2
     f34:	df 01       	movw	r26, r30
     f36:	9c 01       	movw	r18, r24
     f38:	1d 92       	st	X+, r1
     f3a:	21 50       	subi	r18, 0x01	; 1
     f3c:	30 40       	sbci	r19, 0x00	; 0
     f3e:	e1 f7       	brne	.-8      	; 0xf38 <_ZN11UnitHandler7AddUnitEhh+0xee>
		
		// Set data specific to the unit.
		data[0] = unitID;
     f40:	c9 82       	std	Y+1, r12	; 0x01
		data[1] = temp;
     f42:	aa 82       	std	Y+2, r10	; 0x02
		data[2] = Room;
     f44:	db 82       	std	Y+3, r13	; 0x03
		{
			// Set weekday (representated by a number, Monday to Sunday is 1 - 7)
			data[3] = i;
			
			//Calculate the starting point address (Standard assignment)
			unsigned long temp_address = (((2 + ((temp - 1) * 7)) + i) - 1);
     f46:	2a 2d       	mov	r18, r10
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	21 50       	subi	r18, 0x01	; 1
     f4c:	31 09       	sbc	r19, r1
     f4e:	79 01       	movw	r14, r18
     f50:	ee 0c       	add	r14, r14
     f52:	ff 1c       	adc	r15, r15
     f54:	ee 0c       	add	r14, r14
     f56:	ff 1c       	adc	r15, r15
     f58:	ee 0c       	add	r14, r14
     f5a:	ff 1c       	adc	r15, r15
     f5c:	e2 1a       	sub	r14, r18
     f5e:	f3 0a       	sbc	r15, r19
     f60:	32 e0       	ldi	r19, 0x02	; 2
     f62:	e3 0e       	add	r14, r19
     f64:	f1 1c       	adc	r15, r1
		data[1] = temp;
		data[2] = Room;
		
		// For-loop makes sure to create 7 blocks for each unit.
		// One block represents one day of the week.
		for (unsigned char i = 1; i <= 7; i++)
     f66:	bb 24       	eor	r11, r11
     f68:	b3 94       	inc	r11
		{
			// Set weekday (representated by a number, Monday to Sunday is 1 - 7)
			data[3] = i;
     f6a:	bc 82       	std	Y+4, r11	; 0x04
			
			
			//Loop to give each write operation 9 tries to succeed.
			for (int y = 1; y <= 9; y++)
			{
				if (SD->writeBlock(temp_address, data))
     f6c:	9e 01       	movw	r18, r28
     f6e:	2f 5f       	subi	r18, 0xFF	; 255
     f70:	3f 4f       	sbci	r19, 0xFF	; 255
     f72:	a7 01       	movw	r20, r14
     f74:	0f 2c       	mov	r0, r15
     f76:	00 0c       	add	r0, r0
     f78:	66 0b       	sbc	r22, r22
     f7a:	77 0b       	sbc	r23, r23
     f7c:	d8 01       	movw	r26, r16
     f7e:	8d 91       	ld	r24, X+
     f80:	9c 91       	ld	r25, X
     f82:	7b db       	rcall	.-2314   	; 0x67a <_ZN6sdCard10writeBlockEmPKh>
     f84:	81 11       	cpse	r24, r1
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <_ZN11UnitHandler7AddUnitEhh+0x148>
				{
					y = 10;			// if write attempt succeeds, leave loop...
				}
				else if (y = 9)
				{
					numberOfUnits--;
     f88:	f8 01       	movw	r30, r16
     f8a:	92 81       	ldd	r25, Z+2	; 0x02
     f8c:	91 50       	subi	r25, 0x01	; 1
     f8e:	92 83       	std	Z+2, r25	; 0x02
					return false;
     f90:	10 c0       	rjmp	.+32     	; 0xfb2 <_ZN11UnitHandler7AddUnitEhh+0x168>
		data[1] = temp;
		data[2] = Room;
		
		// For-loop makes sure to create 7 blocks for each unit.
		// One block represents one day of the week.
		for (unsigned char i = 1; i <= 7; i++)
     f92:	b3 94       	inc	r11
     f94:	ff ef       	ldi	r31, 0xFF	; 255
     f96:	ef 1a       	sub	r14, r31
     f98:	ff 0a       	sbc	r15, r31
     f9a:	28 e0       	ldi	r18, 0x08	; 8
     f9c:	b2 12       	cpse	r11, r18
     f9e:	e5 cf       	rjmp	.-54     	; 0xf6a <_ZN11UnitHandler7AddUnitEhh+0x120>
					return false;
				}
			}
		}
		//Add unit to the unit list.
		if (addUnitToRoom(Room))
     fa0:	6d 2d       	mov	r22, r13
     fa2:	c8 01       	movw	r24, r16
     fa4:	0a df       	rcall	.-492    	; 0xdba <_ZN11UnitHandler13addUnitToRoomEh>
     fa6:	88 23       	and	r24, r24
     fa8:	21 f0       	breq	.+8      	; 0xfb2 <_ZN11UnitHandler7AddUnitEhh+0x168>
		{
			return addUnitToList(unitID, temp);
     faa:	4a 2d       	mov	r20, r10
     fac:	6c 2d       	mov	r22, r12
     fae:	c8 01       	movw	r24, r16
     fb0:	d1 dc       	rcall	.-1630   	; 0x954 <_ZN11UnitHandler13addUnitToListEhh>
		}
		else return false;
	}
}
     fb2:	de 5f       	subi	r29, 0xFE	; 254
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	df 90       	pop	r13
     fcc:	cf 90       	pop	r12
     fce:	bf 90       	pop	r11
     fd0:	af 90       	pop	r10
     fd2:	08 95       	ret

00000fd4 <_ZN11UnitHandler18removeUnitFromRoomEhh>:
//=============================================================
// METHOD : removeUnitFromRoom()
// DESCR. : decrement the count for the room in the roomlist.
//=============================================================
bool UnitHandler::removeUnitFromRoom(unsigned char unitID, unsigned char roomID)
{
     fd4:	7f 92       	push	r7
     fd6:	8f 92       	push	r8
     fd8:	9f 92       	push	r9
     fda:	af 92       	push	r10
     fdc:	bf 92       	push	r11
     fde:	cf 92       	push	r12
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	d6 50       	subi	r29, 0x06	; 6
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	8c 01       	movw	r16, r24
    1000:	e6 2e       	mov	r14, r22
    1002:	f4 2e       	mov	r15, r20
	unsigned char temp_list[512] = {0x00};
    1004:	be 01       	movw	r22, r28
    1006:	6f 5f       	subi	r22, 0xFF	; 255
    1008:	7b 4f       	sbci	r23, 0xFB	; 251
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	92 e0       	ldi	r25, 0x02	; 2
    100e:	db 01       	movw	r26, r22
    1010:	fc 01       	movw	r30, r24
    1012:	1d 92       	st	X+, r1
    1014:	31 97       	sbiw	r30, 0x01	; 1
    1016:	e9 f7       	brne	.-6      	; 0x1012 <_ZN11UnitHandler18removeUnitFromRoomEhh+0x3e>
	getRoomList(temp_list);
    1018:	c8 01       	movw	r24, r16
    101a:	a2 dd       	rcall	.-1212   	; 0xb60 <_ZN11UnitHandler11getRoomListEPh>
	
	//Search for the room, and decrement room count with 1.
	for (int i = 0; i <= 511; i++)
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (i % 2 == 0)
    1020:	20 fd       	sbrc	r18, 0
    1022:	12 c0       	rjmp	.+36     	; 0x1048 <_ZN11UnitHandler18removeUnitFromRoomEhh+0x74>
    1024:	e1 e0       	ldi	r30, 0x01	; 1
    1026:	f4 e0       	ldi	r31, 0x04	; 4
    1028:	ec 0f       	add	r30, r28
    102a:	fd 1f       	adc	r31, r29
    102c:	e2 0f       	add	r30, r18
    102e:	f3 1f       	adc	r31, r19
		{
			if (roomID == temp_list[i])
    1030:	80 81       	ld	r24, Z
    1032:	8f 11       	cpse	r24, r15
    1034:	09 c0       	rjmp	.+18     	; 0x1048 <_ZN11UnitHandler18removeUnitFromRoomEhh+0x74>
			{
				temp_list[i + 1] = temp_list[i + 1] - 1;
    1036:	2c 0f       	add	r18, r28
    1038:	3d 1f       	adc	r19, r29
    103a:	f9 01       	movw	r30, r18
    103c:	ee 5f       	subi	r30, 0xFE	; 254
    103e:	fb 4f       	sbci	r31, 0xFB	; 251
    1040:	80 81       	ld	r24, Z
    1042:	81 50       	subi	r24, 0x01	; 1
    1044:	80 83       	st	Z, r24
    1046:	06 c0       	rjmp	.+12     	; 0x1054 <_ZN11UnitHandler18removeUnitFromRoomEhh+0x80>
{
	unsigned char temp_list[512] = {0x00};
	getRoomList(temp_list);
	
	//Search for the room, and decrement room count with 1.
	for (int i = 0; i <= 511; i++)
    1048:	2f 5f       	subi	r18, 0xFF	; 255
    104a:	3f 4f       	sbci	r19, 0xFF	; 255
    104c:	21 15       	cp	r18, r1
    104e:	f2 e0       	ldi	r31, 0x02	; 2
    1050:	3f 07       	cpc	r19, r31
    1052:	31 f7       	brne	.-52     	; 0x1020 <_ZN11UnitHandler18removeUnitFromRoomEhh+0x4c>
	}
	
	//Write new list to SD
	for (int y = 1; y <= 9; y++)
	{
		if (SD->writeBlock(1, temp_list))
    1054:	9e 01       	movw	r18, r28
    1056:	2f 5f       	subi	r18, 0xFF	; 255
    1058:	3b 4f       	sbci	r19, 0xFB	; 251
    105a:	41 e0       	ldi	r20, 0x01	; 1
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	d8 01       	movw	r26, r16
    1064:	8d 91       	ld	r24, X+
    1066:	9c 91       	ld	r25, X
    1068:	08 db       	rcall	.-2544   	; 0x67a <_ZN6sdCard10writeBlockEmPKh>
    106a:	78 2e       	mov	r7, r24
    106c:	81 11       	cpse	r24, r1
    106e:	53 c0       	rjmp	.+166    	; 0x1116 <_ZN11UnitHandler18removeUnitFromRoomEhh+0x142>
    1070:	61 c0       	rjmp	.+194    	; 0x1134 <_ZN11UnitHandler18removeUnitFromRoomEhh+0x160>
	unsigned char start_block = 0x00;
		
	//Find and calculate the starting block of the specified unit.
	for (int x = 0; x <= 511; x++)
	{
		if (x % 2 == 0 && temp_list2[x] == unitID)
    1072:	20 fd       	sbrc	r18, 0
    1074:	1a c0       	rjmp	.+52     	; 0x10aa <_ZN11UnitHandler18removeUnitFromRoomEhh+0xd6>
    1076:	e1 e0       	ldi	r30, 0x01	; 1
    1078:	f2 e0       	ldi	r31, 0x02	; 2
    107a:	ec 0f       	add	r30, r28
    107c:	fd 1f       	adc	r31, r29
    107e:	e2 0f       	add	r30, r18
    1080:	f3 1f       	adc	r31, r19
    1082:	80 81       	ld	r24, Z
    1084:	8e 11       	cpse	r24, r14
    1086:	11 c0       	rjmp	.+34     	; 0x10aa <_ZN11UnitHandler18removeUnitFromRoomEhh+0xd6>
		{
			start_block = (2 + ((temp_list2[x + 1] - 1) * 7));
    1088:	e1 e0       	ldi	r30, 0x01	; 1
    108a:	f2 e0       	ldi	r31, 0x02	; 2
    108c:	ec 0f       	add	r30, r28
    108e:	fd 1f       	adc	r31, r29
    1090:	e2 0f       	add	r30, r18
    1092:	f3 1f       	adc	r31, r19
    1094:	81 81       	ldd	r24, Z+1	; 0x01
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	88 2e       	mov	r8, r24
    109c:	88 0c       	add	r8, r8
    109e:	88 0c       	add	r8, r8
    10a0:	88 0c       	add	r8, r8
    10a2:	88 1a       	sub	r8, r24
    10a4:	83 94       	inc	r8
    10a6:	83 94       	inc	r8
    10a8:	07 c0       	rjmp	.+14     	; 0x10b8 <_ZN11UnitHandler18removeUnitFromRoomEhh+0xe4>
	unsigned char temp_list2[512] = {0x00};
	getUnitList(temp_list2);
	unsigned char start_block = 0x00;
		
	//Find and calculate the starting block of the specified unit.
	for (int x = 0; x <= 511; x++)
    10aa:	2f 5f       	subi	r18, 0xFF	; 255
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	21 15       	cp	r18, r1
    10b0:	b2 e0       	ldi	r27, 0x02	; 2
    10b2:	3b 07       	cpc	r19, r27
    10b4:	f1 f6       	brne	.-68     	; 0x1072 <_ZN11UnitHandler18removeUnitFromRoomEhh+0x9e>
    10b6:	81 2c       	mov	r8, r1
			x = 512;
		}
	}
	
	unsigned long adress_block = 0x00000000;
	unsigned char newList[512] = {0x00};
    10b8:	fe 01       	movw	r30, r28
    10ba:	31 96       	adiw	r30, 0x01	; 1
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	92 e0       	ldi	r25, 0x02	; 2
    10c0:	df 01       	movw	r26, r30
    10c2:	9c 01       	movw	r18, r24
    10c4:	1d 92       	st	X+, r1
    10c6:	21 50       	subi	r18, 0x01	; 1
    10c8:	30 40       	sbci	r19, 0x00	; 0
    10ca:	e1 f7       	brne	.-8      	; 0x10c4 <_ZN11UnitHandler18removeUnitFromRoomEhh+0xf0>
	
	for (int z = 0; z <= 6; z++)
    10cc:	a1 2c       	mov	r10, r1
    10ce:	b1 2c       	mov	r11, r1
    10d0:	91 2c       	mov	r9, r1
    10d2:	65 01       	movw	r12, r10
    10d4:	c8 0c       	add	r12, r8
    10d6:	d9 1c       	adc	r13, r9
	{
		adress_block = start_block + z;
    10d8:	0d 2c       	mov	r0, r13
    10da:	00 0c       	add	r0, r0
    10dc:	ee 08       	sbc	r14, r14
    10de:	ff 08       	sbc	r15, r15
		
		SD->readBlock(adress_block, newList);
    10e0:	9e 01       	movw	r18, r28
    10e2:	2f 5f       	subi	r18, 0xFF	; 255
    10e4:	3f 4f       	sbci	r19, 0xFF	; 255
    10e6:	b7 01       	movw	r22, r14
    10e8:	a6 01       	movw	r20, r12
    10ea:	d8 01       	movw	r26, r16
    10ec:	8d 91       	ld	r24, X+
    10ee:	9c 91       	ld	r25, X
    10f0:	5e da       	rcall	.-2884   	; 0x5ae <_ZN6sdCard9readBlockEmPh>
		
		newList[2] = 0x00;
    10f2:	1b 82       	std	Y+3, r1	; 0x03
		
		SD->writeBlock(adress_block, newList);
    10f4:	9e 01       	movw	r18, r28
    10f6:	2f 5f       	subi	r18, 0xFF	; 255
    10f8:	3f 4f       	sbci	r19, 0xFF	; 255
    10fa:	b7 01       	movw	r22, r14
    10fc:	a6 01       	movw	r20, r12
    10fe:	f8 01       	movw	r30, r16
    1100:	80 81       	ld	r24, Z
    1102:	91 81       	ldd	r25, Z+1	; 0x01
    1104:	ba da       	rcall	.-2700   	; 0x67a <_ZN6sdCard10writeBlockEmPKh>
	}
	
	unsigned long adress_block = 0x00000000;
	unsigned char newList[512] = {0x00};
	
	for (int z = 0; z <= 6; z++)
    1106:	ff ef       	ldi	r31, 0xFF	; 255
    1108:	af 1a       	sub	r10, r31
    110a:	bf 0a       	sbc	r11, r31
    110c:	27 e0       	ldi	r18, 0x07	; 7
    110e:	a2 16       	cp	r10, r18
    1110:	b1 04       	cpc	r11, r1
    1112:	f9 f6       	brne	.-66     	; 0x10d2 <_ZN11UnitHandler18removeUnitFromRoomEhh+0xfe>
    1114:	0f c0       	rjmp	.+30     	; 0x1134 <_ZN11UnitHandler18removeUnitFromRoomEhh+0x160>
		{
			return false;
		}
	}
	
	unsigned char temp_list2[512] = {0x00};
    1116:	be 01       	movw	r22, r28
    1118:	6f 5f       	subi	r22, 0xFF	; 255
    111a:	7d 4f       	sbci	r23, 0xFD	; 253
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	92 e0       	ldi	r25, 0x02	; 2
    1120:	db 01       	movw	r26, r22
    1122:	fc 01       	movw	r30, r24
    1124:	1d 92       	st	X+, r1
    1126:	31 97       	sbiw	r30, 0x01	; 1
    1128:	e9 f7       	brne	.-6      	; 0x1124 <_ZN11UnitHandler18removeUnitFromRoomEhh+0x150>
	getUnitList(temp_list2);
    112a:	c8 01       	movw	r24, r16
    112c:	d5 db       	rcall	.-2134   	; 0x8d8 <_ZN11UnitHandler11getUnitListEPh>
	unsigned char start_block = 0x00;
		
	//Find and calculate the starting block of the specified unit.
	for (int x = 0; x <= 511; x++)
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	9f cf       	rjmp	.-194    	; 0x1072 <_ZN11UnitHandler18removeUnitFromRoomEhh+0x9e>
		SD->writeBlock(adress_block, newList);
}


	return true;
}
    1134:	87 2d       	mov	r24, r7
    1136:	da 5f       	subi	r29, 0xFA	; 250
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	ff 90       	pop	r15
    114c:	ef 90       	pop	r14
    114e:	df 90       	pop	r13
    1150:	cf 90       	pop	r12
    1152:	bf 90       	pop	r11
    1154:	af 90       	pop	r10
    1156:	9f 90       	pop	r9
    1158:	8f 90       	pop	r8
    115a:	7f 90       	pop	r7
    115c:	08 95       	ret

0000115e <_ZN11UnitHandler10deleteRoomEh>:
//=============================================================
// METHOD : deleteRoom()
// DESCR. : Deletes the specified unit and unit count for that room, and removes the roomID from the units belonging to that room
//=============================================================
bool UnitHandler::deleteRoom(unsigned char RoomID)
{
    115e:	af 92       	push	r10
    1160:	bf 92       	push	r11
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	d4 50       	subi	r29, 0x04	; 4
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	8c 01       	movw	r16, r24
    1184:	f6 2e       	mov	r15, r22
	unsigned char temp_list[512] = {0x00};
    1186:	be 01       	movw	r22, r28
    1188:	6f 5f       	subi	r22, 0xFF	; 255
    118a:	7d 4f       	sbci	r23, 0xFD	; 253
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	92 e0       	ldi	r25, 0x02	; 2
    1190:	fb 01       	movw	r30, r22
    1192:	9c 01       	movw	r18, r24
    1194:	11 92       	st	Z+, r1
    1196:	21 50       	subi	r18, 0x01	; 1
    1198:	30 40       	sbci	r19, 0x00	; 0
    119a:	e1 f7       	brne	.-8      	; 0x1194 <_ZN11UnitHandler10deleteRoomEh+0x36>
	unsigned char count = 0x00;
	unsigned char unitsHandled = 0x00;
	unsigned long blockPoint;
	unsigned char data[512];
	
	getRoomList(temp_list);
    119c:	c8 01       	movw	r24, r16
    119e:	e0 dc       	rcall	.-1600   	; 0xb60 <_ZN11UnitHandler11getRoomListEPh>
	
	for (int i = 0; i <= 511; i++)
    11a0:	a0 e0       	ldi	r26, 0x00	; 0
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (i % 2 == 0)
    11a4:	a0 fd       	sbrc	r26, 0
    11a6:	29 c0       	rjmp	.+82     	; 0x11fa <_ZN11UnitHandler10deleteRoomEh+0x9c>
    11a8:	e1 e0       	ldi	r30, 0x01	; 1
    11aa:	f2 e0       	ldi	r31, 0x02	; 2
    11ac:	ec 0f       	add	r30, r28
    11ae:	fd 1f       	adc	r31, r29
    11b0:	ea 0f       	add	r30, r26
    11b2:	fb 1f       	adc	r31, r27
		{
			spot = temp_list[i];
			
			if (RoomID == spot)
    11b4:	80 81       	ld	r24, Z
    11b6:	f8 12       	cpse	r15, r24
    11b8:	20 c0       	rjmp	.+64     	; 0x11fa <_ZN11UnitHandler10deleteRoomEh+0x9c>
			{
				//Saves the number of units belonging to that room.
				count = temp_list[i + 1];
    11ba:	fe 01       	movw	r30, r28
    11bc:	ea 0f       	add	r30, r26
    11be:	fb 1f       	adc	r31, r27
    11c0:	ee 5f       	subi	r30, 0xFE	; 254
    11c2:	fd 4f       	sbci	r31, 0xFD	; 253
    11c4:	e0 80       	ld	r14, Z
				//Set unit count for that room equal too 0.
				temp_list[i + 1] = 0x00;
    11c6:	10 82       	st	Z, r1

				//shift the register (list) to overwrite the room we want to delete.
				for (int x = 2; (x + i) <= 511; x++)
    11c8:	cd 01       	movw	r24, r26
    11ca:	02 96       	adiw	r24, 0x02	; 2
    11cc:	81 15       	cp	r24, r1
    11ce:	92 40       	sbci	r25, 0x02	; 2
    11d0:	d4 f4       	brge	.+52     	; 0x1206 <_ZN11UnitHandler10deleteRoomEh+0xa8>
    11d2:	fe 01       	movw	r30, r28
    11d4:	ea 0f       	add	r30, r26
    11d6:	fb 1f       	adc	r31, r27
    11d8:	ed 5f       	subi	r30, 0xFD	; 253
    11da:	fd 4f       	sbci	r31, 0xFD	; 253
    11dc:	9e 01       	movw	r18, r28
    11de:	2f 5f       	subi	r18, 0xFF	; 255
    11e0:	3b 4f       	sbci	r19, 0xFB	; 251
				{
					temp_list[i] = temp_list[x + i];
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	92 e0       	ldi	r25, 0x02	; 2
    11e6:	8c 0f       	add	r24, r28
    11e8:	9d 1f       	adc	r25, r29
    11ea:	a8 0f       	add	r26, r24
    11ec:	b9 1f       	adc	r27, r25
    11ee:	91 91       	ld	r25, Z+
    11f0:	9c 93       	st	X, r25
				count = temp_list[i + 1];
				//Set unit count for that room equal too 0.
				temp_list[i + 1] = 0x00;

				//shift the register (list) to overwrite the room we want to delete.
				for (int x = 2; (x + i) <= 511; x++)
    11f2:	e2 17       	cp	r30, r18
    11f4:	f3 07       	cpc	r31, r19
    11f6:	d9 f7       	brne	.-10     	; 0x11ee <_ZN11UnitHandler10deleteRoomEh+0x90>
    11f8:	06 c0       	rjmp	.+12     	; 0x1206 <_ZN11UnitHandler10deleteRoomEh+0xa8>
	unsigned long blockPoint;
	unsigned char data[512];
	
	getRoomList(temp_list);
	
	for (int i = 0; i <= 511; i++)
    11fa:	11 96       	adiw	r26, 0x01	; 1
    11fc:	a1 15       	cp	r26, r1
    11fe:	92 e0       	ldi	r25, 0x02	; 2
    1200:	b9 07       	cpc	r27, r25
    1202:	81 f6       	brne	.-96     	; 0x11a4 <_ZN11UnitHandler10deleteRoomEh+0x46>
    1204:	e1 2c       	mov	r14, r1
	}
	
	//Write new list to SD
	for (int y = 1; y <= 3; y++)
	{
		if (SD->writeBlock(1, temp_list))
    1206:	9e 01       	movw	r18, r28
    1208:	2f 5f       	subi	r18, 0xFF	; 255
    120a:	3d 4f       	sbci	r19, 0xFD	; 253
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	f8 01       	movw	r30, r16
    1216:	80 81       	ld	r24, Z
    1218:	91 81       	ldd	r25, Z+1	; 0x01
    121a:	2f da       	rcall	.-2978   	; 0x67a <_ZN6sdCard10writeBlockEmPKh>
    121c:	b8 2e       	mov	r11, r24
    121e:	88 23       	and	r24, r24
    1220:	91 f1       	breq	.+100    	; 0x1286 <_ZN11UnitHandler10deleteRoomEh+0x128>
    1222:	c1 2c       	mov	r12, r1
    1224:	d1 2c       	mov	r13, r1
    1226:	a1 2c       	mov	r10, r1
	}
	
	//Search through the SD-card to find units belonging to the specified room, and delete room.
	for (int i = 0; i <= numberOfUnits; i++)
	{
		blockPoint = ((2 + (i * 7)) + 1);
    1228:	a6 01       	movw	r20, r12
    122a:	44 0f       	add	r20, r20
    122c:	55 1f       	adc	r21, r21
    122e:	44 0f       	add	r20, r20
    1230:	55 1f       	adc	r21, r21
    1232:	44 0f       	add	r20, r20
    1234:	55 1f       	adc	r21, r21
    1236:	4c 19       	sub	r20, r12
    1238:	5d 09       	sbc	r21, r13
    123a:	4d 5f       	subi	r20, 0xFD	; 253
    123c:	5f 4f       	sbci	r21, 0xFF	; 255
    123e:	05 2e       	mov	r0, r21
    1240:	00 0c       	add	r0, r0
    1242:	66 0b       	sbc	r22, r22
    1244:	77 0b       	sbc	r23, r23
		
		SD->readBlock(blockPoint, data);
    1246:	9e 01       	movw	r18, r28
    1248:	2f 5f       	subi	r18, 0xFF	; 255
    124a:	3f 4f       	sbci	r19, 0xFF	; 255
    124c:	f8 01       	movw	r30, r16
    124e:	80 81       	ld	r24, Z
    1250:	91 81       	ldd	r25, Z+1	; 0x01
    1252:	ad d9       	rcall	.-3238   	; 0x5ae <_ZN6sdCard9readBlockEmPh>
		
		if (data[2] == RoomID)
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	8f 11       	cpse	r24, r15
    1258:	0d c0       	rjmp	.+26     	; 0x1274 <_ZN11UnitHandler10deleteRoomEh+0x116>
		{
			removeUnitFromRoom(data[0], RoomID);
    125a:	4f 2d       	mov	r20, r15
    125c:	69 81       	ldd	r22, Y+1	; 0x01
    125e:	c8 01       	movw	r24, r16
    1260:	b9 de       	rcall	.-654    	; 0xfd4 <_ZN11UnitHandler18removeUnitFromRoomEhh>
			unitsHandled++;
    1262:	a3 94       	inc	r10
			if (unitsHandled == count)
    1264:	ae 10       	cpse	r10, r14
    1266:	06 c0       	rjmp	.+12     	; 0x1274 <_ZN11UnitHandler10deleteRoomEh+0x116>
			{
				i = numberOfUnits + 1;
    1268:	f8 01       	movw	r30, r16
    126a:	c2 80       	ldd	r12, Z+2	; 0x02
    126c:	d1 2c       	mov	r13, r1
    126e:	ff ef       	ldi	r31, 0xFF	; 255
    1270:	cf 1a       	sub	r12, r31
    1272:	df 0a       	sbc	r13, r31
			return false;
		}
	}
	
	//Search through the SD-card to find units belonging to the specified room, and delete room.
	for (int i = 0; i <= numberOfUnits; i++)
    1274:	2f ef       	ldi	r18, 0xFF	; 255
    1276:	c2 1a       	sub	r12, r18
    1278:	d2 0a       	sbc	r13, r18
    127a:	f8 01       	movw	r30, r16
    127c:	82 81       	ldd	r24, Z+2	; 0x02
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	8c 15       	cp	r24, r12
    1282:	9d 05       	cpc	r25, r13
    1284:	8c f6       	brge	.-94     	; 0x1228 <_ZN11UnitHandler10deleteRoomEh+0xca>
				i = numberOfUnits + 1;
			}
		}		
	}
	return true;
}
    1286:	8b 2d       	mov	r24, r11
    1288:	dc 5f       	subi	r29, 0xFC	; 252
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	ff 90       	pop	r15
    129e:	ef 90       	pop	r14
    12a0:	df 90       	pop	r13
    12a2:	cf 90       	pop	r12
    12a4:	bf 90       	pop	r11
    12a6:	af 90       	pop	r10
    12a8:	08 95       	ret

000012aa <_ZN11UnitHandler10UpdateTimeEhPh>:
// =============================================================
// METHOD : UpdateTime()
// DESCR. : Sends updated timetable for one specified unit, on one specified day
// =============================================================
bool UnitHandler::UpdateTime(unsigned char unitID, unsigned char schedule[])
{
    12aa:	8f 92       	push	r8
    12ac:	9f 92       	push	r9
    12ae:	af 92       	push	r10
    12b0:	bf 92       	push	r11
    12b2:	cf 92       	push	r12
    12b4:	df 92       	push	r13
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	d2 50       	subi	r29, 0x02	; 2
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	6c 01       	movw	r12, r24
    12d4:	06 2f       	mov	r16, r22
    12d6:	7a 01       	movw	r14, r20
	unsigned char tempList[512] = {0x00};
    12d8:	be 01       	movw	r22, r28
    12da:	6f 5f       	subi	r22, 0xFF	; 255
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	92 e0       	ldi	r25, 0x02	; 2
    12e2:	fb 01       	movw	r30, r22
    12e4:	9c 01       	movw	r18, r24
    12e6:	11 92       	st	Z+, r1
    12e8:	21 50       	subi	r18, 0x01	; 1
    12ea:	30 40       	sbci	r19, 0x00	; 0
    12ec:	e1 f7       	brne	.-8      	; 0x12e6 <_ZN11UnitHandler10UpdateTimeEhPh+0x3c>
	getUnitList(tempList); 
    12ee:	c6 01       	movw	r24, r12
    12f0:	f3 da       	rcall	.-2586   	; 0x8d8 <_ZN11UnitHandler11getUnitListEPh>
	
	unsigned long unit_start_block = 0x00000000;
	unsigned char block_representation;
	
	// looping to find storage location
	for (int i = 0; i <= 511; i++) 
    12f2:	e0 e0       	ldi	r30, 0x00	; 0
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
	{
		if (i % 2 == 0)
    12f6:	e0 fd       	sbrc	r30, 0
    12f8:	20 c0       	rjmp	.+64     	; 0x133a <_ZN11UnitHandler10UpdateTimeEhPh+0x90>
    12fa:	a1 e0       	ldi	r26, 0x01	; 1
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	ac 0f       	add	r26, r28
    1300:	bd 1f       	adc	r27, r29
    1302:	ae 0f       	add	r26, r30
    1304:	bf 1f       	adc	r27, r31
		{
			if (tempList[i] == unitID)
    1306:	8c 91       	ld	r24, X
    1308:	80 13       	cpse	r24, r16
    130a:	17 c0       	rjmp	.+46     	; 0x133a <_ZN11UnitHandler10UpdateTimeEhPh+0x90>
			{
				// set j equal to the starting block representation for the specified unit.
				int j = i + 1;
				
				// extracting unit count for later use;
				block_representation = tempList[j];  
    130c:	ec 0f       	add	r30, r28
    130e:	fd 1f       	adc	r31, r29
    1310:	12 81       	ldd	r17, Z+2	; 0x02
				
				// calculate start block
				int y = tempList[j] - 1;
    1312:	81 2f       	mov	r24, r17
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	01 97       	sbiw	r24, 0x01	; 1
				unit_start_block = (2 + (y * 7)); 
    1318:	4c 01       	movw	r8, r24
    131a:	88 0c       	add	r8, r8
    131c:	99 1c       	adc	r9, r9
    131e:	88 0c       	add	r8, r8
    1320:	99 1c       	adc	r9, r9
    1322:	88 0c       	add	r8, r8
    1324:	99 1c       	adc	r9, r9
    1326:	88 1a       	sub	r8, r24
    1328:	99 0a       	sbc	r9, r25
    132a:	32 e0       	ldi	r19, 0x02	; 2
    132c:	83 0e       	add	r8, r19
    132e:	91 1c       	adc	r9, r1
    1330:	09 2c       	mov	r0, r9
    1332:	00 0c       	add	r0, r0
    1334:	aa 08       	sbc	r10, r10
    1336:	bb 08       	sbc	r11, r11
    1338:	08 c0       	rjmp	.+16     	; 0x134a <_ZN11UnitHandler10UpdateTimeEhPh+0xa0>
	
	unsigned long unit_start_block = 0x00000000;
	unsigned char block_representation;
	
	// looping to find storage location
	for (int i = 0; i <= 511; i++) 
    133a:	31 96       	adiw	r30, 0x01	; 1
    133c:	e1 15       	cp	r30, r1
    133e:	82 e0       	ldi	r24, 0x02	; 2
    1340:	f8 07       	cpc	r31, r24
    1342:	c9 f6       	brne	.-78     	; 0x12f6 <_ZN11UnitHandler10UpdateTimeEhPh+0x4c>
    1344:	81 2c       	mov	r8, r1
    1346:	91 2c       	mov	r9, r1
    1348:	54 01       	movw	r10, r8
			}
		}
	}
	
	// extract day from schedule array
	unsigned char day = schedule[3];
    134a:	f7 01       	movw	r30, r14
    134c:	83 81       	ldd	r24, Z+3	; 0x03
	
	unsigned long daylocation = 0x00000000;
	
	// testing if day is within legal range
	if (day < 8 && day > 0) 
    134e:	9f ef       	ldi	r25, 0xFF	; 255
    1350:	98 0f       	add	r25, r24
    1352:	97 30       	cpi	r25, 0x07	; 7
    1354:	d0 f4       	brcc	.+52     	; 0x138a <_ZN11UnitHandler10UpdateTimeEhPh+0xe0>
	{
		// calculate the block location of the block we use.
		daylocation = unit_start_block + (day - 1); 
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	09 2e       	mov	r0, r25
    135c:	00 0c       	add	r0, r0
    135e:	aa 0b       	sbc	r26, r26
    1360:	bb 0b       	sbc	r27, r27
    1362:	88 0e       	add	r8, r24
    1364:	99 1e       	adc	r9, r25
    1366:	aa 1e       	adc	r10, r26
    1368:	bb 1e       	adc	r11, r27
		// if not within range of 1 to 7 return false
		return false;
	}
	
	// add correct starting block representation, to the new array.
	schedule[1] = block_representation;
    136a:	11 83       	std	Z+1, r17	; 0x01
    136c:	09 e0       	ldi	r16, 0x09	; 9
    136e:	10 e0       	ldi	r17, 0x00	; 0
	
	//Loop to give each write operation 9 tries to succeed.
	for (int i = 0; i < 9; i++) 
	{
		if (SD->writeBlock(daylocation, schedule))
    1370:	97 01       	movw	r18, r14
    1372:	b5 01       	movw	r22, r10
    1374:	a4 01       	movw	r20, r8
    1376:	f6 01       	movw	r30, r12
    1378:	80 81       	ld	r24, Z
    137a:	91 81       	ldd	r25, Z+1	; 0x01
    137c:	7e d9       	rcall	.-3332   	; 0x67a <_ZN6sdCard10writeBlockEmPKh>
    137e:	81 11       	cpse	r24, r1
    1380:	05 c0       	rjmp	.+10     	; 0x138c <_ZN11UnitHandler10UpdateTimeEhPh+0xe2>
    1382:	01 50       	subi	r16, 0x01	; 1
    1384:	11 09       	sbc	r17, r1
	
	// add correct starting block representation, to the new array.
	schedule[1] = block_representation;
	
	//Loop to give each write operation 9 tries to succeed.
	for (int i = 0; i < 9; i++) 
    1386:	a1 f7       	brne	.-24     	; 0x1370 <_ZN11UnitHandler10UpdateTimeEhPh+0xc6>
    1388:	01 c0       	rjmp	.+2      	; 0x138c <_ZN11UnitHandler10UpdateTimeEhPh+0xe2>
		daylocation = unit_start_block + (day - 1); 
	}
	else
	{
		// if not within range of 1 to 7 return false
		return false;
    138a:	80 e0       	ldi	r24, 0x00	; 0
			return true;
		}
	}
	// write failed more than 9 times.
	return false; 
}
    138c:	de 5f       	subi	r29, 0xFE	; 254
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	ff 90       	pop	r15
    13a2:	ef 90       	pop	r14
    13a4:	df 90       	pop	r13
    13a6:	cf 90       	pop	r12
    13a8:	bf 90       	pop	r11
    13aa:	af 90       	pop	r10
    13ac:	9f 90       	pop	r9
    13ae:	8f 90       	pop	r8
    13b0:	08 95       	ret

000013b2 <_ZN11UnitHandler12getTimeTableEhhPh>:
// =============================================================
// METHOD : getTimeTable()
// DESCR. : fills a 512 byte array with the data in the block for the requested day and unit.
// =============================================================
bool UnitHandler::getTimeTable(unsigned char day, unsigned char UnitID, unsigned char schedule[]) 
{
    13b2:	8f 92       	push	r8
    13b4:	9f 92       	push	r9
    13b6:	af 92       	push	r10
    13b8:	bf 92       	push	r11
    13ba:	cf 92       	push	r12
    13bc:	df 92       	push	r13
    13be:	ef 92       	push	r14
    13c0:	ff 92       	push	r15
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	d2 50       	subi	r29, 0x02	; 2
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	7c 01       	movw	r14, r24
    13dc:	16 2f       	mov	r17, r22
    13de:	04 2f       	mov	r16, r20
    13e0:	69 01       	movw	r12, r18
	unsigned char tempList[512] = {0x00};
    13e2:	be 01       	movw	r22, r28
    13e4:	6f 5f       	subi	r22, 0xFF	; 255
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	92 e0       	ldi	r25, 0x02	; 2
    13ec:	fb 01       	movw	r30, r22
    13ee:	9c 01       	movw	r18, r24
    13f0:	11 92       	st	Z+, r1
    13f2:	21 50       	subi	r18, 0x01	; 1
    13f4:	30 40       	sbci	r19, 0x00	; 0
    13f6:	e1 f7       	brne	.-8      	; 0x13f0 <_ZN11UnitHandler12getTimeTableEhhPh+0x3e>
	getUnitList(tempList);
    13f8:	c7 01       	movw	r24, r14
    13fa:	6e da       	rcall	.-2852   	; 0x8d8 <_ZN11UnitHandler11getUnitListEPh>
	
	unsigned long unit_start_block = 0x00000000; // address storage
	
	// loop to find the value used for calculating the storage adress;
	for (int i = 0; i < 512; i++) 
    13fc:	e0 e0       	ldi	r30, 0x00	; 0
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
	{
		if (i % 2 == 0)
    1400:	e0 fd       	sbrc	r30, 0
    1402:	1f c0       	rjmp	.+62     	; 0x1442 <_ZN11UnitHandler12getTimeTableEhhPh+0x90>
    1404:	a1 e0       	ldi	r26, 0x01	; 1
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	ac 0f       	add	r26, r28
    140a:	bd 1f       	adc	r27, r29
    140c:	ae 0f       	add	r26, r30
    140e:	bf 1f       	adc	r27, r31
		{
			if (tempList[i] == UnitID)
    1410:	8c 91       	ld	r24, X
    1412:	80 13       	cpse	r24, r16
    1414:	16 c0       	rjmp	.+44     	; 0x1442 <_ZN11UnitHandler12getTimeTableEhhPh+0x90>
			{
				int j = i + 1;
				int y = tempList[j] - 1;
    1416:	ec 0f       	add	r30, r28
    1418:	fd 1f       	adc	r31, r29
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	01 97       	sbiw	r24, 0x01	; 1
				unit_start_block = (2 + (y * 7));
    1420:	4c 01       	movw	r8, r24
    1422:	88 0c       	add	r8, r8
    1424:	99 1c       	adc	r9, r9
    1426:	88 0c       	add	r8, r8
    1428:	99 1c       	adc	r9, r9
    142a:	88 0c       	add	r8, r8
    142c:	99 1c       	adc	r9, r9
    142e:	88 1a       	sub	r8, r24
    1430:	99 0a       	sbc	r9, r25
    1432:	32 e0       	ldi	r19, 0x02	; 2
    1434:	83 0e       	add	r8, r19
    1436:	91 1c       	adc	r9, r1
    1438:	09 2c       	mov	r0, r9
    143a:	00 0c       	add	r0, r0
    143c:	aa 08       	sbc	r10, r10
    143e:	bb 08       	sbc	r11, r11
    1440:	08 c0       	rjmp	.+16     	; 0x1452 <_ZN11UnitHandler12getTimeTableEhhPh+0xa0>
	getUnitList(tempList);
	
	unsigned long unit_start_block = 0x00000000; // address storage
	
	// loop to find the value used for calculating the storage adress;
	for (int i = 0; i < 512; i++) 
    1442:	31 96       	adiw	r30, 0x01	; 1
    1444:	e1 15       	cp	r30, r1
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	f8 07       	cpc	r31, r24
    144a:	d1 f6       	brne	.-76     	; 0x1400 <_ZN11UnitHandler12getTimeTableEhhPh+0x4e>
    144c:	81 2c       	mov	r8, r1
    144e:	91 2c       	mov	r9, r1
    1450:	54 01       	movw	r10, r8
			}
		}
	}
	
	unsigned long daylocation = 0x00000000;
	if (day < 8 && day > 0)
    1452:	8f ef       	ldi	r24, 0xFF	; 255
    1454:	81 0f       	add	r24, r17
    1456:	87 30       	cpi	r24, 0x07	; 7
    1458:	d0 f4       	brcc	.+52     	; 0x148e <_ZN11UnitHandler12getTimeTableEhhPh+0xdc>
	{
		daylocation = unit_start_block + (day - 1);
    145a:	81 2f       	mov	r24, r17
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	09 2e       	mov	r0, r25
    1462:	00 0c       	add	r0, r0
    1464:	aa 0b       	sbc	r26, r26
    1466:	bb 0b       	sbc	r27, r27
    1468:	88 0e       	add	r8, r24
    146a:	99 1e       	adc	r9, r25
    146c:	aa 1e       	adc	r10, r26
    146e:	bb 1e       	adc	r11, r27
    1470:	09 e0       	ldi	r16, 0x09	; 9
    1472:	10 e0       	ldi	r17, 0x00	; 0
	{
		return false;
	}
	for (int i = 0; i < 9; i++)
	{
		if (SD->readBlock(daylocation, schedule))
    1474:	96 01       	movw	r18, r12
    1476:	b5 01       	movw	r22, r10
    1478:	a4 01       	movw	r20, r8
    147a:	f7 01       	movw	r30, r14
    147c:	80 81       	ld	r24, Z
    147e:	91 81       	ldd	r25, Z+1	; 0x01
    1480:	96 d8       	rcall	.-3796   	; 0x5ae <_ZN6sdCard9readBlockEmPh>
    1482:	81 11       	cpse	r24, r1
    1484:	06 c0       	rjmp	.+12     	; 0x1492 <_ZN11UnitHandler12getTimeTableEhhPh+0xe0>
    1486:	01 50       	subi	r16, 0x01	; 1
    1488:	11 09       	sbc	r17, r1
	}
	else
	{
		return false;
	}
	for (int i = 0; i < 9; i++)
    148a:	a1 f7       	brne	.-24     	; 0x1474 <_ZN11UnitHandler12getTimeTableEhhPh+0xc2>
    148c:	03 c0       	rjmp	.+6      	; 0x1494 <_ZN11UnitHandler12getTimeTableEhhPh+0xe2>
	{
		daylocation = unit_start_block + (day - 1);
	}
	else
	{
		return false;
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	01 c0       	rjmp	.+2      	; 0x1494 <_ZN11UnitHandler12getTimeTableEhhPh+0xe2>
	for (int i = 0; i < 9; i++)
	{
		if (SD->readBlock(daylocation, schedule))
		{
			i = 10;
			return true;
    1492:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return false;
}
    1494:	de 5f       	subi	r29, 0xFE	; 254
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	f8 94       	cli
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	cd bf       	out	0x3d, r28	; 61
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	1f 91       	pop	r17
    14a6:	0f 91       	pop	r16
    14a8:	ff 90       	pop	r15
    14aa:	ef 90       	pop	r14
    14ac:	df 90       	pop	r13
    14ae:	cf 90       	pop	r12
    14b0:	bf 90       	pop	r11
    14b2:	af 90       	pop	r10
    14b4:	9f 90       	pop	r9
    14b6:	8f 90       	pop	r8
    14b8:	08 95       	ret

000014ba <_ZN11UnitHandler8editUnitEhhh>:
// =============================================================
// METHOD : editUnit()
// DESCR. : fills a 512 byte array with the data in the block for the requested day and unit.
// =============================================================
bool UnitHandler::editUnit(unsigned char previusUnitID, unsigned char newUnitID, unsigned char roomID)
{
    14ba:	4f 92       	push	r4
    14bc:	5f 92       	push	r5
    14be:	6f 92       	push	r6
    14c0:	7f 92       	push	r7
    14c2:	af 92       	push	r10
    14c4:	bf 92       	push	r11
    14c6:	cf 92       	push	r12
    14c8:	df 92       	push	r13
    14ca:	ef 92       	push	r14
    14cc:	ff 92       	push	r15
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	d4 50       	subi	r29, 0x04	; 4
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	8c 01       	movw	r16, r24
    14e8:	f6 2e       	mov	r15, r22
    14ea:	a4 2e       	mov	r10, r20
    14ec:	b2 2e       	mov	r11, r18
	unsigned char data2[512];
	
	unsigned char point = 0x01;
	
	
	getUnitList(data);
    14ee:	be 01       	movw	r22, r28
    14f0:	6f 5f       	subi	r22, 0xFF	; 255
    14f2:	7d 4f       	sbci	r23, 0xFD	; 253
    14f4:	f1 d9       	rcall	.-3102   	; 0x8d8 <_ZN11UnitHandler11getUnitListEPh>
    14f6:	fe 01       	movw	r30, r28
    14f8:	ef 5f       	subi	r30, 0xFF	; 255
    14fa:	fd 4f       	sbci	r31, 0xFD	; 253
	
	//Fint the starting point representation of the unit we want too update.
	for (int i = 0; i <= 511; i++)
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
	{
		if (data[i] == previusUnitID)
    1500:	21 91       	ld	r18, Z+
    1502:	2f 11       	cpse	r18, r15
    1504:	13 c0       	rjmp	.+38     	; 0x152c <_ZN11UnitHandler8editUnitEhhh+0x72>
		{
			point = data[i + 1];
    1506:	e1 e0       	ldi	r30, 0x01	; 1
    1508:	f2 e0       	ldi	r31, 0x02	; 2
    150a:	ec 0f       	add	r30, r28
    150c:	fd 1f       	adc	r31, r29
    150e:	e8 0f       	add	r30, r24
    1510:	f9 1f       	adc	r31, r25
    1512:	f1 80       	ldd	r15, Z+1	; 0x01
			data[i] = newUnitID;
    1514:	a0 82       	st	Z, r10
			SD->writeBlock(0x00, data);
    1516:	9e 01       	movw	r18, r28
    1518:	2f 5f       	subi	r18, 0xFF	; 255
    151a:	3d 4f       	sbci	r19, 0xFD	; 253
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	ba 01       	movw	r22, r20
    1522:	f8 01       	movw	r30, r16
    1524:	80 81       	ld	r24, Z
    1526:	91 81       	ldd	r25, Z+1	; 0x01
    1528:	a8 d8       	rcall	.-3760   	; 0x67a <_ZN6sdCard10writeBlockEmPKh>
    152a:	07 c0       	rjmp	.+14     	; 0x153a <_ZN11UnitHandler8editUnitEhhh+0x80>
	
	
	getUnitList(data);
	
	//Fint the starting point representation of the unit we want too update.
	for (int i = 0; i <= 511; i++)
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	81 15       	cp	r24, r1
    1530:	22 e0       	ldi	r18, 0x02	; 2
    1532:	92 07       	cpc	r25, r18
    1534:	29 f7       	brne	.-54     	; 0x1500 <_ZN11UnitHandler8editUnitEhhh+0x46>
    1536:	ff 24       	eor	r15, r15
    1538:	f3 94       	inc	r15
		}
	}
	
	
	
	unsigned long address = (2 + ((point - 1) * 7));
    153a:	8f 2d       	mov	r24, r15
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	6c 01       	movw	r12, r24
    1542:	cc 0c       	add	r12, r12
    1544:	dd 1c       	adc	r13, r13
    1546:	cc 0c       	add	r12, r12
    1548:	dd 1c       	adc	r13, r13
    154a:	cc 0c       	add	r12, r12
    154c:	dd 1c       	adc	r13, r13
    154e:	c8 1a       	sub	r12, r24
    1550:	d9 0a       	sbc	r13, r25
    1552:	32 e0       	ldi	r19, 0x02	; 2
    1554:	c3 0e       	add	r12, r19
    1556:	d1 1c       	adc	r13, r1
    1558:	0d 2c       	mov	r0, r13
    155a:	00 0c       	add	r0, r0
    155c:	ee 08       	sbc	r14, r14
    155e:	ff 08       	sbc	r15, r15
	
	SD->readBlock(address, data2);
    1560:	9e 01       	movw	r18, r28
    1562:	2f 5f       	subi	r18, 0xFF	; 255
    1564:	3f 4f       	sbci	r19, 0xFF	; 255
    1566:	b7 01       	movw	r22, r14
    1568:	a6 01       	movw	r20, r12
    156a:	f8 01       	movw	r30, r16
    156c:	80 81       	ld	r24, Z
    156e:	91 81       	ldd	r25, Z+1	; 0x01
    1570:	1e d8       	rcall	.-4036   	; 0x5ae <_ZN6sdCard9readBlockEmPh>
	unsigned char oldRoom = data2[2];
    1572:	7b 80       	ldd	r7, Y+3	; 0x03
	
	getRoomList(data);
    1574:	be 01       	movw	r22, r28
    1576:	6f 5f       	subi	r22, 0xFF	; 255
    1578:	7d 4f       	sbci	r23, 0xFD	; 253
    157a:	c8 01       	movw	r24, r16
    157c:	f1 da       	rcall	.-2590   	; 0xb60 <_ZN11UnitHandler11getRoomListEPh>
	
	for (int i = 0; i <= 511; i++)
    157e:	e0 e0       	ldi	r30, 0x00	; 0
    1580:	f0 e0       	ldi	r31, 0x00	; 0
	{
		if (i % 2 == 0)
    1582:	e0 fd       	sbrc	r30, 0
    1584:	17 c0       	rjmp	.+46     	; 0x15b4 <_ZN11UnitHandler8editUnitEhhh+0xfa>
    1586:	a1 e0       	ldi	r26, 0x01	; 1
    1588:	b2 e0       	ldi	r27, 0x02	; 2
    158a:	ac 0f       	add	r26, r28
    158c:	bd 1f       	adc	r27, r29
    158e:	ae 0f       	add	r26, r30
    1590:	bf 1f       	adc	r27, r31
		{
			if (data[i] == oldRoom)
    1592:	8c 91       	ld	r24, X
    1594:	87 11       	cpse	r24, r7
    1596:	0e c0       	rjmp	.+28     	; 0x15b4 <_ZN11UnitHandler8editUnitEhhh+0xfa>
			{
				int j = i + 1;
    1598:	31 96       	adiw	r30, 0x01	; 1
				
					if (data[j] != 0x00)
    159a:	a1 e0       	ldi	r26, 0x01	; 1
    159c:	b2 e0       	ldi	r27, 0x02	; 2
    159e:	ac 0f       	add	r26, r28
    15a0:	bd 1f       	adc	r27, r29
    15a2:	ae 0f       	add	r26, r30
    15a4:	bf 1f       	adc	r27, r31
    15a6:	8c 91       	ld	r24, X
    15a8:	88 23       	and	r24, r24
    15aa:	49 f0       	breq	.+18     	; 0x15be <_ZN11UnitHandler8editUnitEhhh+0x104>
					{
						data[j]--;
    15ac:	fd 01       	movw	r30, r26
    15ae:	81 50       	subi	r24, 0x01	; 1
    15b0:	80 83       	st	Z, r24
    15b2:	05 c0       	rjmp	.+10     	; 0x15be <_ZN11UnitHandler8editUnitEhhh+0x104>
	SD->readBlock(address, data2);
	unsigned char oldRoom = data2[2];
	
	getRoomList(data);
	
	for (int i = 0; i <= 511; i++)
    15b4:	31 96       	adiw	r30, 0x01	; 1
    15b6:	e1 15       	cp	r30, r1
    15b8:	32 e0       	ldi	r19, 0x02	; 2
    15ba:	f3 07       	cpc	r31, r19
    15bc:	11 f7       	brne	.-60     	; 0x1582 <_ZN11UnitHandler8editUnitEhhh+0xc8>
    15be:	e0 e0       	ldi	r30, 0x00	; 0
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
	}
	
	bool roomExists = false;
	for (int i = 0; i<= 511; i++) // looping to see if new room allready exists
	{
		if(i % 2 == 0)
    15c2:	e0 fd       	sbrc	r30, 0
    15c4:	1f c0       	rjmp	.+62     	; 0x1604 <_ZN11UnitHandler8editUnitEhhh+0x14a>
    15c6:	a1 e0       	ldi	r26, 0x01	; 1
    15c8:	b2 e0       	ldi	r27, 0x02	; 2
    15ca:	ac 0f       	add	r26, r28
    15cc:	bd 1f       	adc	r27, r29
    15ce:	ae 0f       	add	r26, r30
    15d0:	bf 1f       	adc	r27, r31
		{
			if(data[i] == roomID)
    15d2:	8c 91       	ld	r24, X
    15d4:	8b 11       	cpse	r24, r11
    15d6:	16 c0       	rjmp	.+44     	; 0x1604 <_ZN11UnitHandler8editUnitEhhh+0x14a>
			{
				data[i + 1] = data[i + 1] + 1; // adds 1 to the unit count in new room
    15d8:	31 96       	adiw	r30, 0x01	; 1
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	92 e0       	ldi	r25, 0x02	; 2
    15de:	8c 0f       	add	r24, r28
    15e0:	9d 1f       	adc	r25, r29
    15e2:	e8 0f       	add	r30, r24
    15e4:	f9 1f       	adc	r31, r25
    15e6:	80 81       	ld	r24, Z
    15e8:	8f 5f       	subi	r24, 0xFF	; 255
    15ea:	80 83       	st	Z, r24
				i = 512; // exit loop
			}
		}
	}
	
	SD->writeBlock(0x01, data); 
    15ec:	9e 01       	movw	r18, r28
    15ee:	2f 5f       	subi	r18, 0xFF	; 255
    15f0:	3d 4f       	sbci	r19, 0xFD	; 253
    15f2:	41 e0       	ldi	r20, 0x01	; 1
    15f4:	50 e0       	ldi	r21, 0x00	; 0
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    15fa:	f8 01       	movw	r30, r16
    15fc:	80 81       	ld	r24, Z
    15fe:	91 81       	ldd	r25, Z+1	; 0x01
    1600:	3c d8       	rcall	.-3976   	; 0x67a <_ZN6sdCard10writeBlockEmPKh>
    1602:	26 c0       	rjmp	.+76     	; 0x1650 <_ZN11UnitHandler8editUnitEhhh+0x196>
			}
		}
	}
	
	bool roomExists = false;
	for (int i = 0; i<= 511; i++) // looping to see if new room allready exists
    1604:	31 96       	adiw	r30, 0x01	; 1
    1606:	e1 15       	cp	r30, r1
    1608:	22 e0       	ldi	r18, 0x02	; 2
    160a:	f2 07       	cpc	r31, r18
    160c:	d1 f6       	brne	.-76     	; 0x15c2 <_ZN11UnitHandler8editUnitEhhh+0x108>
    160e:	28 c0       	rjmp	.+80     	; 0x1660 <_ZN11UnitHandler8editUnitEhhh+0x1a6>
	}
	

	for (int i = 0; i <= 6; i++)
	{
		SD->readBlock(address, data2);
    1610:	9e 01       	movw	r18, r28
    1612:	2f 5f       	subi	r18, 0xFF	; 255
    1614:	3f 4f       	sbci	r19, 0xFF	; 255
    1616:	b7 01       	movw	r22, r14
    1618:	a6 01       	movw	r20, r12
    161a:	f8 01       	movw	r30, r16
    161c:	80 81       	ld	r24, Z
    161e:	91 81       	ldd	r25, Z+1	; 0x01
    1620:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_ZN6sdCard9readBlockEmPh>
		data2[0] = newUnitID;
    1624:	a9 82       	std	Y+1, r10	; 0x01
		data2[2] = roomID;
    1626:	bb 82       	std	Y+3, r11	; 0x03
		SD->writeBlock(address, data2);
    1628:	9e 01       	movw	r18, r28
    162a:	2f 5f       	subi	r18, 0xFF	; 255
    162c:	3f 4f       	sbci	r19, 0xFF	; 255
    162e:	b7 01       	movw	r22, r14
    1630:	a6 01       	movw	r20, r12
    1632:	f8 01       	movw	r30, r16
    1634:	80 81       	ld	r24, Z
    1636:	91 81       	ldd	r25, Z+1	; 0x01
    1638:	20 d8       	rcall	.-4032   	; 0x67a <_ZN6sdCard10writeBlockEmPKh>
		address++;
    163a:	ff ef       	ldi	r31, 0xFF	; 255
    163c:	cf 1a       	sub	r12, r31
    163e:	df 0a       	sbc	r13, r31
    1640:	ef 0a       	sbc	r14, r31
    1642:	ff 0a       	sbc	r15, r31
		createNewRoom(roomID);
		addUnitToRoom(roomID);
	}
	

	for (int i = 0; i <= 6; i++)
    1644:	c4 14       	cp	r12, r4
    1646:	d5 04       	cpc	r13, r5
    1648:	e6 04       	cpc	r14, r6
    164a:	f7 04       	cpc	r15, r7
    164c:	09 f7       	brne	.-62     	; 0x1610 <_ZN11UnitHandler8editUnitEhhh+0x156>
    164e:	1a c0       	rjmp	.+52     	; 0x1684 <_ZN11UnitHandler8editUnitEhhh+0x1ca>
    1650:	26 01       	movw	r4, r12
    1652:	37 01       	movw	r6, r14
    1654:	27 e0       	ldi	r18, 0x07	; 7
    1656:	42 0e       	add	r4, r18
    1658:	51 1c       	adc	r5, r1
    165a:	61 1c       	adc	r6, r1
    165c:	71 1c       	adc	r7, r1
    165e:	d8 cf       	rjmp	.-80     	; 0x1610 <_ZN11UnitHandler8editUnitEhhh+0x156>
				i = 512; // exit loop
			}
		}
	}
	
	SD->writeBlock(0x01, data); 
    1660:	9e 01       	movw	r18, r28
    1662:	2f 5f       	subi	r18, 0xFF	; 255
    1664:	3d 4f       	sbci	r19, 0xFD	; 253
    1666:	41 e0       	ldi	r20, 0x01	; 1
    1668:	50 e0       	ldi	r21, 0x00	; 0
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	f8 01       	movw	r30, r16
    1670:	80 81       	ld	r24, Z
    1672:	91 81       	ldd	r25, Z+1	; 0x01
    1674:	02 d8       	rcall	.-4092   	; 0x67a <_ZN6sdCard10writeBlockEmPKh>
	
	// create room and add unit if room does not exits
	if(roomExists == false)
	{ 
		createNewRoom(roomID);
    1676:	6b 2d       	mov	r22, r11
    1678:	c8 01       	movw	r24, r16
    167a:	47 db       	rcall	.-2418   	; 0xd0a <_ZN11UnitHandler13createNewRoomEh>
		addUnitToRoom(roomID);
    167c:	6b 2d       	mov	r22, r11
    167e:	c8 01       	movw	r24, r16
    1680:	9c db       	rcall	.-2248   	; 0xdba <_ZN11UnitHandler13addUnitToRoomEh>
    1682:	e6 cf       	rjmp	.-52     	; 0x1650 <_ZN11UnitHandler8editUnitEhhh+0x196>
		data2[2] = roomID;
		SD->writeBlock(address, data2);
		address++;
	}

}
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	dc 5f       	subi	r29, 0xFC	; 252
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	1f 91       	pop	r17
    1698:	0f 91       	pop	r16
    169a:	ff 90       	pop	r15
    169c:	ef 90       	pop	r14
    169e:	df 90       	pop	r13
    16a0:	cf 90       	pop	r12
    16a2:	bf 90       	pop	r11
    16a4:	af 90       	pop	r10
    16a6:	7f 90       	pop	r7
    16a8:	6f 90       	pop	r6
    16aa:	5f 90       	pop	r5
    16ac:	4f 90       	pop	r4
    16ae:	08 95       	ret

000016b0 <__udivmodsi4>:
    16b0:	a1 e2       	ldi	r26, 0x21	; 33
    16b2:	1a 2e       	mov	r1, r26
    16b4:	aa 1b       	sub	r26, r26
    16b6:	bb 1b       	sub	r27, r27
    16b8:	fd 01       	movw	r30, r26
    16ba:	0d c0       	rjmp	.+26     	; 0x16d6 <__udivmodsi4_ep>

000016bc <__udivmodsi4_loop>:
    16bc:	aa 1f       	adc	r26, r26
    16be:	bb 1f       	adc	r27, r27
    16c0:	ee 1f       	adc	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	a2 17       	cp	r26, r18
    16c6:	b3 07       	cpc	r27, r19
    16c8:	e4 07       	cpc	r30, r20
    16ca:	f5 07       	cpc	r31, r21
    16cc:	20 f0       	brcs	.+8      	; 0x16d6 <__udivmodsi4_ep>
    16ce:	a2 1b       	sub	r26, r18
    16d0:	b3 0b       	sbc	r27, r19
    16d2:	e4 0b       	sbc	r30, r20
    16d4:	f5 0b       	sbc	r31, r21

000016d6 <__udivmodsi4_ep>:
    16d6:	66 1f       	adc	r22, r22
    16d8:	77 1f       	adc	r23, r23
    16da:	88 1f       	adc	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	1a 94       	dec	r1
    16e0:	69 f7       	brne	.-38     	; 0x16bc <__udivmodsi4_loop>
    16e2:	60 95       	com	r22
    16e4:	70 95       	com	r23
    16e6:	80 95       	com	r24
    16e8:	90 95       	com	r25
    16ea:	9b 01       	movw	r18, r22
    16ec:	ac 01       	movw	r20, r24
    16ee:	bd 01       	movw	r22, r26
    16f0:	cf 01       	movw	r24, r30
    16f2:	08 95       	ret

000016f4 <_exit>:
    16f4:	f8 94       	cli

000016f6 <__stop_program>:
    16f6:	ff cf       	rjmp	.-2      	; 0x16f6 <__stop_program>
