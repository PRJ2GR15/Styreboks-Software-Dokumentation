
Real-Time-Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000ae0  00000b54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000096c  00000000  00000000  00000b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000014d  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00001610  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bb7  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e7  00000000  00000000  00003307  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000792  00000000  00000000  000038ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  00004080  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049d  00000000  00000000  000043a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a00  00000000  00000000  0000483d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ee       	ldi	r30, 0xE0	; 224
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	a0 e0       	ldi	r26, 0x00	; 0
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a0 30       	cpi	r26, 0x00	; 0
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
 124:	0c 94 6e 05 	jmp	0xadc	; 0xadc <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <_ZN3i2cC1Ebi>:
// DESCR. : constructor that initiates the i2c module as master with
// a chosen clock frequency of 100 kHz or 400 kHz.
//=============================================================
i2c::i2c(bool isMaster, int clock)
{
	if(isMaster == true)
 12c:	66 23       	and	r22, r22
 12e:	f1 f0       	breq	.+60     	; 0x16c <_ZN3i2cC1Ebi+0x40>
	{
		if(clock == 400)
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	40 39       	cpi	r20, 0x90	; 144
 134:	58 07       	cpc	r21, r24
 136:	39 f4       	brne	.+14     	; 0x146 <_ZN3i2cC1Ebi+0x1a>
		{
			TWSR = 0b00000001; // set prescaler
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 b9 00 	sts	0x00B9, r24
			TWBR = 0x03; // sets SCL to 400 kHz
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	80 93 b8 00 	sts	0x00B8, r24
 144:	10 c0       	rjmp	.+32     	; 0x166 <_ZN3i2cC1Ebi+0x3a>
		}
		else if(clock == 100){
 146:	44 36       	cpi	r20, 0x64	; 100
 148:	51 05       	cpc	r21, r1
 14a:	39 f4       	brne	.+14     	; 0x15a <_ZN3i2cC1Ebi+0x2e>
			TWSR = 0b00000001; // set prescaler
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 b9 00 	sts	0x00B9, r24
			TWBR = 0x12; // sets SCL to 100 kHz
 152:	82 e1       	ldi	r24, 0x12	; 18
 154:	80 93 b8 00 	sts	0x00B8, r24
 158:	06 c0       	rjmp	.+12     	; 0x166 <_ZN3i2cC1Ebi+0x3a>
		}
		else
		{
			TWSR = 0b00000011; // set prescaler
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	80 93 b9 00 	sts	0x00B9, r24
			TWBR = 0x14; // sets SCL to 6,211 kHz
 160:	84 e1       	ldi	r24, 0x14	; 20
 162:	80 93 b8 00 	sts	0x00B8, r24
		}
		TWCR = 0x04; // enable the TWI module in mega2560.
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	80 93 bc 00 	sts	0x00BC, r24
 16c:	08 95       	ret

0000016e <_ZN3i2c5startEv>:
// METHOD : start
// DESCR. : sends the start command on the i2c interface.
//=============================================================
void i2c::start()
{
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 16e:	84 ea       	ldi	r24, 0xA4	; 164
 170:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT)));
 174:	ec eb       	ldi	r30, 0xBC	; 188
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	88 23       	and	r24, r24
 17c:	ec f7       	brge	.-6      	; 0x178 <_ZN3i2c5startEv+0xa>
}
 17e:	08 95       	ret

00000180 <_ZN3i2c4stopEv>:
// METHOD : stop
// DESCR. : sends the stop command on the i2c interface.
//=============================================================
void i2c::stop()
{
	TWCR = (1 << TWINT) | (1 << TWEN ) | (1<<TWSTO);
 180:	84 e9       	ldi	r24, 0x94	; 148
 182:	80 93 bc 00 	sts	0x00BC, r24
};
 186:	08 95       	ret

00000188 <_ZN3i2c5writeEh>:
// METHOD : write
// DESCR. : writes a single byte of data to the i2c interface.
//=============================================================
void i2c::write(unsigned char data)
{
	TWDR = data;
 188:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<< TWINT) | (1<<TWEN);
 18c:	84 e8       	ldi	r24, 0x84	; 132
 18e:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT)));
 192:	ec eb       	ldi	r30, 0xBC	; 188
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	88 23       	and	r24, r24
 19a:	ec f7       	brge	.-6      	; 0x196 <_ZN3i2c5writeEh+0xe>
	
};
 19c:	08 95       	ret

0000019e <_ZN3i2c4readEb>:
// DESCR. : reads 1 byte of data from the i2c interface
// and transmits the ack, if it is not the last byte to be read.
//=============================================================
unsigned char i2c::read(bool isLast)
{
	if ( isLast == 0)
 19e:	66 23       	and	r22, r22
 1a0:	21 f4       	brne	.+8      	; 0x1aa <_ZN3i2c4readEb+0xc>
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 1a2:	84 ec       	ldi	r24, 0xC4	; 196
 1a4:	80 93 bc 00 	sts	0x00BC, r24
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <_ZN3i2c4readEb+0x12>
	else
		TWCR = (1<<TWINT) | (1<<TWEN);
 1aa:	84 e8       	ldi	r24, 0x84	; 132
 1ac:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1 <<TWINT)) == 0);
 1b0:	ec eb       	ldi	r30, 0xBC	; 188
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	88 23       	and	r24, r24
 1b8:	ec f7       	brge	.-6      	; 0x1b4 <_ZN3i2c4readEb+0x16>
	return TWDR;
 1ba:	80 91 bb 00 	lds	r24, 0x00BB
 1be:	08 95       	ret

000001c0 <main>:
#include <avr/io.h>
#include "i2c/i2c.h"
#include "RTC/rtc.h"
#include "UART/uart.h"
int main(void)
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	0f 92       	push	r0
 1c6:	0f 92       	push	r0
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
	InitUART(9600, 8, 0);
 1cc:	60 e8       	ldi	r22, 0x80	; 128
 1ce:	75 e2       	ldi	r23, 0x25	; 37
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	48 e0       	ldi	r20, 0x08	; 8
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	0e 94 69 04 	call	0x8d2	; 0x8d2 <_Z8InitUARTmhc>
    rtc RTC_obj(0xD0, 400);
 1dc:	ce 01       	movw	r24, r28
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	60 ed       	ldi	r22, 0xD0	; 208
 1e2:	40 e9       	ldi	r20, 0x90	; 144
 1e4:	51 e0       	ldi	r21, 0x01	; 1
 1e6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_ZN3rtcC1Ehi>
    RTC_obj.setTime(14, 37, 0);
 1ea:	ce 01       	movw	r24, r28
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	6e e0       	ldi	r22, 0x0E	; 14
 1f0:	45 e2       	ldi	r20, 0x25	; 37
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN3rtc7setTimeEhhh>
    RTC_obj.setDate(18, 5, 16, 3);
 1f8:	ce 01       	movw	r24, r28
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	62 e1       	ldi	r22, 0x12	; 18
 1fe:	45 e0       	ldi	r20, 0x05	; 5
 200:	20 e1       	ldi	r18, 0x10	; 16
 202:	03 e0       	ldi	r16, 0x03	; 3
 204:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN3rtc7setDateEhhhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	93 ec       	ldi	r25, 0xC3	; 195
 20c:	a9 e0       	ldi	r26, 0x09	; 9
 20e:	81 50       	subi	r24, 0x01	; 1
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	a0 40       	sbci	r26, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <main+0x4e>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x58>
 218:	00 00       	nop
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	93 ec       	ldi	r25, 0xC3	; 195
 21e:	a9 e0       	ldi	r26, 0x09	; 9
 220:	81 50       	subi	r24, 0x01	; 1
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	a0 40       	sbci	r26, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0x60>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x6a>
 22a:	00 00       	nop
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	93 ec       	ldi	r25, 0xC3	; 195
 230:	a9 e0       	ldi	r26, 0x09	; 9
 232:	81 50       	subi	r24, 0x01	; 1
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	a0 40       	sbci	r26, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0x72>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x7c>
 23c:	00 00       	nop
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	93 ec       	ldi	r25, 0xC3	; 195
 242:	a9 e0       	ldi	r26, 0x09	; 9
 244:	81 50       	subi	r24, 0x01	; 1
 246:	90 40       	sbci	r25, 0x00	; 0
 248:	a0 40       	sbci	r26, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <main+0x84>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0x8e>
 24e:	00 00       	nop
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	93 ec       	ldi	r25, 0xC3	; 195
 254:	a9 e0       	ldi	r26, 0x09	; 9
 256:	81 50       	subi	r24, 0x01	; 1
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	a0 40       	sbci	r26, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x96>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0xa0>
 260:	00 00       	nop
	_delay_ms(200);
	_delay_ms(200);
	_delay_ms(200);
	while(1)
    {
		SendChar(RTC_obj.getYear());
 262:	ce 01       	movw	r24, r28
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN3rtc7getYearEv>
 26a:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z8SendCharc>
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	93 ec       	ldi	r25, 0xC3	; 195
 272:	a9 e0       	ldi	r26, 0x09	; 9
 274:	81 50       	subi	r24, 0x01	; 1
 276:	90 40       	sbci	r25, 0x00	; 0
 278:	a0 40       	sbci	r26, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <main+0xb4>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0xbe>
 27e:	00 00       	nop
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	93 ec       	ldi	r25, 0xC3	; 195
 284:	a9 e0       	ldi	r26, 0x09	; 9
 286:	81 50       	subi	r24, 0x01	; 1
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	a0 40       	sbci	r26, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <main+0xc6>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0xd0>
 290:	00 00       	nop
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	93 ec       	ldi	r25, 0xC3	; 195
 296:	a9 e0       	ldi	r26, 0x09	; 9
 298:	81 50       	subi	r24, 0x01	; 1
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	a0 40       	sbci	r26, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <main+0xd8>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <main+0xe2>
 2a2:	00 00       	nop
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	93 ec       	ldi	r25, 0xC3	; 195
 2a8:	a9 e0       	ldi	r26, 0x09	; 9
 2aa:	81 50       	subi	r24, 0x01	; 1
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	a0 40       	sbci	r26, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <main+0xea>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0xf4>
 2b4:	00 00       	nop
		_delay_ms(200);
		_delay_ms(200);
		_delay_ms(200);
		_delay_ms(200);
		SendChar(RTC_obj.getMonth());
 2b6:	ce 01       	movw	r24, r28
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	0e 94 68 03 	call	0x6d0	; 0x6d0 <_ZN3rtc8getMonthEv>
 2be:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z8SendCharc>
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	93 ec       	ldi	r25, 0xC3	; 195
 2c6:	a9 e0       	ldi	r26, 0x09	; 9
 2c8:	81 50       	subi	r24, 0x01	; 1
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	a0 40       	sbci	r26, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <main+0x108>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <main+0x112>
 2d2:	00 00       	nop
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	93 ec       	ldi	r25, 0xC3	; 195
 2d8:	a9 e0       	ldi	r26, 0x09	; 9
 2da:	81 50       	subi	r24, 0x01	; 1
 2dc:	90 40       	sbci	r25, 0x00	; 0
 2de:	a0 40       	sbci	r26, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <main+0x11a>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0x124>
 2e4:	00 00       	nop
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	93 ec       	ldi	r25, 0xC3	; 195
 2ea:	a9 e0       	ldi	r26, 0x09	; 9
 2ec:	81 50       	subi	r24, 0x01	; 1
 2ee:	90 40       	sbci	r25, 0x00	; 0
 2f0:	a0 40       	sbci	r26, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <main+0x12c>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <main+0x136>
 2f6:	00 00       	nop
 2f8:	8f ef       	ldi	r24, 0xFF	; 255
 2fa:	93 ec       	ldi	r25, 0xC3	; 195
 2fc:	a9 e0       	ldi	r26, 0x09	; 9
 2fe:	81 50       	subi	r24, 0x01	; 1
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	a0 40       	sbci	r26, 0x00	; 0
 304:	e1 f7       	brne	.-8      	; 0x2fe <main+0x13e>
 306:	00 c0       	rjmp	.+0      	; 0x308 <main+0x148>
 308:	00 00       	nop
		_delay_ms(200);
		_delay_ms(200);
		_delay_ms(200);
		_delay_ms(200);
		SendChar(RTC_obj.getDate());
 30a:	ce 01       	movw	r24, r28
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	0e 94 9b 03 	call	0x736	; 0x736 <_ZN3rtc7getDateEv>
 312:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z8SendCharc>
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	93 ec       	ldi	r25, 0xC3	; 195
 31a:	a9 e0       	ldi	r26, 0x09	; 9
 31c:	81 50       	subi	r24, 0x01	; 1
 31e:	90 40       	sbci	r25, 0x00	; 0
 320:	a0 40       	sbci	r26, 0x00	; 0
 322:	e1 f7       	brne	.-8      	; 0x31c <main+0x15c>
 324:	00 c0       	rjmp	.+0      	; 0x326 <main+0x166>
 326:	00 00       	nop
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	93 ec       	ldi	r25, 0xC3	; 195
 32c:	a9 e0       	ldi	r26, 0x09	; 9
 32e:	81 50       	subi	r24, 0x01	; 1
 330:	90 40       	sbci	r25, 0x00	; 0
 332:	a0 40       	sbci	r26, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <main+0x16e>
 336:	00 c0       	rjmp	.+0      	; 0x338 <main+0x178>
 338:	00 00       	nop
 33a:	8f ef       	ldi	r24, 0xFF	; 255
 33c:	93 ec       	ldi	r25, 0xC3	; 195
 33e:	a9 e0       	ldi	r26, 0x09	; 9
 340:	81 50       	subi	r24, 0x01	; 1
 342:	90 40       	sbci	r25, 0x00	; 0
 344:	a0 40       	sbci	r26, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <main+0x180>
 348:	00 c0       	rjmp	.+0      	; 0x34a <main+0x18a>
 34a:	00 00       	nop
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	93 ec       	ldi	r25, 0xC3	; 195
 350:	a9 e0       	ldi	r26, 0x09	; 9
 352:	81 50       	subi	r24, 0x01	; 1
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	a0 40       	sbci	r26, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <main+0x192>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0x19c>
 35c:	00 00       	nop
		_delay_ms(200);
		_delay_ms(200);
		_delay_ms(200);
		_delay_ms(200);
		SendChar(RTC_obj.getDayOfWeek());
 35e:	ce 01       	movw	r24, r28
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	0e 94 6f 02 	call	0x4de	; 0x4de <_ZN3rtc12getDayOfWeekEv>
 366:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z8SendCharc>
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	93 ec       	ldi	r25, 0xC3	; 195
 36e:	a9 e0       	ldi	r26, 0x09	; 9
 370:	81 50       	subi	r24, 0x01	; 1
 372:	90 40       	sbci	r25, 0x00	; 0
 374:	a0 40       	sbci	r26, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <main+0x1b0>
 378:	00 c0       	rjmp	.+0      	; 0x37a <main+0x1ba>
 37a:	00 00       	nop
 37c:	8f ef       	ldi	r24, 0xFF	; 255
 37e:	93 ec       	ldi	r25, 0xC3	; 195
 380:	a9 e0       	ldi	r26, 0x09	; 9
 382:	81 50       	subi	r24, 0x01	; 1
 384:	90 40       	sbci	r25, 0x00	; 0
 386:	a0 40       	sbci	r26, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <main+0x1c2>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <main+0x1cc>
 38c:	00 00       	nop
 38e:	8f ef       	ldi	r24, 0xFF	; 255
 390:	93 ec       	ldi	r25, 0xC3	; 195
 392:	a9 e0       	ldi	r26, 0x09	; 9
 394:	81 50       	subi	r24, 0x01	; 1
 396:	90 40       	sbci	r25, 0x00	; 0
 398:	a0 40       	sbci	r26, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <main+0x1d4>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0x1de>
 39e:	00 00       	nop
 3a0:	8f ef       	ldi	r24, 0xFF	; 255
 3a2:	93 ec       	ldi	r25, 0xC3	; 195
 3a4:	a9 e0       	ldi	r26, 0x09	; 9
 3a6:	81 50       	subi	r24, 0x01	; 1
 3a8:	90 40       	sbci	r25, 0x00	; 0
 3aa:	a0 40       	sbci	r26, 0x00	; 0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <main+0x1e6>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <main+0x1f0>
 3b0:	00 00       	nop
		_delay_ms(200);
		_delay_ms(200);
		_delay_ms(200);
		_delay_ms(200);
		SendChar(RTC_obj.getHours());
 3b2:	ce 01       	movw	r24, r28
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	0e 94 34 04 	call	0x868	; 0x868 <_ZN3rtc8getHoursEv>
 3ba:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z8SendCharc>
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	93 ec       	ldi	r25, 0xC3	; 195
 3c2:	a9 e0       	ldi	r26, 0x09	; 9
 3c4:	81 50       	subi	r24, 0x01	; 1
 3c6:	90 40       	sbci	r25, 0x00	; 0
 3c8:	a0 40       	sbci	r26, 0x00	; 0
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <main+0x204>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <main+0x20e>
 3ce:	00 00       	nop
 3d0:	8f ef       	ldi	r24, 0xFF	; 255
 3d2:	93 ec       	ldi	r25, 0xC3	; 195
 3d4:	a9 e0       	ldi	r26, 0x09	; 9
 3d6:	81 50       	subi	r24, 0x01	; 1
 3d8:	90 40       	sbci	r25, 0x00	; 0
 3da:	a0 40       	sbci	r26, 0x00	; 0
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x216>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <main+0x220>
 3e0:	00 00       	nop
 3e2:	8f ef       	ldi	r24, 0xFF	; 255
 3e4:	93 ec       	ldi	r25, 0xC3	; 195
 3e6:	a9 e0       	ldi	r26, 0x09	; 9
 3e8:	81 50       	subi	r24, 0x01	; 1
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	a0 40       	sbci	r26, 0x00	; 0
 3ee:	e1 f7       	brne	.-8      	; 0x3e8 <main+0x228>
 3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <main+0x232>
 3f2:	00 00       	nop
 3f4:	8f ef       	ldi	r24, 0xFF	; 255
 3f6:	93 ec       	ldi	r25, 0xC3	; 195
 3f8:	a9 e0       	ldi	r26, 0x09	; 9
 3fa:	81 50       	subi	r24, 0x01	; 1
 3fc:	90 40       	sbci	r25, 0x00	; 0
 3fe:	a0 40       	sbci	r26, 0x00	; 0
 400:	e1 f7       	brne	.-8      	; 0x3fa <main+0x23a>
 402:	00 c0       	rjmp	.+0      	; 0x404 <main+0x244>
 404:	00 00       	nop
		_delay_ms(200);
		_delay_ms(200);
		_delay_ms(200);
		_delay_ms(200);
		SendChar(RTC_obj.getMinuts());
 406:	ce 01       	movw	r24, r28
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	0e 94 01 04 	call	0x802	; 0x802 <_ZN3rtc9getMinutsEv>
 40e:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z8SendCharc>
 412:	8f ef       	ldi	r24, 0xFF	; 255
 414:	93 ec       	ldi	r25, 0xC3	; 195
 416:	a9 e0       	ldi	r26, 0x09	; 9
 418:	81 50       	subi	r24, 0x01	; 1
 41a:	90 40       	sbci	r25, 0x00	; 0
 41c:	a0 40       	sbci	r26, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <main+0x258>
 420:	00 c0       	rjmp	.+0      	; 0x422 <main+0x262>
 422:	00 00       	nop
 424:	8f ef       	ldi	r24, 0xFF	; 255
 426:	93 ec       	ldi	r25, 0xC3	; 195
 428:	a9 e0       	ldi	r26, 0x09	; 9
 42a:	81 50       	subi	r24, 0x01	; 1
 42c:	90 40       	sbci	r25, 0x00	; 0
 42e:	a0 40       	sbci	r26, 0x00	; 0
 430:	e1 f7       	brne	.-8      	; 0x42a <main+0x26a>
 432:	00 c0       	rjmp	.+0      	; 0x434 <main+0x274>
 434:	00 00       	nop
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	93 ec       	ldi	r25, 0xC3	; 195
 43a:	a9 e0       	ldi	r26, 0x09	; 9
 43c:	81 50       	subi	r24, 0x01	; 1
 43e:	90 40       	sbci	r25, 0x00	; 0
 440:	a0 40       	sbci	r26, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <main+0x27c>
 444:	00 c0       	rjmp	.+0      	; 0x446 <main+0x286>
 446:	00 00       	nop
 448:	8f ef       	ldi	r24, 0xFF	; 255
 44a:	93 ec       	ldi	r25, 0xC3	; 195
 44c:	a9 e0       	ldi	r26, 0x09	; 9
 44e:	81 50       	subi	r24, 0x01	; 1
 450:	90 40       	sbci	r25, 0x00	; 0
 452:	a0 40       	sbci	r26, 0x00	; 0
 454:	e1 f7       	brne	.-8      	; 0x44e <main+0x28e>
 456:	00 c0       	rjmp	.+0      	; 0x458 <main+0x298>
 458:	00 00       	nop
 45a:	8f ef       	ldi	r24, 0xFF	; 255
 45c:	93 ec       	ldi	r25, 0xC3	; 195
 45e:	a9 e0       	ldi	r26, 0x09	; 9
 460:	81 50       	subi	r24, 0x01	; 1
 462:	90 40       	sbci	r25, 0x00	; 0
 464:	a0 40       	sbci	r26, 0x00	; 0
 466:	e1 f7       	brne	.-8      	; 0x460 <main+0x2a0>
 468:	00 c0       	rjmp	.+0      	; 0x46a <main+0x2aa>
 46a:	00 00       	nop
		_delay_ms(200);
		_delay_ms(200);
		_delay_ms(200);
		_delay_ms(200);
		_delay_ms(200);
		SendChar(RTC_obj.GetSeconds());
 46c:	ce 01       	movw	r24, r28
 46e:	01 96       	adiw	r24, 0x01	; 1
 470:	0e 94 ce 03 	call	0x79c	; 0x79c <_ZN3rtc10GetSecondsEv>
 474:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z8SendCharc>
 478:	8f ef       	ldi	r24, 0xFF	; 255
 47a:	93 ec       	ldi	r25, 0xC3	; 195
 47c:	a9 e0       	ldi	r26, 0x09	; 9
 47e:	81 50       	subi	r24, 0x01	; 1
 480:	90 40       	sbci	r25, 0x00	; 0
 482:	a0 40       	sbci	r26, 0x00	; 0
 484:	e1 f7       	brne	.-8      	; 0x47e <main+0x2be>
 486:	00 c0       	rjmp	.+0      	; 0x488 <main+0x2c8>
 488:	00 00       	nop
 48a:	8f ef       	ldi	r24, 0xFF	; 255
 48c:	93 ec       	ldi	r25, 0xC3	; 195
 48e:	a9 e0       	ldi	r26, 0x09	; 9
 490:	81 50       	subi	r24, 0x01	; 1
 492:	90 40       	sbci	r25, 0x00	; 0
 494:	a0 40       	sbci	r26, 0x00	; 0
 496:	e1 f7       	brne	.-8      	; 0x490 <main+0x2d0>
 498:	00 c0       	rjmp	.+0      	; 0x49a <main+0x2da>
 49a:	00 00       	nop
 49c:	8f ef       	ldi	r24, 0xFF	; 255
 49e:	93 ec       	ldi	r25, 0xC3	; 195
 4a0:	a9 e0       	ldi	r26, 0x09	; 9
 4a2:	81 50       	subi	r24, 0x01	; 1
 4a4:	90 40       	sbci	r25, 0x00	; 0
 4a6:	a0 40       	sbci	r26, 0x00	; 0
 4a8:	e1 f7       	brne	.-8      	; 0x4a2 <main+0x2e2>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <main+0x2ec>
 4ac:	00 00       	nop
 4ae:	8f ef       	ldi	r24, 0xFF	; 255
 4b0:	93 ec       	ldi	r25, 0xC3	; 195
 4b2:	a9 e0       	ldi	r26, 0x09	; 9
 4b4:	81 50       	subi	r24, 0x01	; 1
 4b6:	90 40       	sbci	r25, 0x00	; 0
 4b8:	a0 40       	sbci	r26, 0x00	; 0
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <main+0x2f4>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <main+0x2fe>
 4be:	00 00       	nop
 4c0:	d0 ce       	rjmp	.-608    	; 0x262 <main+0xa2>

000004c2 <_ZN3rtcC1Ehi>:
// METHOD : rtc
// DESCR. : constructor that initiates the rtc module and sets the adress to adress,
// as well as initializing the i2c to a requested frequency which must be either 100 
// or 400 kHz
//=============================================================
rtc::rtc(unsigned char adress, int clock) : i2c_obj(1, clock)
 4c2:	1f 93       	push	r17
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	ec 01       	movw	r28, r24
 4ca:	16 2f       	mov	r17, r22
 4cc:	01 96       	adiw	r24, 0x01	; 1
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN3i2cC1Ebi>
{
	 this->adress = adress;
 4d4:	18 83       	st	Y, r17
}
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	08 95       	ret

000004de <_ZN3rtc12getDayOfWeekEv>:
//=============================================================
// METHOD : getDayOfWeek
// DESCR. : returns current Day of the week from the RTC module
//=============================================================
int rtc::getDayOfWeek()
{
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	8c 01       	movw	r16, r24
	i2c_obj.start();
 4e8:	ec 01       	movw	r28, r24
 4ea:	21 96       	adiw	r28, 0x01	; 1
 4ec:	ce 01       	movw	r24, r28
 4ee:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN3i2c5startEv>
	i2c_obj.write(this->adress & 0xFE);
 4f2:	f8 01       	movw	r30, r16
 4f4:	60 81       	ld	r22, Z
 4f6:	6e 7f       	andi	r22, 0xFE	; 254
 4f8:	ce 01       	movw	r24, r28
 4fa:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.write(0x03);
 4fe:	ce 01       	movw	r24, r28
 500:	63 e0       	ldi	r22, 0x03	; 3
 502:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.stop();
 506:	ce 01       	movw	r24, r28
 508:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN3i2c4stopEv>
		
	i2c_obj.start();
 50c:	ce 01       	movw	r24, r28
 50e:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN3i2c5startEv>
	i2c_obj.write(this->adress | 0x01);
 512:	f8 01       	movw	r30, r16
 514:	60 81       	ld	r22, Z
 516:	61 60       	ori	r22, 0x01	; 1
 518:	ce 01       	movw	r24, r28
 51a:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	unsigned char currentDay = i2c_obj.read(1);
 51e:	ce 01       	movw	r24, r28
 520:	61 e0       	ldi	r22, 0x01	; 1
 522:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN3i2c4readEb>
 526:	08 2f       	mov	r16, r24
	i2c_obj.stop();
 528:	ce 01       	movw	r24, r28
 52a:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN3i2c4stopEv>
		
	return currentDay;
}
 52e:	80 2f       	mov	r24, r16
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	1f 91       	pop	r17
 538:	0f 91       	pop	r16
 53a:	08 95       	ret

0000053c <_ZN3rtc8intToBCDEh>:
//=============================================================
// METHOD : intToBCD
// DESCR. : converts an 8 bit unsigned value to the binary coded decimal format
//=============================================================
unsigned char rtc::intToBCD( unsigned char val )
{
 53c:	86 2f       	mov	r24, r22
	unsigned char tens = val/10 << 4;
 53e:	6a e0       	ldi	r22, 0x0A	; 10
 540:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__udivmodqi4>
 544:	82 95       	swap	r24
 546:	80 7f       	andi	r24, 0xF0	; 240
	unsigned char ones = val % 10;
	return tens + ones;
}
 548:	89 0f       	add	r24, r25
 54a:	08 95       	ret

0000054c <_ZN3rtc7setDateEhhhh>:
//=============================================================
// METHOD : setTime
// DESCR. : sets up the RTC to the date info passed through as parameters.
//=============================================================
void rtc::setDate( unsigned char date, unsigned char month, unsigned char year, unsigned char dayOfWeek )
{
 54c:	cf 92       	push	r12
 54e:	df 92       	push	r13
 550:	ef 92       	push	r14
 552:	ff 92       	push	r15
 554:	0f 93       	push	r16
 556:	1f 93       	push	r17
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	7c 01       	movw	r14, r24
 55e:	16 2f       	mov	r17, r22
 560:	d4 2e       	mov	r13, r20
 562:	c2 2e       	mov	r12, r18
	i2c_obj.start();
 564:	ec 01       	movw	r28, r24
 566:	21 96       	adiw	r28, 0x01	; 1
 568:	ce 01       	movw	r24, r28
 56a:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN3i2c5startEv>
	i2c_obj.write(this->adress & 0xFE);
 56e:	f7 01       	movw	r30, r14
 570:	60 81       	ld	r22, Z
 572:	6e 7f       	andi	r22, 0xFE	; 254
 574:	ce 01       	movw	r24, r28
 576:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.write(0x03);
 57a:	ce 01       	movw	r24, r28
 57c:	63 e0       	ldi	r22, 0x03	; 3
 57e:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.write(dayOfWeek);
 582:	ce 01       	movw	r24, r28
 584:	60 2f       	mov	r22, r16
 586:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.write(this->intToBCD(date));
 58a:	c7 01       	movw	r24, r14
 58c:	61 2f       	mov	r22, r17
 58e:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN3rtc8intToBCDEh>
 592:	68 2f       	mov	r22, r24
 594:	ce 01       	movw	r24, r28
 596:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.write(this->intToBCD(month));
 59a:	c7 01       	movw	r24, r14
 59c:	6d 2d       	mov	r22, r13
 59e:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN3rtc8intToBCDEh>
 5a2:	68 2f       	mov	r22, r24
 5a4:	ce 01       	movw	r24, r28
 5a6:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.write(this->intToBCD(year));
 5aa:	c7 01       	movw	r24, r14
 5ac:	6c 2d       	mov	r22, r12
 5ae:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN3rtc8intToBCDEh>
 5b2:	68 2f       	mov	r22, r24
 5b4:	ce 01       	movw	r24, r28
 5b6:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.stop();
 5ba:	ce 01       	movw	r24, r28
 5bc:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN3i2c4stopEv>
}
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	1f 91       	pop	r17
 5c6:	0f 91       	pop	r16
 5c8:	ff 90       	pop	r15
 5ca:	ef 90       	pop	r14
 5cc:	df 90       	pop	r13
 5ce:	cf 90       	pop	r12
 5d0:	08 95       	ret

000005d2 <_ZN3rtc7setTimeEhhh>:
//=============================================================
// METHOD : setTime
// DESCR. : sets up the RTC to the time passed through as parameters
//=============================================================
void rtc::setTime( unsigned char hours, unsigned char minuts, unsigned char seconds )
{
 5d2:	df 92       	push	r13
 5d4:	ef 92       	push	r14
 5d6:	ff 92       	push	r15
 5d8:	0f 93       	push	r16
 5da:	1f 93       	push	r17
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	8c 01       	movw	r16, r24
 5e2:	f6 2e       	mov	r15, r22
 5e4:	d4 2e       	mov	r13, r20
 5e6:	e2 2e       	mov	r14, r18
	// to write set the direction bit to 0 
	// module adress is hard coded to 1101000 + direction bit
	i2c_obj.start();
 5e8:	ec 01       	movw	r28, r24
 5ea:	21 96       	adiw	r28, 0x01	; 1
 5ec:	ce 01       	movw	r24, r28
 5ee:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN3i2c5startEv>
	i2c_obj.write(this->adress & 0xFE);
 5f2:	f8 01       	movw	r30, r16
 5f4:	60 81       	ld	r22, Z
 5f6:	6e 7f       	andi	r22, 0xFE	; 254
 5f8:	ce 01       	movw	r24, r28
 5fa:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.write(0x00);
 5fe:	ce 01       	movw	r24, r28
 600:	60 e0       	ldi	r22, 0x00	; 0
 602:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.write(this->intToBCD(seconds));
 606:	c8 01       	movw	r24, r16
 608:	6e 2d       	mov	r22, r14
 60a:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN3rtc8intToBCDEh>
 60e:	68 2f       	mov	r22, r24
 610:	ce 01       	movw	r24, r28
 612:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.write(this->intToBCD(minuts));
 616:	c8 01       	movw	r24, r16
 618:	6d 2d       	mov	r22, r13
 61a:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN3rtc8intToBCDEh>
 61e:	68 2f       	mov	r22, r24
 620:	ce 01       	movw	r24, r28
 622:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.write((this->intToBCD(hours) | 0x40));
 626:	c8 01       	movw	r24, r16
 628:	6f 2d       	mov	r22, r15
 62a:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN3rtc8intToBCDEh>
 62e:	68 2f       	mov	r22, r24
 630:	60 64       	ori	r22, 0x40	; 64
 632:	ce 01       	movw	r24, r28
 634:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.stop();
 638:	ce 01       	movw	r24, r28
 63a:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN3i2c4stopEv>
}
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	1f 91       	pop	r17
 644:	0f 91       	pop	r16
 646:	ff 90       	pop	r15
 648:	ef 90       	pop	r14
 64a:	df 90       	pop	r13
 64c:	08 95       	ret

0000064e <_ZN3rtc8bcdToIntEh>:
// METHOD : bcdToInt
// DESCR. : converts from 8 bit binary coded decimal to int.
//=============================================================
int rtc::bcdToInt( unsigned char BCDval )
{
	unsigned char ones = (BCDval & 0x0F);
 64e:	26 2f       	mov	r18, r22
 650:	2f 70       	andi	r18, 0x0F	; 15
	unsigned char tens = ((BCDval & 0xF0) >> 4)*10;
 652:	62 95       	swap	r22
 654:	6f 70       	andi	r22, 0x0F	; 15
 656:	66 0f       	add	r22, r22
 658:	86 2f       	mov	r24, r22
 65a:	88 0f       	add	r24, r24
 65c:	88 0f       	add	r24, r24
 65e:	68 0f       	add	r22, r24
	return ones + tens;
 660:	86 2f       	mov	r24, r22
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	82 0f       	add	r24, r18
 666:	91 1d       	adc	r25, r1
}
 668:	08 95       	ret

0000066a <_ZN3rtc7getYearEv>:
//=============================================================
// METHOD : getYear
// DESCR. : returns current Year from the RTC module
//=============================================================
int rtc::getYear()
{
 66a:	ff 92       	push	r15
 66c:	0f 93       	push	r16
 66e:	1f 93       	push	r17
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	8c 01       	movw	r16, r24
	i2c_obj.start();
 676:	ec 01       	movw	r28, r24
 678:	21 96       	adiw	r28, 0x01	; 1
 67a:	ce 01       	movw	r24, r28
 67c:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN3i2c5startEv>
	i2c_obj.write(this->adress & 0xFE);
 680:	f8 01       	movw	r30, r16
 682:	60 81       	ld	r22, Z
 684:	6e 7f       	andi	r22, 0xFE	; 254
 686:	ce 01       	movw	r24, r28
 688:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.write(0x06);
 68c:	ce 01       	movw	r24, r28
 68e:	66 e0       	ldi	r22, 0x06	; 6
 690:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.stop();
 694:	ce 01       	movw	r24, r28
 696:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN3i2c4stopEv>
		
	i2c_obj.start();
 69a:	ce 01       	movw	r24, r28
 69c:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN3i2c5startEv>
	i2c_obj.write(this->adress | 0x01);
 6a0:	f8 01       	movw	r30, r16
 6a2:	60 81       	ld	r22, Z
 6a4:	61 60       	ori	r22, 0x01	; 1
 6a6:	ce 01       	movw	r24, r28
 6a8:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	unsigned char currentYear = i2c_obj.read(1);
 6ac:	ce 01       	movw	r24, r28
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN3i2c4readEb>
 6b4:	f8 2e       	mov	r15, r24
	i2c_obj.stop();
 6b6:	ce 01       	movw	r24, r28
 6b8:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN3i2c4stopEv>
		
	return bcdToInt(currentYear);
 6bc:	c8 01       	movw	r24, r16
 6be:	6f 2d       	mov	r22, r15
 6c0:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN3rtc8bcdToIntEh>
}
 6c4:	df 91       	pop	r29
 6c6:	cf 91       	pop	r28
 6c8:	1f 91       	pop	r17
 6ca:	0f 91       	pop	r16
 6cc:	ff 90       	pop	r15
 6ce:	08 95       	ret

000006d0 <_ZN3rtc8getMonthEv>:
//=============================================================
// METHOD : getMonth
// DESCR. : returns current month from the RTC module
//=============================================================
int rtc::getMonth()
{
 6d0:	ff 92       	push	r15
 6d2:	0f 93       	push	r16
 6d4:	1f 93       	push	r17
 6d6:	cf 93       	push	r28
 6d8:	df 93       	push	r29
 6da:	8c 01       	movw	r16, r24
	i2c_obj.start();
 6dc:	ec 01       	movw	r28, r24
 6de:	21 96       	adiw	r28, 0x01	; 1
 6e0:	ce 01       	movw	r24, r28
 6e2:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN3i2c5startEv>
	i2c_obj.write(this->adress & 0xFE);
 6e6:	f8 01       	movw	r30, r16
 6e8:	60 81       	ld	r22, Z
 6ea:	6e 7f       	andi	r22, 0xFE	; 254
 6ec:	ce 01       	movw	r24, r28
 6ee:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.write(0x05);
 6f2:	ce 01       	movw	r24, r28
 6f4:	65 e0       	ldi	r22, 0x05	; 5
 6f6:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.stop();
 6fa:	ce 01       	movw	r24, r28
 6fc:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN3i2c4stopEv>
		
	i2c_obj.start();
 700:	ce 01       	movw	r24, r28
 702:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN3i2c5startEv>
	i2c_obj.write(this->adress | 0x01);
 706:	f8 01       	movw	r30, r16
 708:	60 81       	ld	r22, Z
 70a:	61 60       	ori	r22, 0x01	; 1
 70c:	ce 01       	movw	r24, r28
 70e:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	unsigned char currentMonth = i2c_obj.read(1);
 712:	ce 01       	movw	r24, r28
 714:	61 e0       	ldi	r22, 0x01	; 1
 716:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN3i2c4readEb>
 71a:	f8 2e       	mov	r15, r24
	i2c_obj.stop();
 71c:	ce 01       	movw	r24, r28
 71e:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN3i2c4stopEv>
		
	return bcdToInt(currentMonth);
 722:	c8 01       	movw	r24, r16
 724:	6f 2d       	mov	r22, r15
 726:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN3rtc8bcdToIntEh>
}
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	1f 91       	pop	r17
 730:	0f 91       	pop	r16
 732:	ff 90       	pop	r15
 734:	08 95       	ret

00000736 <_ZN3rtc7getDateEv>:
//=============================================================
// METHOD : getDate
// DESCR. : returns current minuts from the RTC module
//=============================================================
int rtc::getDate()
{
 736:	ff 92       	push	r15
 738:	0f 93       	push	r16
 73a:	1f 93       	push	r17
 73c:	cf 93       	push	r28
 73e:	df 93       	push	r29
 740:	8c 01       	movw	r16, r24
	i2c_obj.start();
 742:	ec 01       	movw	r28, r24
 744:	21 96       	adiw	r28, 0x01	; 1
 746:	ce 01       	movw	r24, r28
 748:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN3i2c5startEv>
	i2c_obj.write(this->adress & 0xFE);
 74c:	f8 01       	movw	r30, r16
 74e:	60 81       	ld	r22, Z
 750:	6e 7f       	andi	r22, 0xFE	; 254
 752:	ce 01       	movw	r24, r28
 754:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.write(0x04);
 758:	ce 01       	movw	r24, r28
 75a:	64 e0       	ldi	r22, 0x04	; 4
 75c:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.stop();
 760:	ce 01       	movw	r24, r28
 762:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN3i2c4stopEv>
		
	i2c_obj.start();
 766:	ce 01       	movw	r24, r28
 768:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN3i2c5startEv>
	i2c_obj.write(this->adress | 0x01);
 76c:	f8 01       	movw	r30, r16
 76e:	60 81       	ld	r22, Z
 770:	61 60       	ori	r22, 0x01	; 1
 772:	ce 01       	movw	r24, r28
 774:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	unsigned char currentDate = i2c_obj.read(1);
 778:	ce 01       	movw	r24, r28
 77a:	61 e0       	ldi	r22, 0x01	; 1
 77c:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN3i2c4readEb>
 780:	f8 2e       	mov	r15, r24
	i2c_obj.stop();
 782:	ce 01       	movw	r24, r28
 784:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN3i2c4stopEv>
		
	return bcdToInt(currentDate);
 788:	c8 01       	movw	r24, r16
 78a:	6f 2d       	mov	r22, r15
 78c:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN3rtc8bcdToIntEh>
}
 790:	df 91       	pop	r29
 792:	cf 91       	pop	r28
 794:	1f 91       	pop	r17
 796:	0f 91       	pop	r16
 798:	ff 90       	pop	r15
 79a:	08 95       	ret

0000079c <_ZN3rtc10GetSecondsEv>:
//=============================================================
// METHOD : getSeconds
// DESCR. : returns current seconds from the RTC module
//=============================================================
int rtc::GetSeconds()
{
 79c:	ff 92       	push	r15
 79e:	0f 93       	push	r16
 7a0:	1f 93       	push	r17
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	8c 01       	movw	r16, r24
	i2c_obj.start();
 7a8:	ec 01       	movw	r28, r24
 7aa:	21 96       	adiw	r28, 0x01	; 1
 7ac:	ce 01       	movw	r24, r28
 7ae:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN3i2c5startEv>
	i2c_obj.write(this->adress & 0xFE);
 7b2:	f8 01       	movw	r30, r16
 7b4:	60 81       	ld	r22, Z
 7b6:	6e 7f       	andi	r22, 0xFE	; 254
 7b8:	ce 01       	movw	r24, r28
 7ba:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.write(0x00);
 7be:	ce 01       	movw	r24, r28
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.stop();
 7c6:	ce 01       	movw	r24, r28
 7c8:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN3i2c4stopEv>
		
	i2c_obj.start();
 7cc:	ce 01       	movw	r24, r28
 7ce:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN3i2c5startEv>
	i2c_obj.write(this->adress | 0x01);
 7d2:	f8 01       	movw	r30, r16
 7d4:	60 81       	ld	r22, Z
 7d6:	61 60       	ori	r22, 0x01	; 1
 7d8:	ce 01       	movw	r24, r28
 7da:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	unsigned char currentSeconds = i2c_obj.read(1);
 7de:	ce 01       	movw	r24, r28
 7e0:	61 e0       	ldi	r22, 0x01	; 1
 7e2:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN3i2c4readEb>
 7e6:	f8 2e       	mov	r15, r24
	i2c_obj.stop();
 7e8:	ce 01       	movw	r24, r28
 7ea:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN3i2c4stopEv>
		
	return bcdToInt(currentSeconds);
 7ee:	c8 01       	movw	r24, r16
 7f0:	6f 2d       	mov	r22, r15
 7f2:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN3rtc8bcdToIntEh>
}
 7f6:	df 91       	pop	r29
 7f8:	cf 91       	pop	r28
 7fa:	1f 91       	pop	r17
 7fc:	0f 91       	pop	r16
 7fe:	ff 90       	pop	r15
 800:	08 95       	ret

00000802 <_ZN3rtc9getMinutsEv>:
//=============================================================
// METHOD : getMinuts
// DESCR. : returns current minuts from the RTC module
//=============================================================
int rtc::getMinuts()
{
 802:	ff 92       	push	r15
 804:	0f 93       	push	r16
 806:	1f 93       	push	r17
 808:	cf 93       	push	r28
 80a:	df 93       	push	r29
 80c:	8c 01       	movw	r16, r24
	i2c_obj.start();
 80e:	ec 01       	movw	r28, r24
 810:	21 96       	adiw	r28, 0x01	; 1
 812:	ce 01       	movw	r24, r28
 814:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN3i2c5startEv>
	i2c_obj.write(this->adress & 0xFE);
 818:	f8 01       	movw	r30, r16
 81a:	60 81       	ld	r22, Z
 81c:	6e 7f       	andi	r22, 0xFE	; 254
 81e:	ce 01       	movw	r24, r28
 820:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.write(0x01);
 824:	ce 01       	movw	r24, r28
 826:	61 e0       	ldi	r22, 0x01	; 1
 828:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.stop();
 82c:	ce 01       	movw	r24, r28
 82e:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN3i2c4stopEv>
		
	i2c_obj.start();
 832:	ce 01       	movw	r24, r28
 834:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN3i2c5startEv>
	i2c_obj.write(this->adress | 0x01);
 838:	f8 01       	movw	r30, r16
 83a:	60 81       	ld	r22, Z
 83c:	61 60       	ori	r22, 0x01	; 1
 83e:	ce 01       	movw	r24, r28
 840:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	unsigned char currentMinuts = i2c_obj.read(1);
 844:	ce 01       	movw	r24, r28
 846:	61 e0       	ldi	r22, 0x01	; 1
 848:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN3i2c4readEb>
 84c:	f8 2e       	mov	r15, r24
	i2c_obj.stop();
 84e:	ce 01       	movw	r24, r28
 850:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN3i2c4stopEv>
		
	return bcdToInt(currentMinuts);
 854:	c8 01       	movw	r24, r16
 856:	6f 2d       	mov	r22, r15
 858:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN3rtc8bcdToIntEh>
}
 85c:	df 91       	pop	r29
 85e:	cf 91       	pop	r28
 860:	1f 91       	pop	r17
 862:	0f 91       	pop	r16
 864:	ff 90       	pop	r15
 866:	08 95       	ret

00000868 <_ZN3rtc8getHoursEv>:
//=============================================================
// METHOD : getHours
// DESCR. : returns current hours from the RTC module
//=============================================================
int rtc::getHours()
{
 868:	ef 92       	push	r14
 86a:	ff 92       	push	r15
 86c:	0f 93       	push	r16
 86e:	1f 93       	push	r17
 870:	cf 93       	push	r28
 872:	7c 01       	movw	r14, r24
	// to read set the direction bit to 1
	// module adress is hard coded to 1101000 + direction bit
	i2c_obj.start();
 874:	8c 01       	movw	r16, r24
 876:	0f 5f       	subi	r16, 0xFF	; 255
 878:	1f 4f       	sbci	r17, 0xFF	; 255
 87a:	c8 01       	movw	r24, r16
 87c:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN3i2c5startEv>
	i2c_obj.write(this->adress & 0xFE);
 880:	f7 01       	movw	r30, r14
 882:	60 81       	ld	r22, Z
 884:	6e 7f       	andi	r22, 0xFE	; 254
 886:	c8 01       	movw	r24, r16
 888:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.write(0x02);
 88c:	c8 01       	movw	r24, r16
 88e:	62 e0       	ldi	r22, 0x02	; 2
 890:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	i2c_obj.stop();
 894:	c8 01       	movw	r24, r16
 896:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN3i2c4stopEv>
	
	i2c_obj.start();
 89a:	c8 01       	movw	r24, r16
 89c:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN3i2c5startEv>
	i2c_obj.write(this->adress | 0x01);
 8a0:	f7 01       	movw	r30, r14
 8a2:	60 81       	ld	r22, Z
 8a4:	61 60       	ori	r22, 0x01	; 1
 8a6:	c8 01       	movw	r24, r16
 8a8:	0e 94 c4 00 	call	0x188	; 0x188 <_ZN3i2c5writeEh>
	unsigned char currentHours = i2c_obj.read(1);
 8ac:	c8 01       	movw	r24, r16
 8ae:	61 e0       	ldi	r22, 0x01	; 1
 8b0:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN3i2c4readEb>
 8b4:	c8 2f       	mov	r28, r24
	i2c_obj.stop();
 8b6:	c8 01       	movw	r24, r16
 8b8:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN3i2c4stopEv>
	
	currentHours = currentHours & 0xBF;
 8bc:	6c 2f       	mov	r22, r28
 8be:	6f 7b       	andi	r22, 0xBF	; 191
	return bcdToInt(currentHours);
 8c0:	c7 01       	movw	r24, r14
 8c2:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN3rtc8bcdToIntEh>
}
 8c6:	cf 91       	pop	r28
 8c8:	1f 91       	pop	r17
 8ca:	0f 91       	pop	r16
 8cc:	ff 90       	pop	r15
 8ce:	ef 90       	pop	r14
 8d0:	08 95       	ret

000008d2 <_Z8InitUARTmhc>:
Parameters:
	BaudRate: Wanted Baud Rate.
	Databits: Wanted number of Data Bits.
*************************************************************************/
void InitUART(unsigned long BaudRate, unsigned char DataBit, char Parity)
{
 8d2:	0f 93       	push	r16
 8d4:	1f 93       	push	r17
 8d6:	dc 01       	movw	r26, r24
 8d8:	cb 01       	movw	r24, r22
 8da:	52 2f       	mov	r21, r18
unsigned int TempUBRR;

  if ((BaudRate >= 110) && (BaudRate <= 115200) && (DataBit >=5) && (DataBit <= 8))
 8dc:	8c 01       	movw	r16, r24
 8de:	9d 01       	movw	r18, r26
 8e0:	0e 56       	subi	r16, 0x6E	; 110
 8e2:	10 40       	sbci	r17, 0x00	; 0
 8e4:	20 40       	sbci	r18, 0x00	; 0
 8e6:	30 40       	sbci	r19, 0x00	; 0
 8e8:	03 39       	cpi	r16, 0x93	; 147
 8ea:	61 ec       	ldi	r22, 0xC1	; 193
 8ec:	16 07       	cpc	r17, r22
 8ee:	61 e0       	ldi	r22, 0x01	; 1
 8f0:	26 07       	cpc	r18, r22
 8f2:	60 e0       	ldi	r22, 0x00	; 0
 8f4:	36 07       	cpc	r19, r22
 8f6:	d8 f5       	brcc	.+118    	; 0x96e <_Z8InitUARTmhc+0x9c>
 8f8:	45 30       	cpi	r20, 0x05	; 5
 8fa:	c8 f1       	brcs	.+114    	; 0x96e <_Z8InitUARTmhc+0x9c>
 8fc:	49 30       	cpi	r20, 0x09	; 9
 8fe:	b8 f5       	brcc	.+110    	; 0x96e <_Z8InitUARTmhc+0x9c>
  { 
    // "Normal" clock, no multiprocessor mode (= default)
    UCSR0A = 0b00100000;
 900:	20 e2       	ldi	r18, 0x20	; 32
 902:	20 93 c0 00 	sts	0x00C0, r18
    // No interrupts enabled
    // Receiver enabled
    // Transmitter enabled
    // No 9 bit operation
    UCSR0B = 0b00011000;	
 906:	28 e1       	ldi	r18, 0x18	; 24
 908:	20 93 c1 00 	sts	0x00C1, r18
    // Asynchronous operation, 1 stop bit
    // Bit 2 and bit 1 controls the number of data bits
    UCSR0C = (DataBit-5)<<1;
 90c:	45 50       	subi	r20, 0x05	; 5
 90e:	44 0f       	add	r20, r20
 910:	40 93 c2 00 	sts	0x00C2, r20
	// Set parity bits (if parity used)
	if (Parity == 'E')
 914:	55 34       	cpi	r21, 0x45	; 69
 916:	31 f4       	brne	.+12     	; 0x924 <_Z8InitUARTmhc+0x52>
      UCSR0C |= 0b00100000;
 918:	e2 ec       	ldi	r30, 0xC2	; 194
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	20 81       	ld	r18, Z
 91e:	20 62       	ori	r18, 0x20	; 32
 920:	20 83       	st	Z, r18
 922:	07 c0       	rjmp	.+14     	; 0x932 <_Z8InitUARTmhc+0x60>
    else if (Parity == 'O')	  
 924:	5f 34       	cpi	r21, 0x4F	; 79
 926:	29 f4       	brne	.+10     	; 0x932 <_Z8InitUARTmhc+0x60>
      UCSR0C |= 0b00110000;	
 928:	e2 ec       	ldi	r30, 0xC2	; 194
 92a:	f0 e0       	ldi	r31, 0x00	; 0
 92c:	20 81       	ld	r18, Z
 92e:	20 63       	ori	r18, 0x30	; 48
 930:	20 83       	st	Z, r18
    // Set Baud Rate according to the parameter BaudRate:
    // Select Baud Rate (first store "UBRRH--UBRRL" in local 16-bit variable,
    //                   then write the two 8-bit registers separately):
    TempUBRR = XTAL/(16*BaudRate) - 1;
 932:	88 0f       	add	r24, r24
 934:	99 1f       	adc	r25, r25
 936:	aa 1f       	adc	r26, r26
 938:	bb 1f       	adc	r27, r27
 93a:	88 0f       	add	r24, r24
 93c:	99 1f       	adc	r25, r25
 93e:	aa 1f       	adc	r26, r26
 940:	bb 1f       	adc	r27, r27
 942:	9c 01       	movw	r18, r24
 944:	ad 01       	movw	r20, r26
 946:	22 0f       	add	r18, r18
 948:	33 1f       	adc	r19, r19
 94a:	44 1f       	adc	r20, r20
 94c:	55 1f       	adc	r21, r21
 94e:	22 0f       	add	r18, r18
 950:	33 1f       	adc	r19, r19
 952:	44 1f       	adc	r20, r20
 954:	55 1f       	adc	r21, r21
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	74 e2       	ldi	r23, 0x24	; 36
 95a:	84 ef       	ldi	r24, 0xF4	; 244
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__udivmodsi4>
 962:	21 50       	subi	r18, 0x01	; 1
 964:	30 40       	sbci	r19, 0x00	; 0
    // Write lower part of UBRR
    UBRR0L = TempUBRR;
 966:	20 93 c4 00 	sts	0x00C4, r18
    // Write upper part of UBRR
    UBRR0H = TempUBRR >> 8;
 96a:	30 93 c5 00 	sts	0x00C5, r19
  }  
}
 96e:	1f 91       	pop	r17
 970:	0f 91       	pop	r16
 972:	08 95       	ret

00000974 <_Z9CharReadyv>:
  Returns 0 (FALSE), if the UART has NOT received a new character.
  Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char CharReady()
{
   return UCSR0A & (1<<7);
 974:	80 91 c0 00 	lds	r24, 0x00C0
}
 978:	80 78       	andi	r24, 0x80	; 128
 97a:	08 95       	ret

0000097c <_Z8ReadCharv>:
Then this character is returned.
*************************************************************************/
char ReadChar()
{
  // Wait for new character received
  while ( (UCSR0A & (1<<7)) == 0 )
 97c:	e0 ec       	ldi	r30, 0xC0	; 192
 97e:	f0 e0       	ldi	r31, 0x00	; 0
 980:	80 81       	ld	r24, Z
 982:	88 23       	and	r24, r24
 984:	ec f7       	brge	.-6      	; 0x980 <_Z8ReadCharv+0x4>
  {}                        
  // Then return it
  return UDR0;
 986:	80 91 c6 00 	lds	r24, 0x00C6
}
 98a:	08 95       	ret

0000098c <_Z8SendCharc>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR0A & (1<<5)) == 0 )
 98c:	e0 ec       	ldi	r30, 0xC0	; 192
 98e:	f0 e0       	ldi	r31, 0x00	; 0
 990:	90 81       	ld	r25, Z
 992:	95 ff       	sbrs	r25, 5
 994:	fd cf       	rjmp	.-6      	; 0x990 <_Z8SendCharc+0x4>
  {}
  // Then send the character
  UDR0 = Tegn;
 996:	80 93 c6 00 	sts	0x00C6, r24
}
 99a:	08 95       	ret

0000099c <_Z10SendStringPc>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
 99c:	cf 93       	push	r28
 99e:	df 93       	push	r29
 9a0:	ec 01       	movw	r28, r24
  // Repeat until zero-termination
  while (*Streng != 0)
 9a2:	88 81       	ld	r24, Y
 9a4:	88 23       	and	r24, r24
 9a6:	31 f0       	breq	.+12     	; 0x9b4 <_Z10SendStringPc+0x18>
/*************************************************************************
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
 9a8:	21 96       	adiw	r28, 0x01	; 1
{
  // Repeat until zero-termination
  while (*Streng != 0)
  {
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
 9aa:	0e 94 c6 04 	call	0x98c	; 0x98c <_Z8SendCharc>
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 9ae:	89 91       	ld	r24, Y+
 9b0:	88 23       	and	r24, r24
 9b2:	d9 f7       	brne	.-10     	; 0x9aa <_Z10SendStringPc+0xe>
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 9b4:	df 91       	pop	r29
 9b6:	cf 91       	pop	r28
 9b8:	08 95       	ret

000009ba <_Z11SendIntegeri>:
Makes use of the C standard library <stdlib.h>.
Parameter:
    Tal: The integer to be converted and sent. 
*************************************************************************/
void SendInteger(int Tal)
{
 9ba:	cf 93       	push	r28
 9bc:	df 93       	push	r29
 9be:	cd b7       	in	r28, 0x3d	; 61
 9c0:	de b7       	in	r29, 0x3e	; 62
 9c2:	27 97       	sbiw	r28, 0x07	; 7
 9c4:	0f b6       	in	r0, 0x3f	; 63
 9c6:	f8 94       	cli
 9c8:	de bf       	out	0x3e, r29	; 62
 9ca:	0f be       	out	0x3f, r0	; 63
 9cc:	cd bf       	out	0x3d, r28	; 61
char array[7];
  // Convert the integer to an ASCII string (array), radix = 10 
  itoa(Tal, array, 10);
 9ce:	be 01       	movw	r22, r28
 9d0:	6f 5f       	subi	r22, 0xFF	; 255
 9d2:	7f 4f       	sbci	r23, 0xFF	; 255
 9d4:	4a e0       	ldi	r20, 0x0A	; 10
 9d6:	50 e0       	ldi	r21, 0x00	; 0
 9d8:	0e 94 29 05 	call	0xa52	; 0xa52 <itoa>
  // - then send the string
  SendString(array);
 9dc:	ce 01       	movw	r24, r28
 9de:	01 96       	adiw	r24, 0x01	; 1
 9e0:	0e 94 ce 04 	call	0x99c	; 0x99c <_Z10SendStringPc>
}
 9e4:	27 96       	adiw	r28, 0x07	; 7
 9e6:	0f b6       	in	r0, 0x3f	; 63
 9e8:	f8 94       	cli
 9ea:	de bf       	out	0x3e, r29	; 62
 9ec:	0f be       	out	0x3f, r0	; 63
 9ee:	cd bf       	out	0x3d, r28	; 61
 9f0:	df 91       	pop	r29
 9f2:	cf 91       	pop	r28
 9f4:	08 95       	ret

000009f6 <__udivmodqi4>:
 9f6:	99 1b       	sub	r25, r25
 9f8:	79 e0       	ldi	r23, 0x09	; 9
 9fa:	04 c0       	rjmp	.+8      	; 0xa04 <__udivmodqi4_ep>

000009fc <__udivmodqi4_loop>:
 9fc:	99 1f       	adc	r25, r25
 9fe:	96 17       	cp	r25, r22
 a00:	08 f0       	brcs	.+2      	; 0xa04 <__udivmodqi4_ep>
 a02:	96 1b       	sub	r25, r22

00000a04 <__udivmodqi4_ep>:
 a04:	88 1f       	adc	r24, r24
 a06:	7a 95       	dec	r23
 a08:	c9 f7       	brne	.-14     	; 0x9fc <__udivmodqi4_loop>
 a0a:	80 95       	com	r24
 a0c:	08 95       	ret

00000a0e <__udivmodsi4>:
 a0e:	a1 e2       	ldi	r26, 0x21	; 33
 a10:	1a 2e       	mov	r1, r26
 a12:	aa 1b       	sub	r26, r26
 a14:	bb 1b       	sub	r27, r27
 a16:	fd 01       	movw	r30, r26
 a18:	0d c0       	rjmp	.+26     	; 0xa34 <__udivmodsi4_ep>

00000a1a <__udivmodsi4_loop>:
 a1a:	aa 1f       	adc	r26, r26
 a1c:	bb 1f       	adc	r27, r27
 a1e:	ee 1f       	adc	r30, r30
 a20:	ff 1f       	adc	r31, r31
 a22:	a2 17       	cp	r26, r18
 a24:	b3 07       	cpc	r27, r19
 a26:	e4 07       	cpc	r30, r20
 a28:	f5 07       	cpc	r31, r21
 a2a:	20 f0       	brcs	.+8      	; 0xa34 <__udivmodsi4_ep>
 a2c:	a2 1b       	sub	r26, r18
 a2e:	b3 0b       	sbc	r27, r19
 a30:	e4 0b       	sbc	r30, r20
 a32:	f5 0b       	sbc	r31, r21

00000a34 <__udivmodsi4_ep>:
 a34:	66 1f       	adc	r22, r22
 a36:	77 1f       	adc	r23, r23
 a38:	88 1f       	adc	r24, r24
 a3a:	99 1f       	adc	r25, r25
 a3c:	1a 94       	dec	r1
 a3e:	69 f7       	brne	.-38     	; 0xa1a <__udivmodsi4_loop>
 a40:	60 95       	com	r22
 a42:	70 95       	com	r23
 a44:	80 95       	com	r24
 a46:	90 95       	com	r25
 a48:	9b 01       	movw	r18, r22
 a4a:	ac 01       	movw	r20, r24
 a4c:	bd 01       	movw	r22, r26
 a4e:	cf 01       	movw	r24, r30
 a50:	08 95       	ret

00000a52 <itoa>:
 a52:	fb 01       	movw	r30, r22
 a54:	9f 01       	movw	r18, r30
 a56:	e8 94       	clt
 a58:	42 30       	cpi	r20, 0x02	; 2
 a5a:	c4 f0       	brlt	.+48     	; 0xa8c <itoa+0x3a>
 a5c:	45 32       	cpi	r20, 0x25	; 37
 a5e:	b4 f4       	brge	.+44     	; 0xa8c <itoa+0x3a>
 a60:	4a 30       	cpi	r20, 0x0A	; 10
 a62:	29 f4       	brne	.+10     	; 0xa6e <itoa+0x1c>
 a64:	97 fb       	bst	r25, 7
 a66:	1e f4       	brtc	.+6      	; 0xa6e <itoa+0x1c>
 a68:	90 95       	com	r25
 a6a:	81 95       	neg	r24
 a6c:	9f 4f       	sbci	r25, 0xFF	; 255
 a6e:	64 2f       	mov	r22, r20
 a70:	77 27       	eor	r23, r23
 a72:	0e 94 5a 05 	call	0xab4	; 0xab4 <__udivmodhi4>
 a76:	80 5d       	subi	r24, 0xD0	; 208
 a78:	8a 33       	cpi	r24, 0x3A	; 58
 a7a:	0c f0       	brlt	.+2      	; 0xa7e <itoa+0x2c>
 a7c:	89 5d       	subi	r24, 0xD9	; 217
 a7e:	81 93       	st	Z+, r24
 a80:	cb 01       	movw	r24, r22
 a82:	00 97       	sbiw	r24, 0x00	; 0
 a84:	a1 f7       	brne	.-24     	; 0xa6e <itoa+0x1c>
 a86:	16 f4       	brtc	.+4      	; 0xa8c <itoa+0x3a>
 a88:	5d e2       	ldi	r21, 0x2D	; 45
 a8a:	51 93       	st	Z+, r21
 a8c:	10 82       	st	Z, r1
 a8e:	c9 01       	movw	r24, r18
 a90:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <strrev>

00000a94 <strrev>:
 a94:	dc 01       	movw	r26, r24
 a96:	fc 01       	movw	r30, r24
 a98:	67 2f       	mov	r22, r23
 a9a:	71 91       	ld	r23, Z+
 a9c:	77 23       	and	r23, r23
 a9e:	e1 f7       	brne	.-8      	; 0xa98 <strrev+0x4>
 aa0:	32 97       	sbiw	r30, 0x02	; 2
 aa2:	04 c0       	rjmp	.+8      	; 0xaac <strrev+0x18>
 aa4:	7c 91       	ld	r23, X
 aa6:	6d 93       	st	X+, r22
 aa8:	70 83       	st	Z, r23
 aaa:	62 91       	ld	r22, -Z
 aac:	ae 17       	cp	r26, r30
 aae:	bf 07       	cpc	r27, r31
 ab0:	c8 f3       	brcs	.-14     	; 0xaa4 <strrev+0x10>
 ab2:	08 95       	ret

00000ab4 <__udivmodhi4>:
 ab4:	aa 1b       	sub	r26, r26
 ab6:	bb 1b       	sub	r27, r27
 ab8:	51 e1       	ldi	r21, 0x11	; 17
 aba:	07 c0       	rjmp	.+14     	; 0xaca <__udivmodhi4_ep>

00000abc <__udivmodhi4_loop>:
 abc:	aa 1f       	adc	r26, r26
 abe:	bb 1f       	adc	r27, r27
 ac0:	a6 17       	cp	r26, r22
 ac2:	b7 07       	cpc	r27, r23
 ac4:	10 f0       	brcs	.+4      	; 0xaca <__udivmodhi4_ep>
 ac6:	a6 1b       	sub	r26, r22
 ac8:	b7 0b       	sbc	r27, r23

00000aca <__udivmodhi4_ep>:
 aca:	88 1f       	adc	r24, r24
 acc:	99 1f       	adc	r25, r25
 ace:	5a 95       	dec	r21
 ad0:	a9 f7       	brne	.-22     	; 0xabc <__udivmodhi4_loop>
 ad2:	80 95       	com	r24
 ad4:	90 95       	com	r25
 ad6:	bc 01       	movw	r22, r24
 ad8:	cd 01       	movw	r24, r26
 ada:	08 95       	ret

00000adc <_exit>:
 adc:	f8 94       	cli

00000ade <__stop_program>:
 ade:	ff cf       	rjmp	.-2      	; 0xade <__stop_program>
